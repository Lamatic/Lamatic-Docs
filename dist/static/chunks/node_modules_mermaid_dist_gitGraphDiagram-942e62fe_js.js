"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_mermaid_dist_gitGraphDiagram-942e62fe_js"],{

/***/ "./node_modules/mermaid/dist/gitGraphDiagram-942e62fe.js":
/*!***************************************************************!*\
  !*** ./node_modules/mermaid/dist/gitGraphDiagram-942e62fe.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   diagram: function() { return /* binding */ diagram; }\n/* harmony export */ });\n/* harmony import */ var _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mermaid-6dc72991.js */ \"./node_modules/mermaid/dist/mermaid-6dc72991.js\");\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ \"./node_modules/d3/src/index.js\");\n/* harmony import */ var ts_dedent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ts-dedent */ \"./node_modules/ts-dedent/esm/index.js\");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dayjs */ \"./node_modules/dayjs/dayjs.min.js\");\n/* harmony import */ var _braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @braintree/sanitize-url */ \"./node_modules/@braintree/sanitize-url/dist/index.js\");\n/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! dompurify */ \"./node_modules/dompurify/dist/purify.js\");\n\n\n\n\n\n\n\n\n\n\n\nvar parser = function() {\n  var o = function(k, v, o2, l) {\n    for (o2 = o2 || {}, l = k.length; l--; o2[k[l]] = v)\n      ;\n    return o2;\n  }, $V0 = [1, 3], $V1 = [1, 6], $V2 = [1, 4], $V3 = [1, 5], $V4 = [2, 5], $V5 = [1, 12], $V6 = [5, 7, 13, 19, 21, 23, 24, 26, 28, 31, 37, 40, 47], $V7 = [7, 13, 19, 21, 23, 24, 26, 28, 31, 37, 40], $V8 = [7, 12, 13, 19, 21, 23, 24, 26, 28, 31, 37, 40], $V9 = [7, 13, 47], $Va = [1, 42], $Vb = [1, 41], $Vc = [7, 13, 29, 32, 35, 38, 47], $Vd = [1, 55], $Ve = [1, 56], $Vf = [1, 57], $Vg = [7, 13, 32, 35, 42, 47];\n  var parser2 = {\n    trace: function trace() {\n    },\n    yy: {},\n    symbols_: { \"error\": 2, \"start\": 3, \"eol\": 4, \"GG\": 5, \"document\": 6, \"EOF\": 7, \":\": 8, \"DIR\": 9, \"options\": 10, \"body\": 11, \"OPT\": 12, \"NL\": 13, \"line\": 14, \"statement\": 15, \"commitStatement\": 16, \"mergeStatement\": 17, \"cherryPickStatement\": 18, \"acc_title\": 19, \"acc_title_value\": 20, \"acc_descr\": 21, \"acc_descr_value\": 22, \"acc_descr_multiline_value\": 23, \"section\": 24, \"branchStatement\": 25, \"CHECKOUT\": 26, \"ref\": 27, \"BRANCH\": 28, \"ORDER\": 29, \"NUM\": 30, \"CHERRY_PICK\": 31, \"COMMIT_ID\": 32, \"STR\": 33, \"PARENT_COMMIT\": 34, \"COMMIT_TAG\": 35, \"EMPTYSTR\": 36, \"MERGE\": 37, \"COMMIT_TYPE\": 38, \"commitType\": 39, \"COMMIT\": 40, \"commit_arg\": 41, \"COMMIT_MSG\": 42, \"NORMAL\": 43, \"REVERSE\": 44, \"HIGHLIGHT\": 45, \"ID\": 46, \";\": 47, \"$accept\": 0, \"$end\": 1 },\n    terminals_: { 2: \"error\", 5: \"GG\", 7: \"EOF\", 8: \":\", 9: \"DIR\", 12: \"OPT\", 13: \"NL\", 19: \"acc_title\", 20: \"acc_title_value\", 21: \"acc_descr\", 22: \"acc_descr_value\", 23: \"acc_descr_multiline_value\", 24: \"section\", 26: \"CHECKOUT\", 28: \"BRANCH\", 29: \"ORDER\", 30: \"NUM\", 31: \"CHERRY_PICK\", 32: \"COMMIT_ID\", 33: \"STR\", 34: \"PARENT_COMMIT\", 35: \"COMMIT_TAG\", 36: \"EMPTYSTR\", 37: \"MERGE\", 38: \"COMMIT_TYPE\", 40: \"COMMIT\", 42: \"COMMIT_MSG\", 43: \"NORMAL\", 44: \"REVERSE\", 45: \"HIGHLIGHT\", 46: \"ID\", 47: \";\" },\n    productions_: [0, [3, 2], [3, 3], [3, 4], [3, 5], [6, 0], [6, 2], [10, 2], [10, 1], [11, 0], [11, 2], [14, 2], [14, 1], [15, 1], [15, 1], [15, 1], [15, 2], [15, 2], [15, 1], [15, 1], [15, 1], [15, 2], [25, 2], [25, 4], [18, 3], [18, 5], [18, 5], [18, 7], [18, 7], [18, 5], [18, 5], [18, 5], [18, 7], [18, 7], [18, 7], [18, 7], [17, 2], [17, 4], [17, 4], [17, 4], [17, 6], [17, 6], [17, 6], [17, 6], [17, 6], [17, 6], [17, 8], [17, 8], [17, 8], [17, 8], [17, 8], [17, 8], [16, 2], [16, 3], [16, 3], [16, 5], [16, 5], [16, 3], [16, 5], [16, 5], [16, 5], [16, 5], [16, 7], [16, 7], [16, 7], [16, 7], [16, 7], [16, 7], [16, 3], [16, 5], [16, 5], [16, 5], [16, 5], [16, 5], [16, 5], [16, 7], [16, 7], [16, 7], [16, 7], [16, 7], [16, 7], [16, 7], [16, 7], [16, 7], [16, 7], [16, 7], [16, 7], [16, 7], [16, 7], [16, 7], [16, 7], [16, 7], [16, 7], [16, 9], [16, 9], [16, 9], [16, 9], [16, 9], [16, 9], [16, 9], [16, 9], [16, 9], [16, 9], [16, 9], [16, 9], [16, 9], [16, 9], [16, 9], [16, 9], [16, 9], [16, 9], [16, 9], [16, 9], [16, 9], [16, 9], [16, 9], [16, 9], [41, 0], [41, 1], [39, 1], [39, 1], [39, 1], [27, 1], [27, 1], [4, 1], [4, 1], [4, 1]],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {\n      var $0 = $$.length - 1;\n      switch (yystate) {\n        case 2:\n          return $$[$0];\n        case 3:\n          return $$[$0 - 1];\n        case 4:\n          yy.setDirection($$[$0 - 3]);\n          return $$[$0 - 1];\n        case 6:\n          yy.setOptions($$[$0 - 1]);\n          this.$ = $$[$0];\n          break;\n        case 7:\n          $$[$0 - 1] += $$[$0];\n          this.$ = $$[$0 - 1];\n          break;\n        case 9:\n          this.$ = [];\n          break;\n        case 10:\n          $$[$0 - 1].push($$[$0]);\n          this.$ = $$[$0 - 1];\n          break;\n        case 11:\n          this.$ = $$[$0 - 1];\n          break;\n        case 16:\n          this.$ = $$[$0].trim();\n          yy.setAccTitle(this.$);\n          break;\n        case 17:\n        case 18:\n          this.$ = $$[$0].trim();\n          yy.setAccDescription(this.$);\n          break;\n        case 19:\n          yy.addSection($$[$0].substr(8));\n          this.$ = $$[$0].substr(8);\n          break;\n        case 21:\n          yy.checkout($$[$0]);\n          break;\n        case 22:\n          yy.branch($$[$0]);\n          break;\n        case 23:\n          yy.branch($$[$0 - 2], $$[$0]);\n          break;\n        case 24:\n          yy.cherryPick($$[$0], \"\", void 0);\n          break;\n        case 25:\n          yy.cherryPick($$[$0 - 2], \"\", void 0, $$[$0]);\n          break;\n        case 26:\n          yy.cherryPick($$[$0 - 2], \"\", $$[$0]);\n          break;\n        case 27:\n          yy.cherryPick($$[$0 - 4], \"\", $$[$0], $$[$0 - 2]);\n          break;\n        case 28:\n          yy.cherryPick($$[$0 - 4], \"\", $$[$0 - 2], $$[$0]);\n          break;\n        case 29:\n          yy.cherryPick($$[$0], \"\", $$[$0 - 2]);\n          break;\n        case 30:\n          yy.cherryPick($$[$0], \"\", \"\");\n          break;\n        case 31:\n          yy.cherryPick($$[$0 - 2], \"\", \"\");\n          break;\n        case 32:\n          yy.cherryPick($$[$0 - 4], \"\", \"\", $$[$0 - 2]);\n          break;\n        case 33:\n          yy.cherryPick($$[$0 - 4], \"\", \"\", $$[$0]);\n          break;\n        case 34:\n          yy.cherryPick($$[$0 - 2], \"\", $$[$0 - 4], $$[$0]);\n          break;\n        case 35:\n          yy.cherryPick($$[$0 - 2], \"\", \"\", $$[$0]);\n          break;\n        case 36:\n          yy.merge($$[$0], \"\", \"\", \"\");\n          break;\n        case 37:\n          yy.merge($$[$0 - 2], $$[$0], \"\", \"\");\n          break;\n        case 38:\n          yy.merge($$[$0 - 2], \"\", $$[$0], \"\");\n          break;\n        case 39:\n          yy.merge($$[$0 - 2], \"\", \"\", $$[$0]);\n          break;\n        case 40:\n          yy.merge($$[$0 - 4], $$[$0], \"\", $$[$0 - 2]);\n          break;\n        case 41:\n          yy.merge($$[$0 - 4], \"\", $$[$0], $$[$0 - 2]);\n          break;\n        case 42:\n          yy.merge($$[$0 - 4], \"\", $$[$0 - 2], $$[$0]);\n          break;\n        case 43:\n          yy.merge($$[$0 - 4], $$[$0 - 2], $$[$0], \"\");\n          break;\n        case 44:\n          yy.merge($$[$0 - 4], $$[$0 - 2], \"\", $$[$0]);\n          break;\n        case 45:\n          yy.merge($$[$0 - 4], $$[$0], $$[$0 - 2], \"\");\n          break;\n        case 46:\n          yy.merge($$[$0 - 6], $$[$0 - 4], $$[$0 - 2], $$[$0]);\n          break;\n        case 47:\n          yy.merge($$[$0 - 6], $$[$0], $$[$0 - 4], $$[$0 - 2]);\n          break;\n        case 48:\n          yy.merge($$[$0 - 6], $$[$0 - 4], $$[$0], $$[$0 - 2]);\n          break;\n        case 49:\n          yy.merge($$[$0 - 6], $$[$0 - 2], $$[$0 - 4], $$[$0]);\n          break;\n        case 50:\n          yy.merge($$[$0 - 6], $$[$0], $$[$0 - 2], $$[$0 - 4]);\n          break;\n        case 51:\n          yy.merge($$[$0 - 6], $$[$0 - 2], $$[$0], $$[$0 - 4]);\n          break;\n        case 52:\n          yy.commit($$[$0]);\n          break;\n        case 53:\n          yy.commit(\"\", \"\", yy.commitType.NORMAL, $$[$0]);\n          break;\n        case 54:\n          yy.commit(\"\", \"\", $$[$0], \"\");\n          break;\n        case 55:\n          yy.commit(\"\", \"\", $$[$0], $$[$0 - 2]);\n          break;\n        case 56:\n          yy.commit(\"\", \"\", $$[$0 - 2], $$[$0]);\n          break;\n        case 57:\n          yy.commit(\"\", $$[$0], yy.commitType.NORMAL, \"\");\n          break;\n        case 58:\n          yy.commit(\"\", $$[$0 - 2], yy.commitType.NORMAL, $$[$0]);\n          break;\n        case 59:\n          yy.commit(\"\", $$[$0], yy.commitType.NORMAL, $$[$0 - 2]);\n          break;\n        case 60:\n          yy.commit(\"\", $$[$0 - 2], $$[$0], \"\");\n          break;\n        case 61:\n          yy.commit(\"\", $$[$0], $$[$0 - 2], \"\");\n          break;\n        case 62:\n          yy.commit(\"\", $$[$0 - 4], $$[$0 - 2], $$[$0]);\n          break;\n        case 63:\n          yy.commit(\"\", $$[$0 - 4], $$[$0], $$[$0 - 2]);\n          break;\n        case 64:\n          yy.commit(\"\", $$[$0 - 2], $$[$0 - 4], $$[$0]);\n          break;\n        case 65:\n          yy.commit(\"\", $$[$0], $$[$0 - 4], $$[$0 - 2]);\n          break;\n        case 66:\n          yy.commit(\"\", $$[$0], $$[$0 - 2], $$[$0 - 4]);\n          break;\n        case 67:\n          yy.commit(\"\", $$[$0 - 2], $$[$0], $$[$0 - 4]);\n          break;\n        case 68:\n          yy.commit($$[$0], \"\", yy.commitType.NORMAL, \"\");\n          break;\n        case 69:\n          yy.commit($$[$0], \"\", yy.commitType.NORMAL, $$[$0 - 2]);\n          break;\n        case 70:\n          yy.commit($$[$0 - 2], \"\", yy.commitType.NORMAL, $$[$0]);\n          break;\n        case 71:\n          yy.commit($$[$0 - 2], \"\", $$[$0], \"\");\n          break;\n        case 72:\n          yy.commit($$[$0], \"\", $$[$0 - 2], \"\");\n          break;\n        case 73:\n          yy.commit($$[$0], $$[$0 - 2], yy.commitType.NORMAL, \"\");\n          break;\n        case 74:\n          yy.commit($$[$0 - 2], $$[$0], yy.commitType.NORMAL, \"\");\n          break;\n        case 75:\n          yy.commit($$[$0 - 4], \"\", $$[$0 - 2], $$[$0]);\n          break;\n        case 76:\n          yy.commit($$[$0 - 4], \"\", $$[$0], $$[$0 - 2]);\n          break;\n        case 77:\n          yy.commit($$[$0 - 2], \"\", $$[$0 - 4], $$[$0]);\n          break;\n        case 78:\n          yy.commit($$[$0], \"\", $$[$0 - 4], $$[$0 - 2]);\n          break;\n        case 79:\n          yy.commit($$[$0], \"\", $$[$0 - 2], $$[$0 - 4]);\n          break;\n        case 80:\n          yy.commit($$[$0 - 2], \"\", $$[$0], $$[$0 - 4]);\n          break;\n        case 81:\n          yy.commit($$[$0 - 4], $$[$0], $$[$0 - 2], \"\");\n          break;\n        case 82:\n          yy.commit($$[$0 - 4], $$[$0 - 2], $$[$0], \"\");\n          break;\n        case 83:\n          yy.commit($$[$0 - 2], $$[$0], $$[$0 - 4], \"\");\n          break;\n        case 84:\n          yy.commit($$[$0], $$[$0 - 2], $$[$0 - 4], \"\");\n          break;\n        case 85:\n          yy.commit($$[$0], $$[$0 - 4], $$[$0 - 2], \"\");\n          break;\n        case 86:\n          yy.commit($$[$0 - 2], $$[$0 - 4], $$[$0], \"\");\n          break;\n        case 87:\n          yy.commit($$[$0 - 4], $$[$0], yy.commitType.NORMAL, $$[$0 - 2]);\n          break;\n        case 88:\n          yy.commit($$[$0 - 4], $$[$0 - 2], yy.commitType.NORMAL, $$[$0]);\n          break;\n        case 89:\n          yy.commit($$[$0 - 2], $$[$0], yy.commitType.NORMAL, $$[$0 - 4]);\n          break;\n        case 90:\n          yy.commit($$[$0], $$[$0 - 2], yy.commitType.NORMAL, $$[$0 - 4]);\n          break;\n        case 91:\n          yy.commit($$[$0], $$[$0 - 4], yy.commitType.NORMAL, $$[$0 - 2]);\n          break;\n        case 92:\n          yy.commit($$[$0 - 2], $$[$0 - 4], yy.commitType.NORMAL, $$[$0]);\n          break;\n        case 93:\n          yy.commit($$[$0 - 6], $$[$0 - 4], $$[$0 - 2], $$[$0]);\n          break;\n        case 94:\n          yy.commit($$[$0 - 6], $$[$0 - 4], $$[$0], $$[$0 - 2]);\n          break;\n        case 95:\n          yy.commit($$[$0 - 6], $$[$0 - 2], $$[$0 - 4], $$[$0]);\n          break;\n        case 96:\n          yy.commit($$[$0 - 6], $$[$0], $$[$0 - 4], $$[$0 - 2]);\n          break;\n        case 97:\n          yy.commit($$[$0 - 6], $$[$0 - 2], $$[$0], $$[$0 - 4]);\n          break;\n        case 98:\n          yy.commit($$[$0 - 6], $$[$0], $$[$0 - 2], $$[$0 - 4]);\n          break;\n        case 99:\n          yy.commit($$[$0 - 4], $$[$0 - 6], $$[$0 - 2], $$[$0]);\n          break;\n        case 100:\n          yy.commit($$[$0 - 4], $$[$0 - 6], $$[$0], $$[$0 - 2]);\n          break;\n        case 101:\n          yy.commit($$[$0 - 2], $$[$0 - 6], $$[$0 - 4], $$[$0]);\n          break;\n        case 102:\n          yy.commit($$[$0], $$[$0 - 6], $$[$0 - 4], $$[$0 - 2]);\n          break;\n        case 103:\n          yy.commit($$[$0 - 2], $$[$0 - 6], $$[$0], $$[$0 - 4]);\n          break;\n        case 104:\n          yy.commit($$[$0], $$[$0 - 6], $$[$0 - 2], $$[$0 - 4]);\n          break;\n        case 105:\n          yy.commit($$[$0], $$[$0 - 4], $$[$0 - 2], $$[$0 - 6]);\n          break;\n        case 106:\n          yy.commit($$[$0 - 2], $$[$0 - 4], $$[$0], $$[$0 - 6]);\n          break;\n        case 107:\n          yy.commit($$[$0], $$[$0 - 2], $$[$0 - 4], $$[$0 - 6]);\n          break;\n        case 108:\n          yy.commit($$[$0 - 2], $$[$0], $$[$0 - 4], $$[$0 - 6]);\n          break;\n        case 109:\n          yy.commit($$[$0 - 4], $$[$0 - 2], $$[$0], $$[$0 - 6]);\n          break;\n        case 110:\n          yy.commit($$[$0 - 4], $$[$0], $$[$0 - 2], $$[$0 - 6]);\n          break;\n        case 111:\n          yy.commit($$[$0 - 2], $$[$0 - 4], $$[$0 - 6], $$[$0]);\n          break;\n        case 112:\n          yy.commit($$[$0], $$[$0 - 4], $$[$0 - 6], $$[$0 - 2]);\n          break;\n        case 113:\n          yy.commit($$[$0 - 2], $$[$0], $$[$0 - 6], $$[$0 - 4]);\n          break;\n        case 114:\n          yy.commit($$[$0], $$[$0 - 2], $$[$0 - 6], $$[$0 - 4]);\n          break;\n        case 115:\n          yy.commit($$[$0 - 4], $$[$0 - 2], $$[$0 - 6], $$[$0]);\n          break;\n        case 116:\n          yy.commit($$[$0 - 4], $$[$0], $$[$0 - 6], $$[$0 - 2]);\n          break;\n        case 117:\n          this.$ = \"\";\n          break;\n        case 118:\n          this.$ = $$[$0];\n          break;\n        case 119:\n          this.$ = yy.commitType.NORMAL;\n          break;\n        case 120:\n          this.$ = yy.commitType.REVERSE;\n          break;\n        case 121:\n          this.$ = yy.commitType.HIGHLIGHT;\n          break;\n      }\n    },\n    table: [{ 3: 1, 4: 2, 5: $V0, 7: $V1, 13: $V2, 47: $V3 }, { 1: [3] }, { 3: 7, 4: 2, 5: $V0, 7: $V1, 13: $V2, 47: $V3 }, { 6: 8, 7: $V4, 8: [1, 9], 9: [1, 10], 10: 11, 13: $V5 }, o($V6, [2, 124]), o($V6, [2, 125]), o($V6, [2, 126]), { 1: [2, 1] }, { 7: [1, 13] }, { 6: 14, 7: $V4, 10: 11, 13: $V5 }, { 8: [1, 15] }, o($V7, [2, 9], { 11: 16, 12: [1, 17] }), o($V8, [2, 8]), { 1: [2, 2] }, { 7: [1, 18] }, { 6: 19, 7: $V4, 10: 11, 13: $V5 }, { 7: [2, 6], 13: [1, 22], 14: 20, 15: 21, 16: 23, 17: 24, 18: 25, 19: [1, 26], 21: [1, 27], 23: [1, 28], 24: [1, 29], 25: 30, 26: [1, 31], 28: [1, 35], 31: [1, 34], 37: [1, 33], 40: [1, 32] }, o($V8, [2, 7]), { 1: [2, 3] }, { 7: [1, 36] }, o($V7, [2, 10]), { 4: 37, 7: $V1, 13: $V2, 47: $V3 }, o($V7, [2, 12]), o($V9, [2, 13]), o($V9, [2, 14]), o($V9, [2, 15]), { 20: [1, 38] }, { 22: [1, 39] }, o($V9, [2, 18]), o($V9, [2, 19]), o($V9, [2, 20]), { 27: 40, 33: $Va, 46: $Vb }, o($V9, [2, 117], { 41: 43, 32: [1, 46], 33: [1, 48], 35: [1, 44], 38: [1, 45], 42: [1, 47] }), { 27: 49, 33: $Va, 46: $Vb }, { 32: [1, 50], 35: [1, 51] }, { 27: 52, 33: $Va, 46: $Vb }, { 1: [2, 4] }, o($V7, [2, 11]), o($V9, [2, 16]), o($V9, [2, 17]), o($V9, [2, 21]), o($Vc, [2, 122]), o($Vc, [2, 123]), o($V9, [2, 52]), { 33: [1, 53] }, { 39: 54, 43: $Vd, 44: $Ve, 45: $Vf }, { 33: [1, 58] }, { 33: [1, 59] }, o($V9, [2, 118]), o($V9, [2, 36], { 32: [1, 60], 35: [1, 62], 38: [1, 61] }), { 33: [1, 63] }, { 33: [1, 64], 36: [1, 65] }, o($V9, [2, 22], { 29: [1, 66] }), o($V9, [2, 53], { 32: [1, 68], 38: [1, 67], 42: [1, 69] }), o($V9, [2, 54], { 32: [1, 71], 35: [1, 70], 42: [1, 72] }), o($Vg, [2, 119]), o($Vg, [2, 120]), o($Vg, [2, 121]), o($V9, [2, 57], { 35: [1, 73], 38: [1, 74], 42: [1, 75] }), o($V9, [2, 68], { 32: [1, 78], 35: [1, 76], 38: [1, 77] }), { 33: [1, 79] }, { 39: 80, 43: $Vd, 44: $Ve, 45: $Vf }, { 33: [1, 81] }, o($V9, [2, 24], { 34: [1, 82], 35: [1, 83] }), { 32: [1, 84] }, { 32: [1, 85] }, { 30: [1, 86] }, { 39: 87, 43: $Vd, 44: $Ve, 45: $Vf }, { 33: [1, 88] }, { 33: [1, 89] }, { 33: [1, 90] }, { 33: [1, 91] }, { 33: [1, 92] }, { 33: [1, 93] }, { 39: 94, 43: $Vd, 44: $Ve, 45: $Vf }, { 33: [1, 95] }, { 33: [1, 96] }, { 39: 97, 43: $Vd, 44: $Ve, 45: $Vf }, { 33: [1, 98] }, o($V9, [2, 37], { 35: [1, 100], 38: [1, 99] }), o($V9, [2, 38], { 32: [1, 102], 35: [1, 101] }), o($V9, [2, 39], { 32: [1, 103], 38: [1, 104] }), { 33: [1, 105] }, { 33: [1, 106], 36: [1, 107] }, { 33: [1, 108] }, { 33: [1, 109] }, o($V9, [2, 23]), o($V9, [2, 55], { 32: [1, 110], 42: [1, 111] }), o($V9, [2, 59], { 38: [1, 112], 42: [1, 113] }), o($V9, [2, 69], { 32: [1, 115], 38: [1, 114] }), o($V9, [2, 56], { 32: [1, 116], 42: [1, 117] }), o($V9, [2, 61], { 35: [1, 118], 42: [1, 119] }), o($V9, [2, 72], { 32: [1, 121], 35: [1, 120] }), o($V9, [2, 58], { 38: [1, 122], 42: [1, 123] }), o($V9, [2, 60], { 35: [1, 124], 42: [1, 125] }), o($V9, [2, 73], { 35: [1, 127], 38: [1, 126] }), o($V9, [2, 70], { 32: [1, 129], 38: [1, 128] }), o($V9, [2, 71], { 32: [1, 131], 35: [1, 130] }), o($V9, [2, 74], { 35: [1, 133], 38: [1, 132] }), { 39: 134, 43: $Vd, 44: $Ve, 45: $Vf }, { 33: [1, 135] }, { 33: [1, 136] }, { 33: [1, 137] }, { 33: [1, 138] }, { 39: 139, 43: $Vd, 44: $Ve, 45: $Vf }, o($V9, [2, 25], { 35: [1, 140] }), o($V9, [2, 26], { 34: [1, 141] }), o($V9, [2, 31], { 34: [1, 142] }), o($V9, [2, 29], { 34: [1, 143] }), o($V9, [2, 30], { 34: [1, 144] }), { 33: [1, 145] }, { 33: [1, 146] }, { 39: 147, 43: $Vd, 44: $Ve, 45: $Vf }, { 33: [1, 148] }, { 39: 149, 43: $Vd, 44: $Ve, 45: $Vf }, { 33: [1, 150] }, { 33: [1, 151] }, { 33: [1, 152] }, { 33: [1, 153] }, { 33: [1, 154] }, { 33: [1, 155] }, { 33: [1, 156] }, { 39: 157, 43: $Vd, 44: $Ve, 45: $Vf }, { 33: [1, 158] }, { 33: [1, 159] }, { 33: [1, 160] }, { 39: 161, 43: $Vd, 44: $Ve, 45: $Vf }, { 33: [1, 162] }, { 39: 163, 43: $Vd, 44: $Ve, 45: $Vf }, { 33: [1, 164] }, { 33: [1, 165] }, { 33: [1, 166] }, { 39: 167, 43: $Vd, 44: $Ve, 45: $Vf }, { 33: [1, 168] }, o($V9, [2, 43], { 35: [1, 169] }), o($V9, [2, 44], { 38: [1, 170] }), o($V9, [2, 42], { 32: [1, 171] }), o($V9, [2, 45], { 35: [1, 172] }), o($V9, [2, 40], { 38: [1, 173] }), o($V9, [2, 41], { 32: [1, 174] }), { 33: [1, 175], 36: [1, 176] }, { 33: [1, 177] }, { 33: [1, 178] }, { 33: [1, 179] }, { 33: [1, 180] }, o($V9, [2, 66], { 42: [1, 181] }), o($V9, [2, 79], { 32: [1, 182] }), o($V9, [2, 67], { 42: [1, 183] }), o($V9, [2, 90], { 38: [1, 184] }), o($V9, [2, 80], { 32: [1, 185] }), o($V9, [2, 89], { 38: [1, 186] }), o($V9, [2, 65], { 42: [1, 187] }), o($V9, [2, 78], { 32: [1, 188] }), o($V9, [2, 64], { 42: [1, 189] }), o($V9, [2, 84], { 35: [1, 190] }), o($V9, [2, 77], { 32: [1, 191] }), o($V9, [2, 83], { 35: [1, 192] }), o($V9, [2, 63], { 42: [1, 193] }), o($V9, [2, 91], { 38: [1, 194] }), o($V9, [2, 62], { 42: [1, 195] }), o($V9, [2, 85], { 35: [1, 196] }), o($V9, [2, 86], { 35: [1, 197] }), o($V9, [2, 92], { 38: [1, 198] }), o($V9, [2, 76], { 32: [1, 199] }), o($V9, [2, 87], { 38: [1, 200] }), o($V9, [2, 75], { 32: [1, 201] }), o($V9, [2, 81], { 35: [1, 202] }), o($V9, [2, 82], { 35: [1, 203] }), o($V9, [2, 88], { 38: [1, 204] }), { 33: [1, 205] }, { 39: 206, 43: $Vd, 44: $Ve, 45: $Vf }, { 33: [1, 207] }, { 33: [1, 208] }, { 39: 209, 43: $Vd, 44: $Ve, 45: $Vf }, { 33: [1, 210] }, o($V9, [2, 27]), o($V9, [2, 32]), o($V9, [2, 28]), o($V9, [2, 33]), o($V9, [2, 34]), o($V9, [2, 35]), { 33: [1, 211] }, { 33: [1, 212] }, { 33: [1, 213] }, { 39: 214, 43: $Vd, 44: $Ve, 45: $Vf }, { 33: [1, 215] }, { 39: 216, 43: $Vd, 44: $Ve, 45: $Vf }, { 33: [1, 217] }, { 33: [1, 218] }, { 33: [1, 219] }, { 33: [1, 220] }, { 33: [1, 221] }, { 33: [1, 222] }, { 33: [1, 223] }, { 39: 224, 43: $Vd, 44: $Ve, 45: $Vf }, { 33: [1, 225] }, { 33: [1, 226] }, { 33: [1, 227] }, { 39: 228, 43: $Vd, 44: $Ve, 45: $Vf }, { 33: [1, 229] }, { 39: 230, 43: $Vd, 44: $Ve, 45: $Vf }, { 33: [1, 231] }, { 33: [1, 232] }, { 33: [1, 233] }, { 39: 234, 43: $Vd, 44: $Ve, 45: $Vf }, o($V9, [2, 46]), o($V9, [2, 48]), o($V9, [2, 47]), o($V9, [2, 49]), o($V9, [2, 51]), o($V9, [2, 50]), o($V9, [2, 107]), o($V9, [2, 108]), o($V9, [2, 105]), o($V9, [2, 106]), o($V9, [2, 110]), o($V9, [2, 109]), o($V9, [2, 114]), o($V9, [2, 113]), o($V9, [2, 112]), o($V9, [2, 111]), o($V9, [2, 116]), o($V9, [2, 115]), o($V9, [2, 104]), o($V9, [2, 103]), o($V9, [2, 102]), o($V9, [2, 101]), o($V9, [2, 99]), o($V9, [2, 100]), o($V9, [2, 98]), o($V9, [2, 97]), o($V9, [2, 96]), o($V9, [2, 95]), o($V9, [2, 93]), o($V9, [2, 94])],\n    defaultActions: { 7: [2, 1], 13: [2, 2], 18: [2, 3], 36: [2, 4] },\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n      }\n    },\n    parse: function parse(input) {\n      var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = \"\", yylineno = 0, yyleng = 0, TERROR = 2, EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      var lexer2 = Object.create(this.lexer);\n      var sharedState = { yy: {} };\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k];\n        }\n      }\n      lexer2.setInput(input, sharedState.yy);\n      sharedState.yy.lexer = lexer2;\n      sharedState.yy.parser = this;\n      if (typeof lexer2.yylloc == \"undefined\") {\n        lexer2.yylloc = {};\n      }\n      var yyloc = lexer2.yylloc;\n      lstack.push(yyloc);\n      var ranges = lexer2.options && lexer2.options.ranges;\n      if (typeof sharedState.yy.parseError === \"function\") {\n        this.parseError = sharedState.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n      function lex() {\n        var token;\n        token = tstack.pop() || lexer2.lex() || EOF;\n        if (typeof token !== \"number\") {\n          if (token instanceof Array) {\n            tstack = token;\n            token = tstack.pop();\n          }\n          token = self.symbols_[token] || token;\n        }\n        return token;\n      }\n      var symbol, state, action, r, yyval = {}, p, len, newState, expected;\n      while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol === null || typeof symbol == \"undefined\") {\n            symbol = lex();\n          }\n          action = table[state] && table[state][symbol];\n        }\n        if (typeof action === \"undefined\" || !action.length || !action[0]) {\n          var errStr = \"\";\n          expected = [];\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push(\"'\" + this.terminals_[p] + \"'\");\n            }\n          }\n          if (lexer2.showPosition) {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + lexer2.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n          } else {\n            errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == EOF ? \"end of input\" : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n          }\n          this.parseError(errStr, {\n            text: lexer2.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer2.yylineno,\n            loc: yyloc,\n            expected\n          });\n        }\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n        }\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(lexer2.yytext);\n            lstack.push(lexer2.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            {\n              yyleng = lexer2.yyleng;\n              yytext = lexer2.yytext;\n              yylineno = lexer2.yylineno;\n              yyloc = lexer2.yylloc;\n            }\n            break;\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n              yyval._$.range = [\n                lstack[lstack.length - (len || 1)].range[0],\n                lstack[lstack.length - 1].range[1]\n              ];\n            }\n            r = this.performAction.apply(yyval, [\n              yytext,\n              yyleng,\n              yylineno,\n              sharedState.yy,\n              action[1],\n              vstack,\n              lstack\n            ].concat(args));\n            if (typeof r !== \"undefined\") {\n              return r;\n            }\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n          case 3:\n            return true;\n        }\n      }\n      return true;\n    }\n  };\n  var lexer = function() {\n    var lexer2 = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      // resets the lexer, sets new input\n      setInput: function(input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = \"\";\n        this.conditionStack = [\"INITIAL\"];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n        this.offset = 0;\n        return this;\n      },\n      // consumes and returns one char from the input\n      input: function() {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      // unshifts one char (or a string) into the input\n      unput: function(ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n      },\n      // When called from action, caches matched text and appends it on next action\n      more: function() {\n        this._more = true;\n        return this;\n      },\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function() {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n        return this;\n      },\n      // retain first n characters of the match\n      less: function(n) {\n        this.unput(this.match.slice(n));\n      },\n      // displays already matched input, i.e. for error messages\n      pastInput: function() {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? \"...\" : \"\") + past.substr(-20).replace(/\\n/g, \"\");\n      },\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function() {\n        var next = this.match;\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n        return (next.substr(0, 20) + (next.length > 20 ? \"...\" : \"\")).replace(/\\n/g, \"\");\n      },\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function() {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      },\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function(match, indexed_rule) {\n        var token, lines, backup;\n        if (this.options.backtrack_lexer) {\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n          this.done = false;\n        }\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n          return false;\n        }\n        return false;\n      },\n      // return next match in input\n      next: function() {\n        if (this.done) {\n          return this.EOF;\n        }\n        if (!this._input) {\n          this.done = true;\n        }\n        var token, match, tempMatch, index;\n        if (!this._more) {\n          this.yytext = \"\";\n          this.match = \"\";\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue;\n              } else {\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n        if (match) {\n          token = this.test_match(match, rules[index]);\n          if (token !== false) {\n            return token;\n          }\n          return false;\n        }\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          return this.parseError(\"Lexical error on line \" + (this.yylineno + 1) + \". Unrecognized text.\\n\" + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      },\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next();\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions[\"INITIAL\"].rules;\n        }\n      },\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return \"INITIAL\";\n        }\n      },\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition);\n      },\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: { \"case-insensitive\": true },\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        switch ($avoiding_name_collisions) {\n          case 0:\n            this.begin(\"acc_title\");\n            return 19;\n          case 1:\n            this.popState();\n            return \"acc_title_value\";\n          case 2:\n            this.begin(\"acc_descr\");\n            return 21;\n          case 3:\n            this.popState();\n            return \"acc_descr_value\";\n          case 4:\n            this.begin(\"acc_descr_multiline\");\n            break;\n          case 5:\n            this.popState();\n            break;\n          case 6:\n            return \"acc_descr_multiline_value\";\n          case 7:\n            return 13;\n          case 8:\n            break;\n          case 9:\n            break;\n          case 10:\n            return 5;\n          case 11:\n            return 40;\n          case 12:\n            return 32;\n          case 13:\n            return 38;\n          case 14:\n            return 42;\n          case 15:\n            return 43;\n          case 16:\n            return 44;\n          case 17:\n            return 45;\n          case 18:\n            return 35;\n          case 19:\n            return 28;\n          case 20:\n            return 29;\n          case 21:\n            return 37;\n          case 22:\n            return 31;\n          case 23:\n            return 34;\n          case 24:\n            return 26;\n          case 25:\n            return 9;\n          case 26:\n            return 9;\n          case 27:\n            return 8;\n          case 28:\n            return \"CARET\";\n          case 29:\n            this.begin(\"options\");\n            break;\n          case 30:\n            this.popState();\n            break;\n          case 31:\n            return 12;\n          case 32:\n            return 36;\n          case 33:\n            this.begin(\"string\");\n            break;\n          case 34:\n            this.popState();\n            break;\n          case 35:\n            return 33;\n          case 36:\n            return 30;\n          case 37:\n            return 46;\n          case 38:\n            return 7;\n        }\n      },\n      rules: [/^(?:accTitle\\s*:\\s*)/i, /^(?:(?!\\n||)*[^\\n]*)/i, /^(?:accDescr\\s*:\\s*)/i, /^(?:(?!\\n||)*[^\\n]*)/i, /^(?:accDescr\\s*\\{\\s*)/i, /^(?:[\\}])/i, /^(?:[^\\}]*)/i, /^(?:(\\r?\\n)+)/i, /^(?:#[^\\n]*)/i, /^(?:%[^\\n]*)/i, /^(?:gitGraph\\b)/i, /^(?:commit(?=\\s|$))/i, /^(?:id:)/i, /^(?:type:)/i, /^(?:msg:)/i, /^(?:NORMAL\\b)/i, /^(?:REVERSE\\b)/i, /^(?:HIGHLIGHT\\b)/i, /^(?:tag:)/i, /^(?:branch(?=\\s|$))/i, /^(?:order:)/i, /^(?:merge(?=\\s|$))/i, /^(?:cherry-pick(?=\\s|$))/i, /^(?:parent:)/i, /^(?:checkout(?=\\s|$))/i, /^(?:LR\\b)/i, /^(?:TB\\b)/i, /^(?::)/i, /^(?:\\^)/i, /^(?:options\\r?\\n)/i, /^(?:[ \\r\\n\\t]+end\\b)/i, /^(?:[\\s\\S]+(?=[ \\r\\n\\t]+end))/i, /^(?:[\"][\"])/i, /^(?:[\"])/i, /^(?:[\"])/i, /^(?:[^\"]*)/i, /^(?:[0-9]+(?=\\s|$))/i, /^(?:\\w([-\\./\\w]*[-\\w])?)/i, /^(?:$)/i, /^(?:\\s+)/i],\n      conditions: { \"acc_descr_multiline\": { \"rules\": [5, 6], \"inclusive\": false }, \"acc_descr\": { \"rules\": [3], \"inclusive\": false }, \"acc_title\": { \"rules\": [1], \"inclusive\": false }, \"options\": { \"rules\": [30, 31], \"inclusive\": false }, \"string\": { \"rules\": [34, 35], \"inclusive\": false }, \"INITIAL\": { \"rules\": [0, 2, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 36, 37, 38, 39], \"inclusive\": true } }\n    };\n    return lexer2;\n  }();\n  parser2.lexer = lexer;\n  function Parser() {\n    this.yy = {};\n  }\n  Parser.prototype = parser2;\n  parser2.Parser = Parser;\n  return new Parser();\n}();\nparser.parser = parser;\nconst gitGraphParser = parser;\nlet mainBranchName = (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.c)().gitGraph.mainBranchName;\nlet mainBranchOrder = (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.c)().gitGraph.mainBranchOrder;\nlet commits = {};\nlet head = null;\nlet branchesConfig = {};\nbranchesConfig[mainBranchName] = { name: mainBranchName, order: mainBranchOrder };\nlet branches = {};\nbranches[mainBranchName] = head;\nlet curBranch = mainBranchName;\nlet direction = \"LR\";\nlet seq = 0;\nfunction getId() {\n  return (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.y)({ length: 7 });\n}\nfunction uniqBy(list, fn) {\n  const recordMap = /* @__PURE__ */ Object.create(null);\n  return list.reduce((out, item) => {\n    const key = fn(item);\n    if (!recordMap[key]) {\n      recordMap[key] = true;\n      out.push(item);\n    }\n    return out;\n  }, []);\n}\nconst setDirection = function(dir2) {\n  direction = dir2;\n};\nlet options = {};\nconst setOptions = function(rawOptString) {\n  _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(\"options str\", rawOptString);\n  rawOptString = rawOptString && rawOptString.trim();\n  rawOptString = rawOptString || \"{}\";\n  try {\n    options = JSON.parse(rawOptString);\n  } catch (e) {\n    _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.l.error(\"error while parsing gitGraph options\", e.message);\n  }\n};\nconst getOptions = function() {\n  return options;\n};\nconst commit = function(msg, id, type, tag) {\n  _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(\"Entering commit:\", msg, id, type, tag);\n  id = _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.e.sanitizeText(id, (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.c)());\n  msg = _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.e.sanitizeText(msg, (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.c)());\n  tag = _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.e.sanitizeText(tag, (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.c)());\n  const commit2 = {\n    id: id ? id : seq + \"-\" + getId(),\n    message: msg,\n    seq: seq++,\n    type: type ? type : commitType$1.NORMAL,\n    tag: tag ? tag : \"\",\n    parents: head == null ? [] : [head.id],\n    branch: curBranch\n  };\n  head = commit2;\n  commits[commit2.id] = commit2;\n  branches[curBranch] = commit2.id;\n  _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(\"in pushCommit \" + commit2.id);\n};\nconst branch = function(name, order) {\n  name = _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.e.sanitizeText(name, (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.c)());\n  if (branches[name] === void 0) {\n    branches[name] = head != null ? head.id : null;\n    branchesConfig[name] = { name, order: order ? parseInt(order, 10) : null };\n    checkout(name);\n    _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(\"in createBranch\");\n  } else {\n    let error = new Error(\n      'Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using \"checkout ' + name + '\")'\n    );\n    error.hash = {\n      text: \"branch \" + name,\n      token: \"branch \" + name,\n      line: \"1\",\n      loc: { first_line: 1, last_line: 1, first_column: 1, last_column: 1 },\n      expected: ['\"checkout ' + name + '\"']\n    };\n    throw error;\n  }\n};\nconst merge = function(otherBranch, custom_id, override_type, custom_tag) {\n  otherBranch = _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.e.sanitizeText(otherBranch, (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.c)());\n  custom_id = _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.e.sanitizeText(custom_id, (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.c)());\n  const currentCommit = commits[branches[curBranch]];\n  const otherCommit = commits[branches[otherBranch]];\n  if (curBranch === otherBranch) {\n    let error = new Error('Incorrect usage of \"merge\". Cannot merge a branch to itself');\n    error.hash = {\n      text: \"merge \" + otherBranch,\n      token: \"merge \" + otherBranch,\n      line: \"1\",\n      loc: { first_line: 1, last_line: 1, first_column: 1, last_column: 1 },\n      expected: [\"branch abc\"]\n    };\n    throw error;\n  } else if (currentCommit === void 0 || !currentCommit) {\n    let error = new Error(\n      'Incorrect usage of \"merge\". Current branch (' + curBranch + \")has no commits\"\n    );\n    error.hash = {\n      text: \"merge \" + otherBranch,\n      token: \"merge \" + otherBranch,\n      line: \"1\",\n      loc: { first_line: 1, last_line: 1, first_column: 1, last_column: 1 },\n      expected: [\"commit\"]\n    };\n    throw error;\n  } else if (branches[otherBranch] === void 0) {\n    let error = new Error(\n      'Incorrect usage of \"merge\". Branch to be merged (' + otherBranch + \") does not exist\"\n    );\n    error.hash = {\n      text: \"merge \" + otherBranch,\n      token: \"merge \" + otherBranch,\n      line: \"1\",\n      loc: { first_line: 1, last_line: 1, first_column: 1, last_column: 1 },\n      expected: [\"branch \" + otherBranch]\n    };\n    throw error;\n  } else if (otherCommit === void 0 || !otherCommit) {\n    let error = new Error(\n      'Incorrect usage of \"merge\". Branch to be merged (' + otherBranch + \") has no commits\"\n    );\n    error.hash = {\n      text: \"merge \" + otherBranch,\n      token: \"merge \" + otherBranch,\n      line: \"1\",\n      loc: { first_line: 1, last_line: 1, first_column: 1, last_column: 1 },\n      expected: ['\"commit\"']\n    };\n    throw error;\n  } else if (currentCommit === otherCommit) {\n    let error = new Error('Incorrect usage of \"merge\". Both branches have same head');\n    error.hash = {\n      text: \"merge \" + otherBranch,\n      token: \"merge \" + otherBranch,\n      line: \"1\",\n      loc: { first_line: 1, last_line: 1, first_column: 1, last_column: 1 },\n      expected: [\"branch abc\"]\n    };\n    throw error;\n  } else if (custom_id && commits[custom_id] !== void 0) {\n    let error = new Error(\n      'Incorrect usage of \"merge\". Commit with id:' + custom_id + \" already exists, use different custom Id\"\n    );\n    error.hash = {\n      text: \"merge \" + otherBranch + custom_id + override_type + custom_tag,\n      token: \"merge \" + otherBranch + custom_id + override_type + custom_tag,\n      line: \"1\",\n      loc: { first_line: 1, last_line: 1, first_column: 1, last_column: 1 },\n      expected: [\n        \"merge \" + otherBranch + \" \" + custom_id + \"_UNIQUE \" + override_type + \" \" + custom_tag\n      ]\n    };\n    throw error;\n  }\n  const commit2 = {\n    id: custom_id ? custom_id : seq + \"-\" + getId(),\n    message: \"merged branch \" + otherBranch + \" into \" + curBranch,\n    seq: seq++,\n    parents: [head == null ? null : head.id, branches[otherBranch]],\n    branch: curBranch,\n    type: commitType$1.MERGE,\n    customType: override_type,\n    customId: custom_id ? true : false,\n    tag: custom_tag ? custom_tag : \"\"\n  };\n  head = commit2;\n  commits[commit2.id] = commit2;\n  branches[curBranch] = commit2.id;\n  _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(branches);\n  _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(\"in mergeBranch\");\n};\nconst cherryPick = function(sourceId, targetId, tag, parentCommitId) {\n  _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(\"Entering cherryPick:\", sourceId, targetId, tag);\n  sourceId = _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.e.sanitizeText(sourceId, (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.c)());\n  targetId = _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.e.sanitizeText(targetId, (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.c)());\n  tag = _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.e.sanitizeText(tag, (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.c)());\n  parentCommitId = _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.e.sanitizeText(parentCommitId, (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.c)());\n  if (!sourceId || commits[sourceId] === void 0) {\n    let error = new Error(\n      'Incorrect usage of \"cherryPick\". Source commit id should exist and provided'\n    );\n    error.hash = {\n      text: \"cherryPick \" + sourceId + \" \" + targetId,\n      token: \"cherryPick \" + sourceId + \" \" + targetId,\n      line: \"1\",\n      loc: { first_line: 1, last_line: 1, first_column: 1, last_column: 1 },\n      expected: [\"cherry-pick abc\"]\n    };\n    throw error;\n  }\n  let sourceCommit = commits[sourceId];\n  let sourceCommitBranch = sourceCommit.branch;\n  if (parentCommitId && !(Array.isArray(sourceCommit.parents) && sourceCommit.parents.includes(parentCommitId))) {\n    let error = new Error(\n      \"Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.\"\n    );\n    throw error;\n  }\n  if (sourceCommit.type === commitType$1.MERGE && !parentCommitId) {\n    let error = new Error(\n      \"Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.\"\n    );\n    throw error;\n  }\n  if (!targetId || commits[targetId] === void 0) {\n    if (sourceCommitBranch === curBranch) {\n      let error = new Error(\n        'Incorrect usage of \"cherryPick\". Source commit is already on current branch'\n      );\n      error.hash = {\n        text: \"cherryPick \" + sourceId + \" \" + targetId,\n        token: \"cherryPick \" + sourceId + \" \" + targetId,\n        line: \"1\",\n        loc: { first_line: 1, last_line: 1, first_column: 1, last_column: 1 },\n        expected: [\"cherry-pick abc\"]\n      };\n      throw error;\n    }\n    const currentCommit = commits[branches[curBranch]];\n    if (currentCommit === void 0 || !currentCommit) {\n      let error = new Error(\n        'Incorrect usage of \"cherry-pick\". Current branch (' + curBranch + \")has no commits\"\n      );\n      error.hash = {\n        text: \"cherryPick \" + sourceId + \" \" + targetId,\n        token: \"cherryPick \" + sourceId + \" \" + targetId,\n        line: \"1\",\n        loc: { first_line: 1, last_line: 1, first_column: 1, last_column: 1 },\n        expected: [\"cherry-pick abc\"]\n      };\n      throw error;\n    }\n    const commit2 = {\n      id: seq + \"-\" + getId(),\n      message: \"cherry-picked \" + sourceCommit + \" into \" + curBranch,\n      seq: seq++,\n      parents: [head == null ? null : head.id, sourceCommit.id],\n      branch: curBranch,\n      type: commitType$1.CHERRY_PICK,\n      tag: tag ?? `cherry-pick:${sourceCommit.id}${sourceCommit.type === commitType$1.MERGE ? `|parent:${parentCommitId}` : \"\"}`\n    };\n    head = commit2;\n    commits[commit2.id] = commit2;\n    branches[curBranch] = commit2.id;\n    _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(branches);\n    _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(\"in cherryPick\");\n  }\n};\nconst checkout = function(branch2) {\n  branch2 = _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.e.sanitizeText(branch2, (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.c)());\n  if (branches[branch2] === void 0) {\n    let error = new Error(\n      'Trying to checkout branch which is not yet created. (Help try using \"branch ' + branch2 + '\")'\n    );\n    error.hash = {\n      text: \"checkout \" + branch2,\n      token: \"checkout \" + branch2,\n      line: \"1\",\n      loc: { first_line: 1, last_line: 1, first_column: 1, last_column: 1 },\n      expected: ['\"branch ' + branch2 + '\"']\n    };\n    throw error;\n  } else {\n    curBranch = branch2;\n    const id = branches[curBranch];\n    head = commits[id];\n  }\n};\nfunction upsert(arr, key, newVal) {\n  const index = arr.indexOf(key);\n  if (index === -1) {\n    arr.push(newVal);\n  } else {\n    arr.splice(index, 1, newVal);\n  }\n}\nfunction prettyPrintCommitHistory(commitArr) {\n  const commit2 = commitArr.reduce((out, commit3) => {\n    if (out.seq > commit3.seq) {\n      return out;\n    }\n    return commit3;\n  }, commitArr[0]);\n  let line = \"\";\n  commitArr.forEach(function(c) {\n    if (c === commit2) {\n      line += \"\t*\";\n    } else {\n      line += \"\t|\";\n    }\n  });\n  const label = [line, commit2.id, commit2.seq];\n  for (let branch2 in branches) {\n    if (branches[branch2] === commit2.id) {\n      label.push(branch2);\n    }\n  }\n  _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(label.join(\" \"));\n  if (commit2.parents && commit2.parents.length == 2) {\n    const newCommit = commits[commit2.parents[0]];\n    upsert(commitArr, commit2, newCommit);\n    commitArr.push(commits[commit2.parents[1]]);\n  } else if (commit2.parents.length == 0) {\n    return;\n  } else {\n    const nextCommit = commits[commit2.parents];\n    upsert(commitArr, commit2, nextCommit);\n  }\n  commitArr = uniqBy(commitArr, (c) => c.id);\n  prettyPrintCommitHistory(commitArr);\n}\nconst prettyPrint = function() {\n  _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(commits);\n  const node = getCommitsArray()[0];\n  prettyPrintCommitHistory([node]);\n};\nconst clear$1 = function() {\n  commits = {};\n  head = null;\n  let mainBranch = (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.c)().gitGraph.mainBranchName;\n  let mainBranchOrder2 = (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.c)().gitGraph.mainBranchOrder;\n  branches = {};\n  branches[mainBranch] = null;\n  branchesConfig = {};\n  branchesConfig[mainBranch] = { name: mainBranch, order: mainBranchOrder2 };\n  curBranch = mainBranch;\n  seq = 0;\n  (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.v)();\n};\nconst getBranchesAsObjArray = function() {\n  const branchesArray = Object.values(branchesConfig).map((branchConfig, i) => {\n    if (branchConfig.order !== null) {\n      return branchConfig;\n    }\n    return {\n      ...branchConfig,\n      order: parseFloat(`0.${i}`, 10)\n    };\n  }).sort((a, b) => a.order - b.order).map(({ name }) => ({ name }));\n  return branchesArray;\n};\nconst getBranches = function() {\n  return branches;\n};\nconst getCommits = function() {\n  return commits;\n};\nconst getCommitsArray = function() {\n  const commitArr = Object.keys(commits).map(function(key) {\n    return commits[key];\n  });\n  commitArr.forEach(function(o) {\n    _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(o.id);\n  });\n  commitArr.sort((a, b) => a.seq - b.seq);\n  return commitArr;\n};\nconst getCurrentBranch = function() {\n  return curBranch;\n};\nconst getDirection = function() {\n  return direction;\n};\nconst getHead = function() {\n  return head;\n};\nconst commitType$1 = {\n  NORMAL: 0,\n  REVERSE: 1,\n  HIGHLIGHT: 2,\n  MERGE: 3,\n  CHERRY_PICK: 4\n};\nconst gitGraphDb = {\n  getConfig: () => (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.c)().gitGraph,\n  setDirection,\n  setOptions,\n  getOptions,\n  commit,\n  branch,\n  merge,\n  cherryPick,\n  checkout,\n  //reset,\n  prettyPrint,\n  clear: clear$1,\n  getBranchesAsObjArray,\n  getBranches,\n  getCommits,\n  getCommitsArray,\n  getCurrentBranch,\n  getDirection,\n  getHead,\n  setAccTitle: _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.s,\n  getAccTitle: _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.g,\n  getAccDescription: _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.a,\n  setAccDescription: _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.b,\n  setDiagramTitle: _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.q,\n  getDiagramTitle: _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.t,\n  commitType: commitType$1\n};\nlet allCommitsDict = {};\nconst commitType = {\n  NORMAL: 0,\n  REVERSE: 1,\n  HIGHLIGHT: 2,\n  MERGE: 3,\n  CHERRY_PICK: 4\n};\nconst THEME_COLOR_LIMIT = 8;\nlet branchPos = {};\nlet commitPos = {};\nlet lanes = [];\nlet maxPos = 0;\nlet dir = \"LR\";\nconst clear = () => {\n  branchPos = {};\n  commitPos = {};\n  allCommitsDict = {};\n  maxPos = 0;\n  lanes = [];\n  dir = \"LR\";\n};\nconst drawText = (txt) => {\n  const svgLabel = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n  let rows = [];\n  if (typeof txt === \"string\") {\n    rows = txt.split(/\\\\n|\\n|<br\\s*\\/?>/gi);\n  } else if (Array.isArray(txt)) {\n    rows = txt;\n  } else {\n    rows = [];\n  }\n  for (const row of rows) {\n    const tspan = document.createElementNS(\"http://www.w3.org/2000/svg\", \"tspan\");\n    tspan.setAttributeNS(\"http://www.w3.org/XML/1998/namespace\", \"xml:space\", \"preserve\");\n    tspan.setAttribute(\"dy\", \"1em\");\n    tspan.setAttribute(\"x\", \"0\");\n    tspan.setAttribute(\"class\", \"row\");\n    tspan.textContent = row.trim();\n    svgLabel.appendChild(tspan);\n  }\n  return svgLabel;\n};\nconst findClosestParent = (parents) => {\n  let closestParent = \"\";\n  let maxPosition = 0;\n  parents.forEach((parent) => {\n    const parentPosition = dir === \"TB\" ? commitPos[parent].y : commitPos[parent].x;\n    if (parentPosition >= maxPosition) {\n      closestParent = parent;\n      maxPosition = parentPosition;\n    }\n  });\n  return closestParent || void 0;\n};\nconst drawCommits = (svg, commits2, modifyGraph) => {\n  const gitGraphConfig = (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.c)().gitGraph;\n  const gBullets = svg.append(\"g\").attr(\"class\", \"commit-bullets\");\n  const gLabels = svg.append(\"g\").attr(\"class\", \"commit-labels\");\n  let pos = 0;\n  if (dir === \"TB\") {\n    pos = 30;\n  }\n  const keys = Object.keys(commits2);\n  const sortedKeys = keys.sort((a, b) => {\n    return commits2[a].seq - commits2[b].seq;\n  });\n  const isParallelCommits = gitGraphConfig.parallelCommits;\n  const layoutOffset = 10;\n  const commitStep = 40;\n  sortedKeys.forEach((key) => {\n    const commit2 = commits2[key];\n    if (isParallelCommits) {\n      if (commit2.parents.length) {\n        const closestParent = findClosestParent(commit2.parents);\n        pos = dir === \"TB\" ? commitPos[closestParent].y + commitStep : commitPos[closestParent].x + commitStep;\n      } else {\n        pos = 0;\n        if (dir === \"TB\") {\n          pos = 30;\n        }\n      }\n    }\n    const posWithOffset = pos + layoutOffset;\n    const y = dir === \"TB\" ? posWithOffset : branchPos[commit2.branch].pos;\n    const x = dir === \"TB\" ? branchPos[commit2.branch].pos : posWithOffset;\n    if (modifyGraph) {\n      let typeClass;\n      let commitSymbolType = commit2.customType !== void 0 && commit2.customType !== \"\" ? commit2.customType : commit2.type;\n      switch (commitSymbolType) {\n        case commitType.NORMAL:\n          typeClass = \"commit-normal\";\n          break;\n        case commitType.REVERSE:\n          typeClass = \"commit-reverse\";\n          break;\n        case commitType.HIGHLIGHT:\n          typeClass = \"commit-highlight\";\n          break;\n        case commitType.MERGE:\n          typeClass = \"commit-merge\";\n          break;\n        case commitType.CHERRY_PICK:\n          typeClass = \"commit-cherry-pick\";\n          break;\n        default:\n          typeClass = \"commit-normal\";\n      }\n      if (commitSymbolType === commitType.HIGHLIGHT) {\n        const circle = gBullets.append(\"rect\");\n        circle.attr(\"x\", x - 10);\n        circle.attr(\"y\", y - 10);\n        circle.attr(\"height\", 20);\n        circle.attr(\"width\", 20);\n        circle.attr(\n          \"class\",\n          `commit ${commit2.id} commit-highlight${branchPos[commit2.branch].index % THEME_COLOR_LIMIT} ${typeClass}-outer`\n        );\n        gBullets.append(\"rect\").attr(\"x\", x - 6).attr(\"y\", y - 6).attr(\"height\", 12).attr(\"width\", 12).attr(\n          \"class\",\n          `commit ${commit2.id} commit${branchPos[commit2.branch].index % THEME_COLOR_LIMIT} ${typeClass}-inner`\n        );\n      } else if (commitSymbolType === commitType.CHERRY_PICK) {\n        gBullets.append(\"circle\").attr(\"cx\", x).attr(\"cy\", y).attr(\"r\", 10).attr(\"class\", `commit ${commit2.id} ${typeClass}`);\n        gBullets.append(\"circle\").attr(\"cx\", x - 3).attr(\"cy\", y + 2).attr(\"r\", 2.75).attr(\"fill\", \"#fff\").attr(\"class\", `commit ${commit2.id} ${typeClass}`);\n        gBullets.append(\"circle\").attr(\"cx\", x + 3).attr(\"cy\", y + 2).attr(\"r\", 2.75).attr(\"fill\", \"#fff\").attr(\"class\", `commit ${commit2.id} ${typeClass}`);\n        gBullets.append(\"line\").attr(\"x1\", x + 3).attr(\"y1\", y + 1).attr(\"x2\", x).attr(\"y2\", y - 5).attr(\"stroke\", \"#fff\").attr(\"class\", `commit ${commit2.id} ${typeClass}`);\n        gBullets.append(\"line\").attr(\"x1\", x - 3).attr(\"y1\", y + 1).attr(\"x2\", x).attr(\"y2\", y - 5).attr(\"stroke\", \"#fff\").attr(\"class\", `commit ${commit2.id} ${typeClass}`);\n      } else {\n        const circle = gBullets.append(\"circle\");\n        circle.attr(\"cx\", x);\n        circle.attr(\"cy\", y);\n        circle.attr(\"r\", commit2.type === commitType.MERGE ? 9 : 10);\n        circle.attr(\n          \"class\",\n          `commit ${commit2.id} commit${branchPos[commit2.branch].index % THEME_COLOR_LIMIT}`\n        );\n        if (commitSymbolType === commitType.MERGE) {\n          const circle2 = gBullets.append(\"circle\");\n          circle2.attr(\"cx\", x);\n          circle2.attr(\"cy\", y);\n          circle2.attr(\"r\", 6);\n          circle2.attr(\n            \"class\",\n            `commit ${typeClass} ${commit2.id} commit${branchPos[commit2.branch].index % THEME_COLOR_LIMIT}`\n          );\n        }\n        if (commitSymbolType === commitType.REVERSE) {\n          const cross = gBullets.append(\"path\");\n          cross.attr(\"d\", `M ${x - 5},${y - 5}L${x + 5},${y + 5}M${x - 5},${y + 5}L${x + 5},${y - 5}`).attr(\n            \"class\",\n            `commit ${typeClass} ${commit2.id} commit${branchPos[commit2.branch].index % THEME_COLOR_LIMIT}`\n          );\n        }\n      }\n    }\n    if (dir === \"TB\") {\n      commitPos[commit2.id] = { x, y: posWithOffset };\n    } else {\n      commitPos[commit2.id] = { x: posWithOffset, y };\n    }\n    if (modifyGraph) {\n      const px = 4;\n      const py = 2;\n      if (commit2.type !== commitType.CHERRY_PICK && (commit2.customId && commit2.type === commitType.MERGE || commit2.type !== commitType.MERGE) && gitGraphConfig.showCommitLabel) {\n        const wrapper = gLabels.append(\"g\");\n        const labelBkg = wrapper.insert(\"rect\").attr(\"class\", \"commit-label-bkg\");\n        const text = wrapper.append(\"text\").attr(\"x\", pos).attr(\"y\", y + 25).attr(\"class\", \"commit-label\").text(commit2.id);\n        let bbox = text.node().getBBox();\n        labelBkg.attr(\"x\", posWithOffset - bbox.width / 2 - py).attr(\"y\", y + 13.5).attr(\"width\", bbox.width + 2 * py).attr(\"height\", bbox.height + 2 * py);\n        if (dir === \"TB\") {\n          labelBkg.attr(\"x\", x - (bbox.width + 4 * px + 5)).attr(\"y\", y - 12);\n          text.attr(\"x\", x - (bbox.width + 4 * px)).attr(\"y\", y + bbox.height - 12);\n        }\n        if (dir !== \"TB\") {\n          text.attr(\"x\", posWithOffset - bbox.width / 2);\n        }\n        if (gitGraphConfig.rotateCommitLabel) {\n          if (dir === \"TB\") {\n            text.attr(\"transform\", \"rotate(-45, \" + x + \", \" + y + \")\");\n            labelBkg.attr(\"transform\", \"rotate(-45, \" + x + \", \" + y + \")\");\n          } else {\n            let r_x = -7.5 - (bbox.width + 10) / 25 * 9.5;\n            let r_y = 10 + bbox.width / 25 * 8.5;\n            wrapper.attr(\n              \"transform\",\n              \"translate(\" + r_x + \", \" + r_y + \") rotate(-45, \" + pos + \", \" + y + \")\"\n            );\n          }\n        }\n      }\n      if (commit2.tag) {\n        const rect = gLabels.insert(\"polygon\");\n        const hole = gLabels.append(\"circle\");\n        const tag = gLabels.append(\"text\").attr(\"y\", y - 16).attr(\"class\", \"tag-label\").text(commit2.tag);\n        let tagBbox = tag.node().getBBox();\n        tag.attr(\"x\", posWithOffset - tagBbox.width / 2);\n        const h2 = tagBbox.height / 2;\n        const ly = y - 19.2;\n        rect.attr(\"class\", \"tag-label-bkg\").attr(\n          \"points\",\n          `\n          ${pos - tagBbox.width / 2 - px / 2},${ly + py}\n          ${pos - tagBbox.width / 2 - px / 2},${ly - py}\n          ${posWithOffset - tagBbox.width / 2 - px},${ly - h2 - py}\n          ${posWithOffset + tagBbox.width / 2 + px},${ly - h2 - py}\n          ${posWithOffset + tagBbox.width / 2 + px},${ly + h2 + py}\n          ${posWithOffset - tagBbox.width / 2 - px},${ly + h2 + py}`\n        );\n        hole.attr(\"cx\", pos - tagBbox.width / 2 + px / 2).attr(\"cy\", ly).attr(\"r\", 1.5).attr(\"class\", \"tag-hole\");\n        if (dir === \"TB\") {\n          rect.attr(\"class\", \"tag-label-bkg\").attr(\n            \"points\",\n            `\n            ${x},${pos + py}\n            ${x},${pos - py}\n            ${x + layoutOffset},${pos - h2 - py}\n            ${x + layoutOffset + tagBbox.width + px},${pos - h2 - py}\n            ${x + layoutOffset + tagBbox.width + px},${pos + h2 + py}\n            ${x + layoutOffset},${pos + h2 + py}`\n          ).attr(\"transform\", \"translate(12,12) rotate(45, \" + x + \",\" + pos + \")\");\n          hole.attr(\"cx\", x + px / 2).attr(\"cy\", pos).attr(\"transform\", \"translate(12,12) rotate(45, \" + x + \",\" + pos + \")\");\n          tag.attr(\"x\", x + 5).attr(\"y\", pos + 3).attr(\"transform\", \"translate(14,14) rotate(45, \" + x + \",\" + pos + \")\");\n        }\n      }\n    }\n    pos += commitStep + layoutOffset;\n    if (pos > maxPos) {\n      maxPos = pos;\n    }\n  });\n};\nconst shouldRerouteArrow = (commitA, commitB, p1, p2, allCommits) => {\n  const commitBIsFurthest = dir === \"TB\" ? p1.x < p2.x : p1.y < p2.y;\n  const branchToGetCurve = commitBIsFurthest ? commitB.branch : commitA.branch;\n  const isOnBranchToGetCurve = (x) => x.branch === branchToGetCurve;\n  const isBetweenCommits = (x) => x.seq > commitA.seq && x.seq < commitB.seq;\n  return Object.values(allCommits).some((commitX) => {\n    return isBetweenCommits(commitX) && isOnBranchToGetCurve(commitX);\n  });\n};\nconst findLane = (y1, y2, depth = 0) => {\n  const candidate = y1 + Math.abs(y1 - y2) / 2;\n  if (depth > 5) {\n    return candidate;\n  }\n  let ok = lanes.every((lane) => Math.abs(lane - candidate) >= 10);\n  if (ok) {\n    lanes.push(candidate);\n    return candidate;\n  }\n  const diff = Math.abs(y1 - y2);\n  return findLane(y1, y2 - diff / 5, depth + 1);\n};\nconst drawArrow = (svg, commitA, commitB, allCommits) => {\n  const p1 = commitPos[commitA.id];\n  const p2 = commitPos[commitB.id];\n  const arrowNeedsRerouting = shouldRerouteArrow(commitA, commitB, p1, p2, allCommits);\n  let arc = \"\";\n  let arc2 = \"\";\n  let radius = 0;\n  let offset = 0;\n  let colorClassNum = branchPos[commitB.branch].index;\n  if (commitB.type === commitType.MERGE && commitA.id !== commitB.parents[0]) {\n    colorClassNum = branchPos[commitA.branch].index;\n  }\n  let lineDef;\n  if (arrowNeedsRerouting) {\n    arc = \"A 10 10, 0, 0, 0,\";\n    arc2 = \"A 10 10, 0, 0, 1,\";\n    radius = 10;\n    offset = 10;\n    const lineY = p1.y < p2.y ? findLane(p1.y, p2.y) : findLane(p2.y, p1.y);\n    const lineX = p1.x < p2.x ? findLane(p1.x, p2.x) : findLane(p2.x, p1.x);\n    if (dir === \"TB\") {\n      if (p1.x < p2.x) {\n        lineDef = `M ${p1.x} ${p1.y} L ${lineX - radius} ${p1.y} ${arc2} ${lineX} ${p1.y + offset} L ${lineX} ${p2.y - radius} ${arc} ${lineX + offset} ${p2.y} L ${p2.x} ${p2.y}`;\n      } else {\n        colorClassNum = branchPos[commitA.branch].index;\n        lineDef = `M ${p1.x} ${p1.y} L ${lineX + radius} ${p1.y} ${arc} ${lineX} ${p1.y + offset} L ${lineX} ${p2.y - radius} ${arc2} ${lineX - offset} ${p2.y} L ${p2.x} ${p2.y}`;\n      }\n    } else {\n      if (p1.y < p2.y) {\n        lineDef = `M ${p1.x} ${p1.y} L ${p1.x} ${lineY - radius} ${arc} ${p1.x + offset} ${lineY} L ${p2.x - radius} ${lineY} ${arc2} ${p2.x} ${lineY + offset} L ${p2.x} ${p2.y}`;\n      } else {\n        colorClassNum = branchPos[commitA.branch].index;\n        lineDef = `M ${p1.x} ${p1.y} L ${p1.x} ${lineY + radius} ${arc2} ${p1.x + offset} ${lineY} L ${p2.x - radius} ${lineY} ${arc} ${p2.x} ${lineY - offset} L ${p2.x} ${p2.y}`;\n      }\n    }\n  } else {\n    arc = \"A 20 20, 0, 0, 0,\";\n    arc2 = \"A 20 20, 0, 0, 1,\";\n    radius = 20;\n    offset = 20;\n    if (dir === \"TB\") {\n      if (p1.x < p2.x) {\n        if (commitB.type === commitType.MERGE && commitA.id !== commitB.parents[0]) {\n          lineDef = `M ${p1.x} ${p1.y} L ${p1.x} ${p2.y - radius} ${arc} ${p1.x + offset} ${p2.y} L ${p2.x} ${p2.y}`;\n        } else {\n          lineDef = `M ${p1.x} ${p1.y} L ${p2.x - radius} ${p1.y} ${arc2} ${p2.x} ${p1.y + offset} L ${p2.x} ${p2.y}`;\n        }\n      }\n      if (p1.x > p2.x) {\n        arc = \"A 20 20, 0, 0, 0,\";\n        arc2 = \"A 20 20, 0, 0, 1,\";\n        radius = 20;\n        offset = 20;\n        if (commitB.type === commitType.MERGE && commitA.id !== commitB.parents[0]) {\n          lineDef = `M ${p1.x} ${p1.y} L ${p1.x} ${p2.y - radius} ${arc2} ${p1.x - offset} ${p2.y} L ${p2.x} ${p2.y}`;\n        } else {\n          lineDef = `M ${p1.x} ${p1.y} L ${p2.x + radius} ${p1.y} ${arc} ${p2.x} ${p1.y + offset} L ${p2.x} ${p2.y}`;\n        }\n      }\n      if (p1.x === p2.x) {\n        lineDef = `M ${p1.x} ${p1.y} L ${p2.x} ${p2.y}`;\n      }\n    } else {\n      if (p1.y < p2.y) {\n        if (commitB.type === commitType.MERGE && commitA.id !== commitB.parents[0]) {\n          lineDef = `M ${p1.x} ${p1.y} L ${p2.x - radius} ${p1.y} ${arc2} ${p2.x} ${p1.y + offset} L ${p2.x} ${p2.y}`;\n        } else {\n          lineDef = `M ${p1.x} ${p1.y} L ${p1.x} ${p2.y - radius} ${arc} ${p1.x + offset} ${p2.y} L ${p2.x} ${p2.y}`;\n        }\n      }\n      if (p1.y > p2.y) {\n        if (commitB.type === commitType.MERGE && commitA.id !== commitB.parents[0]) {\n          lineDef = `M ${p1.x} ${p1.y} L ${p2.x - radius} ${p1.y} ${arc} ${p2.x} ${p1.y - offset} L ${p2.x} ${p2.y}`;\n        } else {\n          lineDef = `M ${p1.x} ${p1.y} L ${p1.x} ${p2.y + radius} ${arc2} ${p1.x + offset} ${p2.y} L ${p2.x} ${p2.y}`;\n        }\n      }\n      if (p1.y === p2.y) {\n        lineDef = `M ${p1.x} ${p1.y} L ${p2.x} ${p2.y}`;\n      }\n    }\n  }\n  svg.append(\"path\").attr(\"d\", lineDef).attr(\"class\", \"arrow arrow\" + colorClassNum % THEME_COLOR_LIMIT);\n};\nconst drawArrows = (svg, commits2) => {\n  const gArrows = svg.append(\"g\").attr(\"class\", \"commit-arrows\");\n  Object.keys(commits2).forEach((key) => {\n    const commit2 = commits2[key];\n    if (commit2.parents && commit2.parents.length > 0) {\n      commit2.parents.forEach((parent) => {\n        drawArrow(gArrows, commits2[parent], commit2, commits2);\n      });\n    }\n  });\n};\nconst drawBranches = (svg, branches2) => {\n  const gitGraphConfig = (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.c)().gitGraph;\n  const g = svg.append(\"g\");\n  branches2.forEach((branch2, index) => {\n    const adjustIndexForTheme = index % THEME_COLOR_LIMIT;\n    const pos = branchPos[branch2.name].pos;\n    const line = g.append(\"line\");\n    line.attr(\"x1\", 0);\n    line.attr(\"y1\", pos);\n    line.attr(\"x2\", maxPos);\n    line.attr(\"y2\", pos);\n    line.attr(\"class\", \"branch branch\" + adjustIndexForTheme);\n    if (dir === \"TB\") {\n      line.attr(\"y1\", 30);\n      line.attr(\"x1\", pos);\n      line.attr(\"y2\", maxPos);\n      line.attr(\"x2\", pos);\n    }\n    lanes.push(pos);\n    let name = branch2.name;\n    const labelElement = drawText(name);\n    const bkg = g.insert(\"rect\");\n    const branchLabel = g.insert(\"g\").attr(\"class\", \"branchLabel\");\n    const label = branchLabel.insert(\"g\").attr(\"class\", \"label branch-label\" + adjustIndexForTheme);\n    label.node().appendChild(labelElement);\n    let bbox = labelElement.getBBox();\n    bkg.attr(\"class\", \"branchLabelBkg label\" + adjustIndexForTheme).attr(\"rx\", 4).attr(\"ry\", 4).attr(\"x\", -bbox.width - 4 - (gitGraphConfig.rotateCommitLabel === true ? 30 : 0)).attr(\"y\", -bbox.height / 2 + 8).attr(\"width\", bbox.width + 18).attr(\"height\", bbox.height + 4);\n    label.attr(\n      \"transform\",\n      \"translate(\" + (-bbox.width - 14 - (gitGraphConfig.rotateCommitLabel === true ? 30 : 0)) + \", \" + (pos - bbox.height / 2 - 1) + \")\"\n    );\n    if (dir === \"TB\") {\n      bkg.attr(\"x\", pos - bbox.width / 2 - 10).attr(\"y\", 0);\n      label.attr(\"transform\", \"translate(\" + (pos - bbox.width / 2 - 5) + \", 0)\");\n    }\n    if (dir !== \"TB\") {\n      bkg.attr(\"transform\", \"translate(-19, \" + (pos - bbox.height / 2) + \")\");\n    }\n  });\n};\nconst draw = function(txt, id, ver, diagObj) {\n  clear();\n  const conf = (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.c)();\n  const gitGraphConfig = conf.gitGraph;\n  _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.l.debug(\"in gitgraph renderer\", txt + \"\\n\", \"id:\", id, ver);\n  allCommitsDict = diagObj.db.getCommits();\n  const branches2 = diagObj.db.getBranchesAsObjArray();\n  dir = diagObj.db.getDirection();\n  const diagram2 = (0,d3__WEBPACK_IMPORTED_MODULE_0__.select)(`[id=\"${id}\"]`);\n  let pos = 0;\n  branches2.forEach((branch2, index) => {\n    const labelElement = drawText(branch2.name);\n    const g = diagram2.append(\"g\");\n    const branchLabel = g.insert(\"g\").attr(\"class\", \"branchLabel\");\n    const label = branchLabel.insert(\"g\").attr(\"class\", \"label branch-label\");\n    label.node().appendChild(labelElement);\n    let bbox = labelElement.getBBox();\n    branchPos[branch2.name] = { pos, index };\n    pos += 50 + (gitGraphConfig.rotateCommitLabel ? 40 : 0) + (dir === \"TB\" ? bbox.width / 2 : 0);\n    label.remove();\n    branchLabel.remove();\n    g.remove();\n  });\n  drawCommits(diagram2, allCommitsDict, false);\n  if (gitGraphConfig.showBranches) {\n    drawBranches(diagram2, branches2);\n  }\n  drawArrows(diagram2, allCommitsDict);\n  drawCommits(diagram2, allCommitsDict, true);\n  _mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.u.insertTitle(\n    diagram2,\n    \"gitTitleText\",\n    gitGraphConfig.titleTopMargin,\n    diagObj.db.getDiagramTitle()\n  );\n  (0,_mermaid_6dc72991_js__WEBPACK_IMPORTED_MODULE_5__.z)(\n    void 0,\n    diagram2,\n    gitGraphConfig.diagramPadding,\n    gitGraphConfig.useMaxWidth ?? conf.useMaxWidth\n  );\n};\nconst gitGraphRenderer = {\n  draw\n};\nconst getStyles = (options2) => `\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n  ${[0, 1, 2, 3, 4, 5, 6, 7].map(\n  (i) => `\n        .branch-label${i} { fill: ${options2[\"gitBranchLabel\" + i]}; }\n        .commit${i} { stroke: ${options2[\"git\" + i]}; fill: ${options2[\"git\" + i]}; }\n        .commit-highlight${i} { stroke: ${options2[\"gitInv\" + i]}; fill: ${options2[\"gitInv\" + i]}; }\n        .label${i}  { fill: ${options2[\"git\" + i]}; }\n        .arrow${i} { stroke: ${options2[\"git\" + i]}; }\n        `\n).join(\"\\n\")}\n\n  .branch {\n    stroke-width: 1;\n    stroke: ${options2.lineColor};\n    stroke-dasharray: 2;\n  }\n  .commit-label { font-size: ${options2.commitLabelFontSize}; fill: ${options2.commitLabelColor};}\n  .commit-label-bkg { font-size: ${options2.commitLabelFontSize}; fill: ${options2.commitLabelBackground}; opacity: 0.5; }\n  .tag-label { font-size: ${options2.tagLabelFontSize}; fill: ${options2.tagLabelColor};}\n  .tag-label-bkg { fill: ${options2.tagLabelBackground}; stroke: ${options2.tagLabelBorder}; }\n  .tag-hole { fill: ${options2.textColor}; }\n\n  .commit-merge {\n    stroke: ${options2.primaryColor};\n    fill: ${options2.primaryColor};\n  }\n  .commit-reverse {\n    stroke: ${options2.primaryColor};\n    fill: ${options2.primaryColor};\n    stroke-width: 3;\n  }\n  .commit-highlight-outer {\n  }\n  .commit-highlight-inner {\n    stroke: ${options2.primaryColor};\n    fill: ${options2.primaryColor};\n  }\n\n  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}\n  .gitTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${options2.textColor};\n  }\n`;\nconst gitGraphStyles = getStyles;\nconst diagram = {\n  parser: gitGraphParser,\n  db: gitGraphDb,\n  renderer: gitGraphRenderer,\n  styles: gitGraphStyles\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbWVybWFpZC9kaXN0L2dpdEdyYXBoRGlhZ3JhbS05NDJlNjJmZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQTZRO0FBQ2pQO0FBQ1Q7QUFDSjtBQUNrQjtBQUNkO0FBQ0g7QUFDYztBQUNGO0FBQ1o7QUFDYztBQUM5QjtBQUNBO0FBQ0Esc0JBQXNCLGdCQUFnQixLQUFLO0FBQzNDO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEtBQUs7QUFDTCxVQUFVO0FBQ1YsZ0JBQWdCLHVzQkFBdXNCLGdDQUFnQztBQUN2dkIsa0JBQWtCLGdlQUFnZSxHQUFHO0FBQ3JmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLGNBQWMsOENBQThDLElBQUksUUFBUSxJQUFJLDhDQUE4QyxJQUFJLHNEQUFzRCwwREFBMEQsV0FBVyxJQUFJLFlBQVksSUFBSSxnQ0FBZ0MsSUFBSSxZQUFZLG1CQUFtQixxQkFBcUIscUJBQXFCLFdBQVcsSUFBSSxZQUFZLElBQUksZ0NBQWdDLElBQUksNkxBQTZMLG9CQUFvQixXQUFXLElBQUksWUFBWSxxQkFBcUIsaUNBQWlDLHdFQUF3RSxhQUFhLElBQUksYUFBYSx1REFBdUQsMEJBQTBCLHFCQUFxQix5RUFBeUUsS0FBSywwQkFBMEIsSUFBSSwwQkFBMEIsSUFBSSwwQkFBMEIsSUFBSSxXQUFXLDZIQUE2SCxhQUFhLElBQUksbUNBQW1DLElBQUksYUFBYSxJQUFJLGFBQWEsc0NBQXNDLHVDQUF1QyxLQUFLLGFBQWEsSUFBSSwwQkFBMEIsb0JBQW9CLGFBQWEscUJBQXFCLHVDQUF1QyxxQkFBcUIsdUNBQXVDLDJFQUEyRSx1Q0FBdUMscUJBQXFCLHVDQUF1QyxLQUFLLGFBQWEsSUFBSSxtQ0FBbUMsSUFBSSxhQUFhLG9CQUFvQiwwQkFBMEIsS0FBSyxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxtQ0FBbUMsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLGFBQWEsSUFBSSxtQ0FBbUMsSUFBSSxhQUFhLElBQUksYUFBYSxJQUFJLG1DQUFtQyxJQUFJLGFBQWEsb0JBQW9CLDJCQUEyQixxQkFBcUIsNEJBQTRCLHFCQUFxQiw0QkFBNEIsS0FBSyxjQUFjLElBQUksNEJBQTRCLElBQUksY0FBYyxJQUFJLGNBQWMscUNBQXFDLDRCQUE0QixxQkFBcUIsNEJBQTRCLHFCQUFxQiw0QkFBNEIscUJBQXFCLDRCQUE0QixxQkFBcUIsNEJBQTRCLHFCQUFxQiw0QkFBNEIscUJBQXFCLDRCQUE0QixxQkFBcUIsNEJBQTRCLHFCQUFxQiw0QkFBNEIscUJBQXFCLDRCQUE0QixxQkFBcUIsNEJBQTRCLHFCQUFxQiw0QkFBNEIsS0FBSyxvQ0FBb0MsSUFBSSxjQUFjLElBQUksY0FBYyxJQUFJLGNBQWMsSUFBSSxjQUFjLElBQUksb0NBQW9DLG9CQUFvQixjQUFjLHFCQUFxQixjQUFjLHFCQUFxQixjQUFjLHFCQUFxQixjQUFjLHFCQUFxQixjQUFjLEtBQUssY0FBYyxJQUFJLGNBQWMsSUFBSSxvQ0FBb0MsSUFBSSxjQUFjLElBQUksb0NBQW9DLElBQUksY0FBYyxJQUFJLGNBQWMsSUFBSSxjQUFjLElBQUksY0FBYyxJQUFJLGNBQWMsSUFBSSxjQUFjLElBQUksY0FBYyxJQUFJLG9DQUFvQyxJQUFJLGNBQWMsSUFBSSxjQUFjLElBQUksY0FBYyxJQUFJLG9DQUFvQyxJQUFJLGNBQWMsSUFBSSxvQ0FBb0MsSUFBSSxjQUFjLElBQUksY0FBYyxJQUFJLGNBQWMsSUFBSSxvQ0FBb0MsSUFBSSxjQUFjLG9CQUFvQixjQUFjLHFCQUFxQixjQUFjLHFCQUFxQixjQUFjLHFCQUFxQixjQUFjLHFCQUFxQixjQUFjLHFCQUFxQixjQUFjLEtBQUssNEJBQTRCLElBQUksY0FBYyxJQUFJLGNBQWMsSUFBSSxjQUFjLElBQUksY0FBYyxvQkFBb0IsY0FBYyxxQkFBcUIsY0FBYyxxQkFBcUIsY0FBYyxxQkFBcUIsY0FBYyxxQkFBcUIsY0FBYyxxQkFBcUIsY0FBYyxxQkFBcUIsY0FBYyxxQkFBcUIsY0FBYyxxQkFBcUIsY0FBYyxxQkFBcUIsY0FBYyxxQkFBcUIsY0FBYyxxQkFBcUIsY0FBYyxxQkFBcUIsY0FBYyxxQkFBcUIsY0FBYyxxQkFBcUIsY0FBYyxxQkFBcUIsY0FBYyxxQkFBcUIsY0FBYyxxQkFBcUIsY0FBYyxxQkFBcUIsY0FBYyxxQkFBcUIsY0FBYyxxQkFBcUIsY0FBYyxxQkFBcUIsY0FBYyxxQkFBcUIsY0FBYyxxQkFBcUIsY0FBYyxLQUFLLGNBQWMsSUFBSSxvQ0FBb0MsSUFBSSxjQUFjLElBQUksY0FBYyxJQUFJLG9DQUFvQyxJQUFJLGNBQWMsMEdBQTBHLGNBQWMsSUFBSSxjQUFjLElBQUksY0FBYyxJQUFJLG9DQUFvQyxJQUFJLGNBQWMsSUFBSSxvQ0FBb0MsSUFBSSxjQUFjLElBQUksY0FBYyxJQUFJLGNBQWMsSUFBSSxjQUFjLElBQUksY0FBYyxJQUFJLGNBQWMsSUFBSSxjQUFjLElBQUksb0NBQW9DLElBQUksY0FBYyxJQUFJLGNBQWMsSUFBSSxjQUFjLElBQUksb0NBQW9DLElBQUksY0FBYyxJQUFJLG9DQUFvQyxJQUFJLGNBQWMsSUFBSSxjQUFjLElBQUksY0FBYyxJQUFJLG9DQUFvQztBQUNueUwsc0JBQXNCLCtDQUErQztBQUNyRTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFD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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLHVCQUF1QixLQUFLLFFBQVE7QUFDcEMsaUJBQWlCLEtBQUssVUFBVSxzQkFBc0IsUUFBUTtBQUM5RCwyQkFBMkIsS0FBSyxVQUFVLHlCQUF5QixRQUFRO0FBQzNFLGdCQUFnQixNQUFNLFFBQVE7QUFDOUIsZ0JBQWdCLEtBQUssVUFBVTtBQUMvQjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLGtCQUFrQixhQUFhLCtCQUErQixRQUFRO0FBQ3RFLHNCQUFzQixhQUFhLCtCQUErQixRQUFRLGlDQUFpQztBQUMzRyxlQUFlLGFBQWEsNEJBQTRCLFFBQVE7QUFDaEUsbUJBQW1CLFFBQVEsOEJBQThCLFVBQVU7QUFDbkUsY0FBYyxRQUFROztBQUV0QjtBQUNBLGNBQWM7QUFDZCxZQUFZO0FBQ1o7QUFDQTtBQUNBLGNBQWM7QUFDZCxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZCxZQUFZO0FBQ1o7O0FBRUEsV0FBVyxpQkFBaUIsdUJBQXVCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbWVybWFpZC9kaXN0L2dpdEdyYXBoRGlhZ3JhbS05NDJlNjJmZS5qcz84ZmUyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGMgYXMgZ2V0Q29uZmlnLCBzIGFzIHNldEFjY1RpdGxlLCBnIGFzIGdldEFjY1RpdGxlLCBhIGFzIGdldEFjY0Rlc2NyaXB0aW9uLCBiIGFzIHNldEFjY0Rlc2NyaXB0aW9uLCBxIGFzIHNldERpYWdyYW1UaXRsZSwgdCBhcyBnZXREaWFncmFtVGl0bGUsIGwgYXMgbG9nLCBlIGFzIGNvbW1vbiwgdiBhcyBjbGVhciQyLCB5IGFzIHJhbmRvbSwgdSBhcyB1dGlscywgeiBhcyBzZXR1cEdyYXBoVmlld2JveCB9IGZyb20gXCIuL21lcm1haWQtNmRjNzI5OTEuanNcIjtcbmltcG9ydCB7IHNlbGVjdCB9IGZyb20gXCJkM1wiO1xuaW1wb3J0IFwidHMtZGVkZW50XCI7XG5pbXBvcnQgXCJkYXlqc1wiO1xuaW1wb3J0IFwiQGJyYWludHJlZS9zYW5pdGl6ZS11cmxcIjtcbmltcG9ydCBcImRvbXB1cmlmeVwiO1xuaW1wb3J0IFwia2hyb21hXCI7XG5pbXBvcnQgXCJsb2Rhc2gtZXMvbWVtb2l6ZS5qc1wiO1xuaW1wb3J0IFwibG9kYXNoLWVzL21lcmdlLmpzXCI7XG5pbXBvcnQgXCJzdHlsaXNcIjtcbmltcG9ydCBcImxvZGFzaC1lcy9pc0VtcHR5LmpzXCI7XG52YXIgcGFyc2VyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBvID0gZnVuY3Rpb24oaywgdiwgbzIsIGwpIHtcbiAgICBmb3IgKG8yID0gbzIgfHwge30sIGwgPSBrLmxlbmd0aDsgbC0tOyBvMltrW2xdXSA9IHYpXG4gICAgICA7XG4gICAgcmV0dXJuIG8yO1xuICB9LCAkVjAgPSBbMSwgM10sICRWMSA9IFsxLCA2XSwgJFYyID0gWzEsIDRdLCAkVjMgPSBbMSwgNV0sICRWNCA9IFsyLCA1XSwgJFY1ID0gWzEsIDEyXSwgJFY2ID0gWzUsIDcsIDEzLCAxOSwgMjEsIDIzLCAyNCwgMjYsIDI4LCAzMSwgMzcsIDQwLCA0N10sICRWNyA9IFs3LCAxMywgMTksIDIxLCAyMywgMjQsIDI2LCAyOCwgMzEsIDM3LCA0MF0sICRWOCA9IFs3LCAxMiwgMTMsIDE5LCAyMSwgMjMsIDI0LCAyNiwgMjgsIDMxLCAzNywgNDBdLCAkVjkgPSBbNywgMTMsIDQ3XSwgJFZhID0gWzEsIDQyXSwgJFZiID0gWzEsIDQxXSwgJFZjID0gWzcsIDEzLCAyOSwgMzIsIDM1LCAzOCwgNDddLCAkVmQgPSBbMSwgNTVdLCAkVmUgPSBbMSwgNTZdLCAkVmYgPSBbMSwgNTddLCAkVmcgPSBbNywgMTMsIDMyLCAzNSwgNDIsIDQ3XTtcbiAgdmFyIHBhcnNlcjIgPSB7XG4gICAgdHJhY2U6IGZ1bmN0aW9uIHRyYWNlKCkge1xuICAgIH0sXG4gICAgeXk6IHt9LFxuICAgIHN5bWJvbHNfOiB7IFwiZXJyb3JcIjogMiwgXCJzdGFydFwiOiAzLCBcImVvbFwiOiA0LCBcIkdHXCI6IDUsIFwiZG9jdW1lbnRcIjogNiwgXCJFT0ZcIjogNywgXCI6XCI6IDgsIFwiRElSXCI6IDksIFwib3B0aW9uc1wiOiAxMCwgXCJib2R5XCI6IDExLCBcIk9QVFwiOiAxMiwgXCJOTFwiOiAxMywgXCJsaW5lXCI6IDE0LCBcInN0YXRlbWVudFwiOiAxNSwgXCJjb21taXRTdGF0ZW1lbnRcIjogMTYsIFwibWVyZ2VTdGF0ZW1lbnRcIjogMTcsIFwiY2hlcnJ5UGlja1N0YXRlbWVudFwiOiAxOCwgXCJhY2NfdGl0bGVcIjogMTksIFwiYWNjX3RpdGxlX3ZhbHVlXCI6IDIwLCBcImFjY19kZXNjclwiOiAyMSwgXCJhY2NfZGVzY3JfdmFsdWVcIjogMjIsIFwiYWNjX2Rlc2NyX211bHRpbGluZV92YWx1ZVwiOiAyMywgXCJzZWN0aW9uXCI6IDI0LCBcImJyYW5jaFN0YXRlbWVudFwiOiAyNSwgXCJDSEVDS09VVFwiOiAyNiwgXCJyZWZcIjogMjcsIFwiQlJBTkNIXCI6IDI4LCBcIk9SREVSXCI6IDI5LCBcIk5VTVwiOiAzMCwgXCJDSEVSUllfUElDS1wiOiAzMSwgXCJDT01NSVRfSURcIjogMzIsIFwiU1RSXCI6IDMzLCBcIlBBUkVOVF9DT01NSVRcIjogMzQsIFwiQ09NTUlUX1RBR1wiOiAzNSwgXCJFTVBUWVNUUlwiOiAzNiwgXCJNRVJHRVwiOiAzNywgXCJDT01NSVRfVFlQRVwiOiAzOCwgXCJjb21taXRUeXBlXCI6IDM5LCBcIkNPTU1JVFwiOiA0MCwgXCJjb21taXRfYXJnXCI6IDQxLCBcIkNPTU1JVF9NU0dcIjogNDIsIFwiTk9STUFMXCI6IDQzLCBcIlJFVkVSU0VcIjogNDQsIFwiSElHSExJR0hUXCI6IDQ1LCBcIklEXCI6IDQ2LCBcIjtcIjogNDcsIFwiJGFjY2VwdFwiOiAwLCBcIiRlbmRcIjogMSB9LFxuICAgIHRlcm1pbmFsc186IHsgMjogXCJlcnJvclwiLCA1OiBcIkdHXCIsIDc6IFwiRU9GXCIsIDg6IFwiOlwiLCA5OiBcIkRJUlwiLCAxMjogXCJPUFRcIiwgMTM6IFwiTkxcIiwgMTk6IFwiYWNjX3RpdGxlXCIsIDIwOiBcImFjY190aXRsZV92YWx1ZVwiLCAyMTogXCJhY2NfZGVzY3JcIiwgMjI6IFwiYWNjX2Rlc2NyX3ZhbHVlXCIsIDIzOiBcImFjY19kZXNjcl9tdWx0aWxpbmVfdmFsdWVcIiwgMjQ6IFwic2VjdGlvblwiLCAyNjogXCJDSEVDS09VVFwiLCAyODogXCJCUkFOQ0hcIiwgMjk6IFwiT1JERVJcIiwgMzA6IFwiTlVNXCIsIDMxOiBcIkNIRVJSWV9QSUNLXCIsIDMyOiBcIkNPTU1JVF9JRFwiLCAzMzogXCJTVFJcIiwgMzQ6IFwiUEFSRU5UX0NPTU1JVFwiLCAzNTogXCJDT01NSVRfVEFHXCIsIDM2OiBcIkVNUFRZU1RSXCIsIDM3OiBcIk1FUkdFXCIsIDM4OiBcIkNPTU1JVF9UWVBFXCIsIDQwOiBcIkNPTU1JVFwiLCA0MjogXCJDT01NSVRfTVNHXCIsIDQzOiBcIk5PUk1BTFwiLCA0NDogXCJSRVZFUlNFXCIsIDQ1OiBcIkhJR0hMSUdIVFwiLCA0NjogXCJJRFwiLCA0NzogXCI7XCIgfSxcbiAgICBwcm9kdWN0aW9uc186IFswLCBbMywgMl0sIFszLCAzXSwgWzMsIDRdLCBbMywgNV0sIFs2LCAwXSwgWzYsIDJdLCBbMTAsIDJdLCBbMTAsIDFdLCBbMTEsIDBdLCBbMTEsIDJdLCBbMTQsIDJdLCBbMTQsIDFdLCBbMTUsIDFdLCBbMTUsIDFdLCBbMTUsIDFdLCBbMTUsIDJdLCBbMTUsIDJdLCBbMTUsIDFdLCBbMTUsIDFdLCBbMTUsIDFdLCBbMTUsIDJdLCBbMjUsIDJdLCBbMjUsIDRdLCBbMTgsIDNdLCBbMTgsIDVdLCBbMTgsIDVdLCBbMTgsIDddLCBbMTgsIDddLCBbMTgsIDVdLCBbMTgsIDVdLCBbMTgsIDVdLCBbMTgsIDddLCBbMTgsIDddLCBbMTgsIDddLCBbMTgsIDddLCBbMTcsIDJdLCBbMTcsIDRdLCBbMTcsIDRdLCBbMTcsIDRdLCBbMTcsIDZdLCBbMTcsIDZdLCBbMTcsIDZdLCBbMTcsIDZdLCBbMTcsIDZdLCBbMTcsIDZdLCBbMTcsIDhdLCBbMTcsIDhdLCBbMTcsIDhdLCBbMTcsIDhdLCBbMTcsIDhdLCBbMTcsIDhdLCBbMTYsIDJdLCBbMTYsIDNdLCBbMTYsIDNdLCBbMTYsIDVdLCBbMTYsIDVdLCBbMTYsIDNdLCBbMTYsIDVdLCBbMTYsIDVdLCBbMTYsIDVdLCBbMTYsIDVdLCBbMTYsIDddLCBbMTYsIDddLCBbMTYsIDddLCBbMTYsIDddLCBbMTYsIDddLCBbMTYsIDddLCBbMTYsIDNdLCBbMTYsIDVdLCBbMTYsIDVdLCBbMTYsIDVdLCBbMTYsIDVdLCBbMTYsIDVdLCBbMTYsIDVdLCBbMTYsIDddLCBbMTYsIDddLCBbMTYsIDddLCBbMTYsIDddLCBbMTYsIDddLCBbMTYsIDddLCBbMTYsIDddLCBbMTYsIDddLCBbMTYsIDddLCBbMTYsIDddLCBbMTYsIDddLCBbMTYsIDddLCBbMTYsIDddLCBbMTYsIDddLCBbMTYsIDddLCBbMTYsIDddLCBbMTYsIDddLCBbMTYsIDddLCBbMTYsIDldLCBbMTYsIDldLCBbMTYsIDldLCBbMTYsIDldLCBbMTYsIDldLCBbMTYsIDldLCBbMTYsIDldLCBbMTYsIDldLCBbMTYsIDldLCBbMTYsIDldLCBbMTYsIDldLCBbMTYsIDldLCBbMTYsIDldLCBbMTYsIDldLCBbMTYsIDldLCBbMTYsIDldLCBbMTYsIDldLCBbMTYsIDldLCBbMTYsIDldLCBbMTYsIDldLCBbMTYsIDldLCBbMTYsIDldLCBbMTYsIDldLCBbMTYsIDldLCBbNDEsIDBdLCBbNDEsIDFdLCBbMzksIDFdLCBbMzksIDFdLCBbMzksIDFdLCBbMjcsIDFdLCBbMjcsIDFdLCBbNCwgMV0sIFs0LCAxXSwgWzQsIDFdXSxcbiAgICBwZXJmb3JtQWN0aW9uOiBmdW5jdGlvbiBhbm9ueW1vdXMoeXl0ZXh0LCB5eWxlbmcsIHl5bGluZW5vLCB5eSwgeXlzdGF0ZSwgJCQsIF8kKSB7XG4gICAgICB2YXIgJDAgPSAkJC5sZW5ndGggLSAxO1xuICAgICAgc3dpdGNoICh5eXN0YXRlKSB7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICByZXR1cm4gJCRbJDBdO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgcmV0dXJuICQkWyQwIC0gMV07XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICB5eS5zZXREaXJlY3Rpb24oJCRbJDAgLSAzXSk7XG4gICAgICAgICAgcmV0dXJuICQkWyQwIC0gMV07XG4gICAgICAgIGNhc2UgNjpcbiAgICAgICAgICB5eS5zZXRPcHRpb25zKCQkWyQwIC0gMV0pO1xuICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICQkWyQwIC0gMV0gKz0gJCRbJDBdO1xuICAgICAgICAgIHRoaXMuJCA9ICQkWyQwIC0gMV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgOTpcbiAgICAgICAgICB0aGlzLiQgPSBbXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAkJFskMCAtIDFdLnB1c2goJCRbJDBdKTtcbiAgICAgICAgICB0aGlzLiQgPSAkJFskMCAtIDFdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDExOlxuICAgICAgICAgIHRoaXMuJCA9ICQkWyQwIC0gMV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTY6XG4gICAgICAgICAgdGhpcy4kID0gJCRbJDBdLnRyaW0oKTtcbiAgICAgICAgICB5eS5zZXRBY2NUaXRsZSh0aGlzLiQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE3OlxuICAgICAgICBjYXNlIDE4OlxuICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXS50cmltKCk7XG4gICAgICAgICAgeXkuc2V0QWNjRGVzY3JpcHRpb24odGhpcy4kKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOTpcbiAgICAgICAgICB5eS5hZGRTZWN0aW9uKCQkWyQwXS5zdWJzdHIoOCkpO1xuICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXS5zdWJzdHIoOCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjE6XG4gICAgICAgICAgeXkuY2hlY2tvdXQoJCRbJDBdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyMjpcbiAgICAgICAgICB5eS5icmFuY2goJCRbJDBdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyMzpcbiAgICAgICAgICB5eS5icmFuY2goJCRbJDAgLSAyXSwgJCRbJDBdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyNDpcbiAgICAgICAgICB5eS5jaGVycnlQaWNrKCQkWyQwXSwgXCJcIiwgdm9pZCAwKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyNTpcbiAgICAgICAgICB5eS5jaGVycnlQaWNrKCQkWyQwIC0gMl0sIFwiXCIsIHZvaWQgMCwgJCRbJDBdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyNjpcbiAgICAgICAgICB5eS5jaGVycnlQaWNrKCQkWyQwIC0gMl0sIFwiXCIsICQkWyQwXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjc6XG4gICAgICAgICAgeXkuY2hlcnJ5UGljaygkJFskMCAtIDRdLCBcIlwiLCAkJFskMF0sICQkWyQwIC0gMl0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI4OlxuICAgICAgICAgIHl5LmNoZXJyeVBpY2soJCRbJDAgLSA0XSwgXCJcIiwgJCRbJDAgLSAyXSwgJCRbJDBdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOTpcbiAgICAgICAgICB5eS5jaGVycnlQaWNrKCQkWyQwXSwgXCJcIiwgJCRbJDAgLSAyXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzA6XG4gICAgICAgICAgeXkuY2hlcnJ5UGljaygkJFskMF0sIFwiXCIsIFwiXCIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDMxOlxuICAgICAgICAgIHl5LmNoZXJyeVBpY2soJCRbJDAgLSAyXSwgXCJcIiwgXCJcIik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgeXkuY2hlcnJ5UGljaygkJFskMCAtIDRdLCBcIlwiLCBcIlwiLCAkJFskMCAtIDJdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzMzpcbiAgICAgICAgICB5eS5jaGVycnlQaWNrKCQkWyQwIC0gNF0sIFwiXCIsIFwiXCIsICQkWyQwXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgeXkuY2hlcnJ5UGljaygkJFskMCAtIDJdLCBcIlwiLCAkJFskMCAtIDRdLCAkJFskMF0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM1OlxuICAgICAgICAgIHl5LmNoZXJyeVBpY2soJCRbJDAgLSAyXSwgXCJcIiwgXCJcIiwgJCRbJDBdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzNjpcbiAgICAgICAgICB5eS5tZXJnZSgkJFskMF0sIFwiXCIsIFwiXCIsIFwiXCIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM3OlxuICAgICAgICAgIHl5Lm1lcmdlKCQkWyQwIC0gMl0sICQkWyQwXSwgXCJcIiwgXCJcIik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgeXkubWVyZ2UoJCRbJDAgLSAyXSwgXCJcIiwgJCRbJDBdLCBcIlwiKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOTpcbiAgICAgICAgICB5eS5tZXJnZSgkJFskMCAtIDJdLCBcIlwiLCBcIlwiLCAkJFskMF0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgIHl5Lm1lcmdlKCQkWyQwIC0gNF0sICQkWyQwXSwgXCJcIiwgJCRbJDAgLSAyXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNDE6XG4gICAgICAgICAgeXkubWVyZ2UoJCRbJDAgLSA0XSwgXCJcIiwgJCRbJDBdLCAkJFskMCAtIDJdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICB5eS5tZXJnZSgkJFskMCAtIDRdLCBcIlwiLCAkJFskMCAtIDJdLCAkJFskMF0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQzOlxuICAgICAgICAgIHl5Lm1lcmdlKCQkWyQwIC0gNF0sICQkWyQwIC0gMl0sICQkWyQwXSwgXCJcIik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNDQ6XG4gICAgICAgICAgeXkubWVyZ2UoJCRbJDAgLSA0XSwgJCRbJDAgLSAyXSwgXCJcIiwgJCRbJDBdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICB5eS5tZXJnZSgkJFskMCAtIDRdLCAkJFskMF0sICQkWyQwIC0gMl0sIFwiXCIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQ2OlxuICAgICAgICAgIHl5Lm1lcmdlKCQkWyQwIC0gNl0sICQkWyQwIC0gNF0sICQkWyQwIC0gMl0sICQkWyQwXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgeXkubWVyZ2UoJCRbJDAgLSA2XSwgJCRbJDBdLCAkJFskMCAtIDRdLCAkJFskMCAtIDJdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0ODpcbiAgICAgICAgICB5eS5tZXJnZSgkJFskMCAtIDZdLCAkJFskMCAtIDRdLCAkJFskMF0sICQkWyQwIC0gMl0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQ5OlxuICAgICAgICAgIHl5Lm1lcmdlKCQkWyQwIC0gNl0sICQkWyQwIC0gMl0sICQkWyQwIC0gNF0sICQkWyQwXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNTA6XG4gICAgICAgICAgeXkubWVyZ2UoJCRbJDAgLSA2XSwgJCRbJDBdLCAkJFskMCAtIDJdLCAkJFskMCAtIDRdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA1MTpcbiAgICAgICAgICB5eS5tZXJnZSgkJFskMCAtIDZdLCAkJFskMCAtIDJdLCAkJFskMF0sICQkWyQwIC0gNF0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDUyOlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMF0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDUzOlxuICAgICAgICAgIHl5LmNvbW1pdChcIlwiLCBcIlwiLCB5eS5jb21taXRUeXBlLk5PUk1BTCwgJCRbJDBdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA1NDpcbiAgICAgICAgICB5eS5jb21taXQoXCJcIiwgXCJcIiwgJCRbJDBdLCBcIlwiKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA1NTpcbiAgICAgICAgICB5eS5jb21taXQoXCJcIiwgXCJcIiwgJCRbJDBdLCAkJFskMCAtIDJdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA1NjpcbiAgICAgICAgICB5eS5jb21taXQoXCJcIiwgXCJcIiwgJCRbJDAgLSAyXSwgJCRbJDBdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA1NzpcbiAgICAgICAgICB5eS5jb21taXQoXCJcIiwgJCRbJDBdLCB5eS5jb21taXRUeXBlLk5PUk1BTCwgXCJcIik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNTg6XG4gICAgICAgICAgeXkuY29tbWl0KFwiXCIsICQkWyQwIC0gMl0sIHl5LmNvbW1pdFR5cGUuTk9STUFMLCAkJFskMF0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDU5OlxuICAgICAgICAgIHl5LmNvbW1pdChcIlwiLCAkJFskMF0sIHl5LmNvbW1pdFR5cGUuTk9STUFMLCAkJFskMCAtIDJdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA2MDpcbiAgICAgICAgICB5eS5jb21taXQoXCJcIiwgJCRbJDAgLSAyXSwgJCRbJDBdLCBcIlwiKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA2MTpcbiAgICAgICAgICB5eS5jb21taXQoXCJcIiwgJCRbJDBdLCAkJFskMCAtIDJdLCBcIlwiKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA2MjpcbiAgICAgICAgICB5eS5jb21taXQoXCJcIiwgJCRbJDAgLSA0XSwgJCRbJDAgLSAyXSwgJCRbJDBdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA2MzpcbiAgICAgICAgICB5eS5jb21taXQoXCJcIiwgJCRbJDAgLSA0XSwgJCRbJDBdLCAkJFskMCAtIDJdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICB5eS5jb21taXQoXCJcIiwgJCRbJDAgLSAyXSwgJCRbJDAgLSA0XSwgJCRbJDBdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA2NTpcbiAgICAgICAgICB5eS5jb21taXQoXCJcIiwgJCRbJDBdLCAkJFskMCAtIDRdLCAkJFskMCAtIDJdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA2NjpcbiAgICAgICAgICB5eS5jb21taXQoXCJcIiwgJCRbJDBdLCAkJFskMCAtIDJdLCAkJFskMCAtIDRdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA2NzpcbiAgICAgICAgICB5eS5jb21taXQoXCJcIiwgJCRbJDAgLSAyXSwgJCRbJDBdLCAkJFskMCAtIDRdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA2ODpcbiAgICAgICAgICB5eS5jb21taXQoJCRbJDBdLCBcIlwiLCB5eS5jb21taXRUeXBlLk5PUk1BTCwgXCJcIik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNjk6XG4gICAgICAgICAgeXkuY29tbWl0KCQkWyQwXSwgXCJcIiwgeXkuY29tbWl0VHlwZS5OT1JNQUwsICQkWyQwIC0gMl0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDcwOlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMCAtIDJdLCBcIlwiLCB5eS5jb21taXRUeXBlLk5PUk1BTCwgJCRbJDBdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA3MTpcbiAgICAgICAgICB5eS5jb21taXQoJCRbJDAgLSAyXSwgXCJcIiwgJCRbJDBdLCBcIlwiKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA3MjpcbiAgICAgICAgICB5eS5jb21taXQoJCRbJDBdLCBcIlwiLCAkJFskMCAtIDJdLCBcIlwiKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA3MzpcbiAgICAgICAgICB5eS5jb21taXQoJCRbJDBdLCAkJFskMCAtIDJdLCB5eS5jb21taXRUeXBlLk5PUk1BTCwgXCJcIik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNzQ6XG4gICAgICAgICAgeXkuY29tbWl0KCQkWyQwIC0gMl0sICQkWyQwXSwgeXkuY29tbWl0VHlwZS5OT1JNQUwsIFwiXCIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDc1OlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMCAtIDRdLCBcIlwiLCAkJFskMCAtIDJdLCAkJFskMF0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDc2OlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMCAtIDRdLCBcIlwiLCAkJFskMF0sICQkWyQwIC0gMl0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDc3OlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMCAtIDJdLCBcIlwiLCAkJFskMCAtIDRdLCAkJFskMF0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDc4OlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMF0sIFwiXCIsICQkWyQwIC0gNF0sICQkWyQwIC0gMl0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDc5OlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMF0sIFwiXCIsICQkWyQwIC0gMl0sICQkWyQwIC0gNF0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDgwOlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMCAtIDJdLCBcIlwiLCAkJFskMF0sICQkWyQwIC0gNF0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDgxOlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMCAtIDRdLCAkJFskMF0sICQkWyQwIC0gMl0sIFwiXCIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDgyOlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMCAtIDRdLCAkJFskMCAtIDJdLCAkJFskMF0sIFwiXCIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDgzOlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMCAtIDJdLCAkJFskMF0sICQkWyQwIC0gNF0sIFwiXCIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDg0OlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMF0sICQkWyQwIC0gMl0sICQkWyQwIC0gNF0sIFwiXCIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDg1OlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMF0sICQkWyQwIC0gNF0sICQkWyQwIC0gMl0sIFwiXCIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDg2OlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMCAtIDJdLCAkJFskMCAtIDRdLCAkJFskMF0sIFwiXCIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDg3OlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMCAtIDRdLCAkJFskMF0sIHl5LmNvbW1pdFR5cGUuTk9STUFMLCAkJFskMCAtIDJdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA4ODpcbiAgICAgICAgICB5eS5jb21taXQoJCRbJDAgLSA0XSwgJCRbJDAgLSAyXSwgeXkuY29tbWl0VHlwZS5OT1JNQUwsICQkWyQwXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgODk6XG4gICAgICAgICAgeXkuY29tbWl0KCQkWyQwIC0gMl0sICQkWyQwXSwgeXkuY29tbWl0VHlwZS5OT1JNQUwsICQkWyQwIC0gNF0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDkwOlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMF0sICQkWyQwIC0gMl0sIHl5LmNvbW1pdFR5cGUuTk9STUFMLCAkJFskMCAtIDRdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA5MTpcbiAgICAgICAgICB5eS5jb21taXQoJCRbJDBdLCAkJFskMCAtIDRdLCB5eS5jb21taXRUeXBlLk5PUk1BTCwgJCRbJDAgLSAyXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgOTI6XG4gICAgICAgICAgeXkuY29tbWl0KCQkWyQwIC0gMl0sICQkWyQwIC0gNF0sIHl5LmNvbW1pdFR5cGUuTk9STUFMLCAkJFskMF0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDkzOlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMCAtIDZdLCAkJFskMCAtIDRdLCAkJFskMCAtIDJdLCAkJFskMF0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDk0OlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMCAtIDZdLCAkJFskMCAtIDRdLCAkJFskMF0sICQkWyQwIC0gMl0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDk1OlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMCAtIDZdLCAkJFskMCAtIDJdLCAkJFskMCAtIDRdLCAkJFskMF0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDk2OlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMCAtIDZdLCAkJFskMF0sICQkWyQwIC0gNF0sICQkWyQwIC0gMl0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDk3OlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMCAtIDZdLCAkJFskMCAtIDJdLCAkJFskMF0sICQkWyQwIC0gNF0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDk4OlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMCAtIDZdLCAkJFskMF0sICQkWyQwIC0gMl0sICQkWyQwIC0gNF0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDk5OlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMCAtIDRdLCAkJFskMCAtIDZdLCAkJFskMCAtIDJdLCAkJFskMF0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgICB5eS5jb21taXQoJCRbJDAgLSA0XSwgJCRbJDAgLSA2XSwgJCRbJDBdLCAkJFskMCAtIDJdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMDE6XG4gICAgICAgICAgeXkuY29tbWl0KCQkWyQwIC0gMl0sICQkWyQwIC0gNl0sICQkWyQwIC0gNF0sICQkWyQwXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTAyOlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMF0sICQkWyQwIC0gNl0sICQkWyQwIC0gNF0sICQkWyQwIC0gMl0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDEwMzpcbiAgICAgICAgICB5eS5jb21taXQoJCRbJDAgLSAyXSwgJCRbJDAgLSA2XSwgJCRbJDBdLCAkJFskMCAtIDRdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMDQ6XG4gICAgICAgICAgeXkuY29tbWl0KCQkWyQwXSwgJCRbJDAgLSA2XSwgJCRbJDAgLSAyXSwgJCRbJDAgLSA0XSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTA1OlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMF0sICQkWyQwIC0gNF0sICQkWyQwIC0gMl0sICQkWyQwIC0gNl0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDEwNjpcbiAgICAgICAgICB5eS5jb21taXQoJCRbJDAgLSAyXSwgJCRbJDAgLSA0XSwgJCRbJDBdLCAkJFskMCAtIDZdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMDc6XG4gICAgICAgICAgeXkuY29tbWl0KCQkWyQwXSwgJCRbJDAgLSAyXSwgJCRbJDAgLSA0XSwgJCRbJDAgLSA2XSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTA4OlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMCAtIDJdLCAkJFskMF0sICQkWyQwIC0gNF0sICQkWyQwIC0gNl0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDEwOTpcbiAgICAgICAgICB5eS5jb21taXQoJCRbJDAgLSA0XSwgJCRbJDAgLSAyXSwgJCRbJDBdLCAkJFskMCAtIDZdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMTA6XG4gICAgICAgICAgeXkuY29tbWl0KCQkWyQwIC0gNF0sICQkWyQwXSwgJCRbJDAgLSAyXSwgJCRbJDAgLSA2XSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTExOlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMCAtIDJdLCAkJFskMCAtIDRdLCAkJFskMCAtIDZdLCAkJFskMF0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDExMjpcbiAgICAgICAgICB5eS5jb21taXQoJCRbJDBdLCAkJFskMCAtIDRdLCAkJFskMCAtIDZdLCAkJFskMCAtIDJdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMTM6XG4gICAgICAgICAgeXkuY29tbWl0KCQkWyQwIC0gMl0sICQkWyQwXSwgJCRbJDAgLSA2XSwgJCRbJDAgLSA0XSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTE0OlxuICAgICAgICAgIHl5LmNvbW1pdCgkJFskMF0sICQkWyQwIC0gMl0sICQkWyQwIC0gNl0sICQkWyQwIC0gNF0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICB5eS5jb21taXQoJCRbJDAgLSA0XSwgJCRbJDAgLSAyXSwgJCRbJDAgLSA2XSwgJCRbJDBdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMTY6XG4gICAgICAgICAgeXkuY29tbWl0KCQkWyQwIC0gNF0sICQkWyQwXSwgJCRbJDAgLSA2XSwgJCRbJDAgLSAyXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTE3OlxuICAgICAgICAgIHRoaXMuJCA9IFwiXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTE4OlxuICAgICAgICAgIHRoaXMuJCA9ICQkWyQwXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMTk6XG4gICAgICAgICAgdGhpcy4kID0geXkuY29tbWl0VHlwZS5OT1JNQUw7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTIwOlxuICAgICAgICAgIHRoaXMuJCA9IHl5LmNvbW1pdFR5cGUuUkVWRVJTRTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMjE6XG4gICAgICAgICAgdGhpcy4kID0geXkuY29tbWl0VHlwZS5ISUdITElHSFQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSxcbiAgICB0YWJsZTogW3sgMzogMSwgNDogMiwgNTogJFYwLCA3OiAkVjEsIDEzOiAkVjIsIDQ3OiAkVjMgfSwgeyAxOiBbM10gfSwgeyAzOiA3LCA0OiAyLCA1OiAkVjAsIDc6ICRWMSwgMTM6ICRWMiwgNDc6ICRWMyB9LCB7IDY6IDgsIDc6ICRWNCwgODogWzEsIDldLCA5OiBbMSwgMTBdLCAxMDogMTEsIDEzOiAkVjUgfSwgbygkVjYsIFsyLCAxMjRdKSwgbygkVjYsIFsyLCAxMjVdKSwgbygkVjYsIFsyLCAxMjZdKSwgeyAxOiBbMiwgMV0gfSwgeyA3OiBbMSwgMTNdIH0sIHsgNjogMTQsIDc6ICRWNCwgMTA6IDExLCAxMzogJFY1IH0sIHsgODogWzEsIDE1XSB9LCBvKCRWNywgWzIsIDldLCB7IDExOiAxNiwgMTI6IFsxLCAxN10gfSksIG8oJFY4LCBbMiwgOF0pLCB7IDE6IFsyLCAyXSB9LCB7IDc6IFsxLCAxOF0gfSwgeyA2OiAxOSwgNzogJFY0LCAxMDogMTEsIDEzOiAkVjUgfSwgeyA3OiBbMiwgNl0sIDEzOiBbMSwgMjJdLCAxNDogMjAsIDE1OiAyMSwgMTY6IDIzLCAxNzogMjQsIDE4OiAyNSwgMTk6IFsxLCAyNl0sIDIxOiBbMSwgMjddLCAyMzogWzEsIDI4XSwgMjQ6IFsxLCAyOV0sIDI1OiAzMCwgMjY6IFsxLCAzMV0sIDI4OiBbMSwgMzVdLCAzMTogWzEsIDM0XSwgMzc6IFsxLCAzM10sIDQwOiBbMSwgMzJdIH0sIG8oJFY4LCBbMiwgN10pLCB7IDE6IFsyLCAzXSB9LCB7IDc6IFsxLCAzNl0gfSwgbygkVjcsIFsyLCAxMF0pLCB7IDQ6IDM3LCA3OiAkVjEsIDEzOiAkVjIsIDQ3OiAkVjMgfSwgbygkVjcsIFsyLCAxMl0pLCBvKCRWOSwgWzIsIDEzXSksIG8oJFY5LCBbMiwgMTRdKSwgbygkVjksIFsyLCAxNV0pLCB7IDIwOiBbMSwgMzhdIH0sIHsgMjI6IFsxLCAzOV0gfSwgbygkVjksIFsyLCAxOF0pLCBvKCRWOSwgWzIsIDE5XSksIG8oJFY5LCBbMiwgMjBdKSwgeyAyNzogNDAsIDMzOiAkVmEsIDQ2OiAkVmIgfSwgbygkVjksIFsyLCAxMTddLCB7IDQxOiA0MywgMzI6IFsxLCA0Nl0sIDMzOiBbMSwgNDhdLCAzNTogWzEsIDQ0XSwgMzg6IFsxLCA0NV0sIDQyOiBbMSwgNDddIH0pLCB7IDI3OiA0OSwgMzM6ICRWYSwgNDY6ICRWYiB9LCB7IDMyOiBbMSwgNTBdLCAzNTogWzEsIDUxXSB9LCB7IDI3OiA1MiwgMzM6ICRWYSwgNDY6ICRWYiB9LCB7IDE6IFsyLCA0XSB9LCBvKCRWNywgWzIsIDExXSksIG8oJFY5LCBbMiwgMTZdKSwgbygkVjksIFsyLCAxN10pLCBvKCRWOSwgWzIsIDIxXSksIG8oJFZjLCBbMiwgMTIyXSksIG8oJFZjLCBbMiwgMTIzXSksIG8oJFY5LCBbMiwgNTJdKSwgeyAzMzogWzEsIDUzXSB9LCB7IDM5OiA1NCwgNDM6ICRWZCwgNDQ6ICRWZSwgNDU6ICRWZiB9LCB7IDMzOiBbMSwgNThdIH0sIHsgMzM6IFsxLCA1OV0gfSwgbygkVjksIFsyLCAxMThdKSwgbygkVjksIFsyLCAzNl0sIHsgMzI6IFsxLCA2MF0sIDM1OiBbMSwgNjJdLCAzODogWzEsIDYxXSB9KSwgeyAzMzogWzEsIDYzXSB9LCB7IDMzOiBbMSwgNjRdLCAzNjogWzEsIDY1XSB9LCBvKCRWOSwgWzIsIDIyXSwgeyAyOTogWzEsIDY2XSB9KSwgbygkVjksIFsyLCA1M10sIHsgMzI6IFsxLCA2OF0sIDM4OiBbMSwgNjddLCA0MjogWzEsIDY5XSB9KSwgbygkVjksIFsyLCA1NF0sIHsgMzI6IFsxLCA3MV0sIDM1OiBbMSwgNzBdLCA0MjogWzEsIDcyXSB9KSwgbygkVmcsIFsyLCAxMTldKSwgbygkVmcsIFsyLCAxMjBdKSwgbygkVmcsIFsyLCAxMjFdKSwgbygkVjksIFsyLCA1N10sIHsgMzU6IFsxLCA3M10sIDM4OiBbMSwgNzRdLCA0MjogWzEsIDc1XSB9KSwgbygkVjksIFsyLCA2OF0sIHsgMzI6IFsxLCA3OF0sIDM1OiBbMSwgNzZdLCAzODogWzEsIDc3XSB9KSwgeyAzMzogWzEsIDc5XSB9LCB7IDM5OiA4MCwgNDM6ICRWZCwgNDQ6ICRWZSwgNDU6ICRWZiB9LCB7IDMzOiBbMSwgODFdIH0sIG8oJFY5LCBbMiwgMjRdLCB7IDM0OiBbMSwgODJdLCAzNTogWzEsIDgzXSB9KSwgeyAzMjogWzEsIDg0XSB9LCB7IDMyOiBbMSwgODVdIH0sIHsgMzA6IFsxLCA4Nl0gfSwgeyAzOTogODcsIDQzOiAkVmQsIDQ0OiAkVmUsIDQ1OiAkVmYgfSwgeyAzMzogWzEsIDg4XSB9LCB7IDMzOiBbMSwgODldIH0sIHsgMzM6IFsxLCA5MF0gfSwgeyAzMzogWzEsIDkxXSB9LCB7IDMzOiBbMSwgOTJdIH0sIHsgMzM6IFsxLCA5M10gfSwgeyAzOTogOTQsIDQzOiAkVmQsIDQ0OiAkVmUsIDQ1OiAkVmYgfSwgeyAzMzogWzEsIDk1XSB9LCB7IDMzOiBbMSwgOTZdIH0sIHsgMzk6IDk3LCA0MzogJFZkLCA0NDogJFZlLCA0NTogJFZmIH0sIHsgMzM6IFsxLCA5OF0gfSwgbygkVjksIFsyLCAzN10sIHsgMzU6IFsxLCAxMDBdLCAzODogWzEsIDk5XSB9KSwgbygkVjksIFsyLCAzOF0sIHsgMzI6IFsxLCAxMDJdLCAzNTogWzEsIDEwMV0gfSksIG8oJFY5LCBbMiwgMzldLCB7IDMyOiBbMSwgMTAzXSwgMzg6IFsxLCAxMDRdIH0pLCB7IDMzOiBbMSwgMTA1XSB9LCB7IDMzOiBbMSwgMTA2XSwgMzY6IFsxLCAxMDddIH0sIHsgMzM6IFsxLCAxMDhdIH0sIHsgMzM6IFsxLCAxMDldIH0sIG8oJFY5LCBbMiwgMjNdKSwgbygkVjksIFsyLCA1NV0sIHsgMzI6IFsxLCAxMTBdLCA0MjogWzEsIDExMV0gfSksIG8oJFY5LCBbMiwgNTldLCB7IDM4OiBbMSwgMTEyXSwgNDI6IFsxLCAxMTNdIH0pLCBvKCRWOSwgWzIsIDY5XSwgeyAzMjogWzEsIDExNV0sIDM4OiBbMSwgMTE0XSB9KSwgbygkVjksIFsyLCA1Nl0sIHsgMzI6IFsxLCAxMTZdLCA0MjogWzEsIDExN10gfSksIG8oJFY5LCBbMiwgNjFdLCB7IDM1OiBbMSwgMTE4XSwgNDI6IFsxLCAxMTldIH0pLCBvKCRWOSwgWzIsIDcyXSwgeyAzMjogWzEsIDEyMV0sIDM1OiBbMSwgMTIwXSB9KSwgbygkVjksIFsyLCA1OF0sIHsgMzg6IFsxLCAxMjJdLCA0MjogWzEsIDEyM10gfSksIG8oJFY5LCBbMiwgNjBdLCB7IDM1OiBbMSwgMTI0XSwgNDI6IFsxLCAxMjVdIH0pLCBvKCRWOSwgWzIsIDczXSwgeyAzNTogWzEsIDEyN10sIDM4OiBbMSwgMTI2XSB9KSwgbygkVjksIFsyLCA3MF0sIHsgMzI6IFsxLCAxMjldLCAzODogWzEsIDEyOF0gfSksIG8oJFY5LCBbMiwgNzFdLCB7IDMyOiBbMSwgMTMxXSwgMzU6IFsxLCAxMzBdIH0pLCBvKCRWOSwgWzIsIDc0XSwgeyAzNTogWzEsIDEzM10sIDM4OiBbMSwgMTMyXSB9KSwgeyAzOTogMTM0LCA0MzogJFZkLCA0NDogJFZlLCA0NTogJFZmIH0sIHsgMzM6IFsxLCAxMzVdIH0sIHsgMzM6IFsxLCAxMzZdIH0sIHsgMzM6IFsxLCAxMzddIH0sIHsgMzM6IFsxLCAxMzhdIH0sIHsgMzk6IDEzOSwgNDM6ICRWZCwgNDQ6ICRWZSwgNDU6ICRWZiB9LCBvKCRWOSwgWzIsIDI1XSwgeyAzNTogWzEsIDE0MF0gfSksIG8oJFY5LCBbMiwgMjZdLCB7IDM0OiBbMSwgMTQxXSB9KSwgbygkVjksIFsyLCAzMV0sIHsgMzQ6IFsxLCAxNDJdIH0pLCBvKCRWOSwgWzIsIDI5XSwgeyAzNDogWzEsIDE0M10gfSksIG8oJFY5LCBbMiwgMzBdLCB7IDM0OiBbMSwgMTQ0XSB9KSwgeyAzMzogWzEsIDE0NV0gfSwgeyAzMzogWzEsIDE0Nl0gfSwgeyAzOTogMTQ3LCA0MzogJFZkLCA0NDogJFZlLCA0NTogJFZmIH0sIHsgMzM6IFsxLCAxNDhdIH0sIHsgMzk6IDE0OSwgNDM6ICRWZCwgNDQ6ICRWZSwgNDU6ICRWZiB9LCB7IDMzOiBbMSwgMTUwXSB9LCB7IDMzOiBbMSwgMTUxXSB9LCB7IDMzOiBbMSwgMTUyXSB9LCB7IDMzOiBbMSwgMTUzXSB9LCB7IDMzOiBbMSwgMTU0XSB9LCB7IDMzOiBbMSwgMTU1XSB9LCB7IDMzOiBbMSwgMTU2XSB9LCB7IDM5OiAxNTcsIDQzOiAkVmQsIDQ0OiAkVmUsIDQ1OiAkVmYgfSwgeyAzMzogWzEsIDE1OF0gfSwgeyAzMzogWzEsIDE1OV0gfSwgeyAzMzogWzEsIDE2MF0gfSwgeyAzOTogMTYxLCA0MzogJFZkLCA0NDogJFZlLCA0NTogJFZmIH0sIHsgMzM6IFsxLCAxNjJdIH0sIHsgMzk6IDE2MywgNDM6ICRWZCwgNDQ6ICRWZSwgNDU6ICRWZiB9LCB7IDMzOiBbMSwgMTY0XSB9LCB7IDMzOiBbMSwgMTY1XSB9LCB7IDMzOiBbMSwgMTY2XSB9LCB7IDM5OiAxNjcsIDQzOiAkVmQsIDQ0OiAkVmUsIDQ1OiAkVmYgfSwgeyAzMzogWzEsIDE2OF0gfSwgbygkVjksIFsyLCA0M10sIHsgMzU6IFsxLCAxNjldIH0pLCBvKCRWOSwgWzIsIDQ0XSwgeyAzODogWzEsIDE3MF0gfSksIG8oJFY5LCBbMiwgNDJdLCB7IDMyOiBbMSwgMTcxXSB9KSwgbygkVjksIFsyLCA0NV0sIHsgMzU6IFsxLCAxNzJdIH0pLCBvKCRWOSwgWzIsIDQwXSwgeyAzODogWzEsIDE3M10gfSksIG8oJFY5LCBbMiwgNDFdLCB7IDMyOiBbMSwgMTc0XSB9KSwgeyAzMzogWzEsIDE3NV0sIDM2OiBbMSwgMTc2XSB9LCB7IDMzOiBbMSwgMTc3XSB9LCB7IDMzOiBbMSwgMTc4XSB9LCB7IDMzOiBbMSwgMTc5XSB9LCB7IDMzOiBbMSwgMTgwXSB9LCBvKCRWOSwgWzIsIDY2XSwgeyA0MjogWzEsIDE4MV0gfSksIG8oJFY5LCBbMiwgNzldLCB7IDMyOiBbMSwgMTgyXSB9KSwgbygkVjksIFsyLCA2N10sIHsgNDI6IFsxLCAxODNdIH0pLCBvKCRWOSwgWzIsIDkwXSwgeyAzODogWzEsIDE4NF0gfSksIG8oJFY5LCBbMiwgODBdLCB7IDMyOiBbMSwgMTg1XSB9KSwgbygkVjksIFsyLCA4OV0sIHsgMzg6IFsxLCAxODZdIH0pLCBvKCRWOSwgWzIsIDY1XSwgeyA0MjogWzEsIDE4N10gfSksIG8oJFY5LCBbMiwgNzhdLCB7IDMyOiBbMSwgMTg4XSB9KSwgbygkVjksIFsyLCA2NF0sIHsgNDI6IFsxLCAxODldIH0pLCBvKCRWOSwgWzIsIDg0XSwgeyAzNTogWzEsIDE5MF0gfSksIG8oJFY5LCBbMiwgNzddLCB7IDMyOiBbMSwgMTkxXSB9KSwgbygkVjksIFsyLCA4M10sIHsgMzU6IFsxLCAxOTJdIH0pLCBvKCRWOSwgWzIsIDYzXSwgeyA0MjogWzEsIDE5M10gfSksIG8oJFY5LCBbMiwgOTFdLCB7IDM4OiBbMSwgMTk0XSB9KSwgbygkVjksIFsyLCA2Ml0sIHsgNDI6IFsxLCAxOTVdIH0pLCBvKCRWOSwgWzIsIDg1XSwgeyAzNTogWzEsIDE5Nl0gfSksIG8oJFY5LCBbMiwgODZdLCB7IDM1OiBbMSwgMTk3XSB9KSwgbygkVjksIFsyLCA5Ml0sIHsgMzg6IFsxLCAxOThdIH0pLCBvKCRWOSwgWzIsIDc2XSwgeyAzMjogWzEsIDE5OV0gfSksIG8oJFY5LCBbMiwgODddLCB7IDM4OiBbMSwgMjAwXSB9KSwgbygkVjksIFsyLCA3NV0sIHsgMzI6IFsxLCAyMDFdIH0pLCBvKCRWOSwgWzIsIDgxXSwgeyAzNTogWzEsIDIwMl0gfSksIG8oJFY5LCBbMiwgODJdLCB7IDM1OiBbMSwgMjAzXSB9KSwgbygkVjksIFsyLCA4OF0sIHsgMzg6IFsxLCAyMDRdIH0pLCB7IDMzOiBbMSwgMjA1XSB9LCB7IDM5OiAyMDYsIDQzOiAkVmQsIDQ0OiAkVmUsIDQ1OiAkVmYgfSwgeyAzMzogWzEsIDIwN10gfSwgeyAzMzogWzEsIDIwOF0gfSwgeyAzOTogMjA5LCA0MzogJFZkLCA0NDogJFZlLCA0NTogJFZmIH0sIHsgMzM6IFsxLCAyMTBdIH0sIG8oJFY5LCBbMiwgMjddKSwgbygkVjksIFsyLCAzMl0pLCBvKCRWOSwgWzIsIDI4XSksIG8oJFY5LCBbMiwgMzNdKSwgbygkVjksIFsyLCAzNF0pLCBvKCRWOSwgWzIsIDM1XSksIHsgMzM6IFsxLCAyMTFdIH0sIHsgMzM6IFsxLCAyMTJdIH0sIHsgMzM6IFsxLCAyMTNdIH0sIHsgMzk6IDIxNCwgNDM6ICRWZCwgNDQ6ICRWZSwgNDU6ICRWZiB9LCB7IDMzOiBbMSwgMjE1XSB9LCB7IDM5OiAyMTYsIDQzOiAkVmQsIDQ0OiAkVmUsIDQ1OiAkVmYgfSwgeyAzMzogWzEsIDIxN10gfSwgeyAzMzogWzEsIDIxOF0gfSwgeyAzMzogWzEsIDIxOV0gfSwgeyAzMzogWzEsIDIyMF0gfSwgeyAzMzogWzEsIDIyMV0gfSwgeyAzMzogWzEsIDIyMl0gfSwgeyAzMzogWzEsIDIyM10gfSwgeyAzOTogMjI0LCA0MzogJFZkLCA0NDogJFZlLCA0NTogJFZmIH0sIHsgMzM6IFsxLCAyMjVdIH0sIHsgMzM6IFsxLCAyMjZdIH0sIHsgMzM6IFsxLCAyMjddIH0sIHsgMzk6IDIyOCwgNDM6ICRWZCwgNDQ6ICRWZSwgNDU6ICRWZiB9LCB7IDMzOiBbMSwgMjI5XSB9LCB7IDM5OiAyMzAsIDQzOiAkVmQsIDQ0OiAkVmUsIDQ1OiAkVmYgfSwgeyAzMzogWzEsIDIzMV0gfSwgeyAzMzogWzEsIDIzMl0gfSwgeyAzMzogWzEsIDIzM10gfSwgeyAzOTogMjM0LCA0MzogJFZkLCA0NDogJFZlLCA0NTogJFZmIH0sIG8oJFY5LCBbMiwgNDZdKSwgbygkVjksIFsyLCA0OF0pLCBvKCRWOSwgWzIsIDQ3XSksIG8oJFY5LCBbMiwgNDldKSwgbygkVjksIFsyLCA1MV0pLCBvKCRWOSwgWzIsIDUwXSksIG8oJFY5LCBbMiwgMTA3XSksIG8oJFY5LCBbMiwgMTA4XSksIG8oJFY5LCBbMiwgMTA1XSksIG8oJFY5LCBbMiwgMTA2XSksIG8oJFY5LCBbMiwgMTEwXSksIG8oJFY5LCBbMiwgMTA5XSksIG8oJFY5LCBbMiwgMTE0XSksIG8oJFY5LCBbMiwgMTEzXSksIG8oJFY5LCBbMiwgMTEyXSksIG8oJFY5LCBbMiwgMTExXSksIG8oJFY5LCBbMiwgMTE2XSksIG8oJFY5LCBbMiwgMTE1XSksIG8oJFY5LCBbMiwgMTA0XSksIG8oJFY5LCBbMiwgMTAzXSksIG8oJFY5LCBbMiwgMTAyXSksIG8oJFY5LCBbMiwgMTAxXSksIG8oJFY5LCBbMiwgOTldKSwgbygkVjksIFsyLCAxMDBdKSwgbygkVjksIFsyLCA5OF0pLCBvKCRWOSwgWzIsIDk3XSksIG8oJFY5LCBbMiwgOTZdKSwgbygkVjksIFsyLCA5NV0pLCBvKCRWOSwgWzIsIDkzXSksIG8oJFY5LCBbMiwgOTRdKV0sXG4gICAgZGVmYXVsdEFjdGlvbnM6IHsgNzogWzIsIDFdLCAxMzogWzIsIDJdLCAxODogWzIsIDNdLCAzNjogWzIsIDRdIH0sXG4gICAgcGFyc2VFcnJvcjogZnVuY3Rpb24gcGFyc2VFcnJvcihzdHIsIGhhc2gpIHtcbiAgICAgIGlmIChoYXNoLnJlY292ZXJhYmxlKSB7XG4gICAgICAgIHRoaXMudHJhY2Uoc3RyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcihzdHIpO1xuICAgICAgICBlcnJvci5oYXNoID0gaGFzaDtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfSxcbiAgICBwYXJzZTogZnVuY3Rpb24gcGFyc2UoaW5wdXQpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcywgc3RhY2sgPSBbMF0sIHRzdGFjayA9IFtdLCB2c3RhY2sgPSBbbnVsbF0sIGxzdGFjayA9IFtdLCB0YWJsZSA9IHRoaXMudGFibGUsIHl5dGV4dCA9IFwiXCIsIHl5bGluZW5vID0gMCwgeXlsZW5nID0gMCwgVEVSUk9SID0gMiwgRU9GID0gMTtcbiAgICAgIHZhciBhcmdzID0gbHN0YWNrLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgIHZhciBsZXhlcjIgPSBPYmplY3QuY3JlYXRlKHRoaXMubGV4ZXIpO1xuICAgICAgdmFyIHNoYXJlZFN0YXRlID0geyB5eToge30gfTtcbiAgICAgIGZvciAodmFyIGsgaW4gdGhpcy55eSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMueXksIGspKSB7XG4gICAgICAgICAgc2hhcmVkU3RhdGUueXlba10gPSB0aGlzLnl5W2tdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXhlcjIuc2V0SW5wdXQoaW5wdXQsIHNoYXJlZFN0YXRlLnl5KTtcbiAgICAgIHNoYXJlZFN0YXRlLnl5LmxleGVyID0gbGV4ZXIyO1xuICAgICAgc2hhcmVkU3RhdGUueXkucGFyc2VyID0gdGhpcztcbiAgICAgIGlmICh0eXBlb2YgbGV4ZXIyLnl5bGxvYyA9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGxleGVyMi55eWxsb2MgPSB7fTtcbiAgICAgIH1cbiAgICAgIHZhciB5eWxvYyA9IGxleGVyMi55eWxsb2M7XG4gICAgICBsc3RhY2sucHVzaCh5eWxvYyk7XG4gICAgICB2YXIgcmFuZ2VzID0gbGV4ZXIyLm9wdGlvbnMgJiYgbGV4ZXIyLm9wdGlvbnMucmFuZ2VzO1xuICAgICAgaWYgKHR5cGVvZiBzaGFyZWRTdGF0ZS55eS5wYXJzZUVycm9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhpcy5wYXJzZUVycm9yID0gc2hhcmVkU3RhdGUueXkucGFyc2VFcnJvcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGFyc2VFcnJvciA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5wYXJzZUVycm9yO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gbGV4KCkge1xuICAgICAgICB2YXIgdG9rZW47XG4gICAgICAgIHRva2VuID0gdHN0YWNrLnBvcCgpIHx8IGxleGVyMi5sZXgoKSB8fCBFT0Y7XG4gICAgICAgIGlmICh0eXBlb2YgdG9rZW4gIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICBpZiAodG9rZW4gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgdHN0YWNrID0gdG9rZW47XG4gICAgICAgICAgICB0b2tlbiA9IHRzdGFjay5wb3AoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdG9rZW4gPSBzZWxmLnN5bWJvbHNfW3Rva2VuXSB8fCB0b2tlbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICB9XG4gICAgICB2YXIgc3ltYm9sLCBzdGF0ZSwgYWN0aW9uLCByLCB5eXZhbCA9IHt9LCBwLCBsZW4sIG5ld1N0YXRlLCBleHBlY3RlZDtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHN0YXRlID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICAgIGlmICh0aGlzLmRlZmF1bHRBY3Rpb25zW3N0YXRlXSkge1xuICAgICAgICAgIGFjdGlvbiA9IHRoaXMuZGVmYXVsdEFjdGlvbnNbc3RhdGVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChzeW1ib2wgPT09IG51bGwgfHwgdHlwZW9mIHN5bWJvbCA9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBzeW1ib2wgPSBsZXgoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYWN0aW9uID0gdGFibGVbc3RhdGVdICYmIHRhYmxlW3N0YXRlXVtzeW1ib2xdO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSBcInVuZGVmaW5lZFwiIHx8ICFhY3Rpb24ubGVuZ3RoIHx8ICFhY3Rpb25bMF0pIHtcbiAgICAgICAgICB2YXIgZXJyU3RyID0gXCJcIjtcbiAgICAgICAgICBleHBlY3RlZCA9IFtdO1xuICAgICAgICAgIGZvciAocCBpbiB0YWJsZVtzdGF0ZV0pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRlcm1pbmFsc19bcF0gJiYgcCA+IFRFUlJPUikge1xuICAgICAgICAgICAgICBleHBlY3RlZC5wdXNoKFwiJ1wiICsgdGhpcy50ZXJtaW5hbHNfW3BdICsgXCInXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobGV4ZXIyLnNob3dQb3NpdGlvbikge1xuICAgICAgICAgICAgZXJyU3RyID0gXCJQYXJzZSBlcnJvciBvbiBsaW5lIFwiICsgKHl5bGluZW5vICsgMSkgKyBcIjpcXG5cIiArIGxleGVyMi5zaG93UG9zaXRpb24oKSArIFwiXFxuRXhwZWN0aW5nIFwiICsgZXhwZWN0ZWQuam9pbihcIiwgXCIpICsgXCIsIGdvdCAnXCIgKyAodGhpcy50ZXJtaW5hbHNfW3N5bWJvbF0gfHwgc3ltYm9sKSArIFwiJ1wiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlcnJTdHIgPSBcIlBhcnNlIGVycm9yIG9uIGxpbmUgXCIgKyAoeXlsaW5lbm8gKyAxKSArIFwiOiBVbmV4cGVjdGVkIFwiICsgKHN5bWJvbCA9PSBFT0YgPyBcImVuZCBvZiBpbnB1dFwiIDogXCInXCIgKyAodGhpcy50ZXJtaW5hbHNfW3N5bWJvbF0gfHwgc3ltYm9sKSArIFwiJ1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5wYXJzZUVycm9yKGVyclN0ciwge1xuICAgICAgICAgICAgdGV4dDogbGV4ZXIyLm1hdGNoLFxuICAgICAgICAgICAgdG9rZW46IHRoaXMudGVybWluYWxzX1tzeW1ib2xdIHx8IHN5bWJvbCxcbiAgICAgICAgICAgIGxpbmU6IGxleGVyMi55eWxpbmVubyxcbiAgICAgICAgICAgIGxvYzogeXlsb2MsXG4gICAgICAgICAgICBleHBlY3RlZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhY3Rpb25bMF0gaW5zdGFuY2VvZiBBcnJheSAmJiBhY3Rpb24ubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhcnNlIEVycm9yOiBtdWx0aXBsZSBhY3Rpb25zIHBvc3NpYmxlIGF0IHN0YXRlOiBcIiArIHN0YXRlICsgXCIsIHRva2VuOiBcIiArIHN5bWJvbCk7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChhY3Rpb25bMF0pIHtcbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBzdGFjay5wdXNoKHN5bWJvbCk7XG4gICAgICAgICAgICB2c3RhY2sucHVzaChsZXhlcjIueXl0ZXh0KTtcbiAgICAgICAgICAgIGxzdGFjay5wdXNoKGxleGVyMi55eWxsb2MpO1xuICAgICAgICAgICAgc3RhY2sucHVzaChhY3Rpb25bMV0pO1xuICAgICAgICAgICAgc3ltYm9sID0gbnVsbDtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgeXlsZW5nID0gbGV4ZXIyLnl5bGVuZztcbiAgICAgICAgICAgICAgeXl0ZXh0ID0gbGV4ZXIyLnl5dGV4dDtcbiAgICAgICAgICAgICAgeXlsaW5lbm8gPSBsZXhlcjIueXlsaW5lbm87XG4gICAgICAgICAgICAgIHl5bG9jID0gbGV4ZXIyLnl5bGxvYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGxlbiA9IHRoaXMucHJvZHVjdGlvbnNfW2FjdGlvblsxXV1bMV07XG4gICAgICAgICAgICB5eXZhbC4kID0gdnN0YWNrW3ZzdGFjay5sZW5ndGggLSBsZW5dO1xuICAgICAgICAgICAgeXl2YWwuXyQgPSB7XG4gICAgICAgICAgICAgIGZpcnN0X2xpbmU6IGxzdGFja1tsc3RhY2subGVuZ3RoIC0gKGxlbiB8fCAxKV0uZmlyc3RfbGluZSxcbiAgICAgICAgICAgICAgbGFzdF9saW5lOiBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIDFdLmxhc3RfbGluZSxcbiAgICAgICAgICAgICAgZmlyc3RfY29sdW1uOiBsc3RhY2tbbHN0YWNrLmxlbmd0aCAtIChsZW4gfHwgMSldLmZpcnN0X2NvbHVtbixcbiAgICAgICAgICAgICAgbGFzdF9jb2x1bW46IGxzdGFja1tsc3RhY2subGVuZ3RoIC0gMV0ubGFzdF9jb2x1bW5cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAocmFuZ2VzKSB7XG4gICAgICAgICAgICAgIHl5dmFsLl8kLnJhbmdlID0gW1xuICAgICAgICAgICAgICAgIGxzdGFja1tsc3RhY2subGVuZ3RoIC0gKGxlbiB8fCAxKV0ucmFuZ2VbMF0sXG4gICAgICAgICAgICAgICAgbHN0YWNrW2xzdGFjay5sZW5ndGggLSAxXS5yYW5nZVsxXVxuICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgciA9IHRoaXMucGVyZm9ybUFjdGlvbi5hcHBseSh5eXZhbCwgW1xuICAgICAgICAgICAgICB5eXRleHQsXG4gICAgICAgICAgICAgIHl5bGVuZyxcbiAgICAgICAgICAgICAgeXlsaW5lbm8sXG4gICAgICAgICAgICAgIHNoYXJlZFN0YXRlLnl5LFxuICAgICAgICAgICAgICBhY3Rpb25bMV0sXG4gICAgICAgICAgICAgIHZzdGFjayxcbiAgICAgICAgICAgICAgbHN0YWNrXG4gICAgICAgICAgICBdLmNvbmNhdChhcmdzKSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobGVuKSB7XG4gICAgICAgICAgICAgIHN0YWNrID0gc3RhY2suc2xpY2UoMCwgLTEgKiBsZW4gKiAyKTtcbiAgICAgICAgICAgICAgdnN0YWNrID0gdnN0YWNrLnNsaWNlKDAsIC0xICogbGVuKTtcbiAgICAgICAgICAgICAgbHN0YWNrID0gbHN0YWNrLnNsaWNlKDAsIC0xICogbGVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YWNrLnB1c2godGhpcy5wcm9kdWN0aW9uc19bYWN0aW9uWzFdXVswXSk7XG4gICAgICAgICAgICB2c3RhY2sucHVzaCh5eXZhbC4kKTtcbiAgICAgICAgICAgIGxzdGFjay5wdXNoKHl5dmFsLl8kKTtcbiAgICAgICAgICAgIG5ld1N0YXRlID0gdGFibGVbc3RhY2tbc3RhY2subGVuZ3RoIC0gMl1dW3N0YWNrW3N0YWNrLmxlbmd0aCAtIDFdXTtcbiAgICAgICAgICAgIHN0YWNrLnB1c2gobmV3U3RhdGUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfTtcbiAgdmFyIGxleGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxleGVyMiA9IHtcbiAgICAgIEVPRjogMSxcbiAgICAgIHBhcnNlRXJyb3I6IGZ1bmN0aW9uIHBhcnNlRXJyb3Ioc3RyLCBoYXNoKSB7XG4gICAgICAgIGlmICh0aGlzLnl5LnBhcnNlcikge1xuICAgICAgICAgIHRoaXMueXkucGFyc2VyLnBhcnNlRXJyb3Ioc3RyLCBoYXNoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3Ioc3RyKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIHJlc2V0cyB0aGUgbGV4ZXIsIHNldHMgbmV3IGlucHV0XG4gICAgICBzZXRJbnB1dDogZnVuY3Rpb24oaW5wdXQsIHl5KSB7XG4gICAgICAgIHRoaXMueXkgPSB5eSB8fCB0aGlzLnl5IHx8IHt9O1xuICAgICAgICB0aGlzLl9pbnB1dCA9IGlucHV0O1xuICAgICAgICB0aGlzLl9tb3JlID0gdGhpcy5fYmFja3RyYWNrID0gdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICAgIHRoaXMueXlsaW5lbm8gPSB0aGlzLnl5bGVuZyA9IDA7XG4gICAgICAgIHRoaXMueXl0ZXh0ID0gdGhpcy5tYXRjaGVkID0gdGhpcy5tYXRjaCA9IFwiXCI7XG4gICAgICAgIHRoaXMuY29uZGl0aW9uU3RhY2sgPSBbXCJJTklUSUFMXCJdO1xuICAgICAgICB0aGlzLnl5bGxvYyA9IHtcbiAgICAgICAgICBmaXJzdF9saW5lOiAxLFxuICAgICAgICAgIGZpcnN0X2NvbHVtbjogMCxcbiAgICAgICAgICBsYXN0X2xpbmU6IDEsXG4gICAgICAgICAgbGFzdF9jb2x1bW46IDBcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIHtcbiAgICAgICAgICB0aGlzLnl5bGxvYy5yYW5nZSA9IFswLCAwXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcbiAgICAgIC8vIGNvbnN1bWVzIGFuZCByZXR1cm5zIG9uZSBjaGFyIGZyb20gdGhlIGlucHV0XG4gICAgICBpbnB1dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjaCA9IHRoaXMuX2lucHV0WzBdO1xuICAgICAgICB0aGlzLnl5dGV4dCArPSBjaDtcbiAgICAgICAgdGhpcy55eWxlbmcrKztcbiAgICAgICAgdGhpcy5vZmZzZXQrKztcbiAgICAgICAgdGhpcy5tYXRjaCArPSBjaDtcbiAgICAgICAgdGhpcy5tYXRjaGVkICs9IGNoO1xuICAgICAgICB2YXIgbGluZXMgPSBjaC5tYXRjaCgvKD86XFxyXFxuP3xcXG4pLiovZyk7XG4gICAgICAgIGlmIChsaW5lcykge1xuICAgICAgICAgIHRoaXMueXlsaW5lbm8rKztcbiAgICAgICAgICB0aGlzLnl5bGxvYy5sYXN0X2xpbmUrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbisrO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmFuZ2VzKSB7XG4gICAgICAgICAgdGhpcy55eWxsb2MucmFuZ2VbMV0rKztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pbnB1dCA9IHRoaXMuX2lucHV0LnNsaWNlKDEpO1xuICAgICAgICByZXR1cm4gY2g7XG4gICAgICB9LFxuICAgICAgLy8gdW5zaGlmdHMgb25lIGNoYXIgKG9yIGEgc3RyaW5nKSBpbnRvIHRoZSBpbnB1dFxuICAgICAgdW5wdXQ6IGZ1bmN0aW9uKGNoKSB7XG4gICAgICAgIHZhciBsZW4gPSBjaC5sZW5ndGg7XG4gICAgICAgIHZhciBsaW5lcyA9IGNoLnNwbGl0KC8oPzpcXHJcXG4/fFxcbikvZyk7XG4gICAgICAgIHRoaXMuX2lucHV0ID0gY2ggKyB0aGlzLl9pbnB1dDtcbiAgICAgICAgdGhpcy55eXRleHQgPSB0aGlzLnl5dGV4dC5zdWJzdHIoMCwgdGhpcy55eXRleHQubGVuZ3RoIC0gbGVuKTtcbiAgICAgICAgdGhpcy5vZmZzZXQgLT0gbGVuO1xuICAgICAgICB2YXIgb2xkTGluZXMgPSB0aGlzLm1hdGNoLnNwbGl0KC8oPzpcXHJcXG4/fFxcbikvZyk7XG4gICAgICAgIHRoaXMubWF0Y2ggPSB0aGlzLm1hdGNoLnN1YnN0cigwLCB0aGlzLm1hdGNoLmxlbmd0aCAtIDEpO1xuICAgICAgICB0aGlzLm1hdGNoZWQgPSB0aGlzLm1hdGNoZWQuc3Vic3RyKDAsIHRoaXMubWF0Y2hlZC5sZW5ndGggLSAxKTtcbiAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICB0aGlzLnl5bGluZW5vIC09IGxpbmVzLmxlbmd0aCAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHIgPSB0aGlzLnl5bGxvYy5yYW5nZTtcbiAgICAgICAgdGhpcy55eWxsb2MgPSB7XG4gICAgICAgICAgZmlyc3RfbGluZTogdGhpcy55eWxsb2MuZmlyc3RfbGluZSxcbiAgICAgICAgICBsYXN0X2xpbmU6IHRoaXMueXlsaW5lbm8gKyAxLFxuICAgICAgICAgIGZpcnN0X2NvbHVtbjogdGhpcy55eWxsb2MuZmlyc3RfY29sdW1uLFxuICAgICAgICAgIGxhc3RfY29sdW1uOiBsaW5lcyA/IChsaW5lcy5sZW5ndGggPT09IG9sZExpbmVzLmxlbmd0aCA/IHRoaXMueXlsbG9jLmZpcnN0X2NvbHVtbiA6IDApICsgb2xkTGluZXNbb2xkTGluZXMubGVuZ3RoIC0gbGluZXMubGVuZ3RoXS5sZW5ndGggLSBsaW5lc1swXS5sZW5ndGggOiB0aGlzLnl5bGxvYy5maXJzdF9jb2x1bW4gLSBsZW5cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpIHtcbiAgICAgICAgICB0aGlzLnl5bGxvYy5yYW5nZSA9IFtyWzBdLCByWzBdICsgdGhpcy55eWxlbmcgLSBsZW5dO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMueXlsZW5nID0gdGhpcy55eXRleHQubGVuZ3RoO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICAvLyBXaGVuIGNhbGxlZCBmcm9tIGFjdGlvbiwgY2FjaGVzIG1hdGNoZWQgdGV4dCBhbmQgYXBwZW5kcyBpdCBvbiBuZXh0IGFjdGlvblxuICAgICAgbW9yZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX21vcmUgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICAvLyBXaGVuIGNhbGxlZCBmcm9tIGFjdGlvbiwgc2lnbmFscyB0aGUgbGV4ZXIgdGhhdCB0aGlzIHJ1bGUgZmFpbHMgdG8gbWF0Y2ggdGhlIGlucHV0LCBzbyB0aGUgbmV4dCBtYXRjaGluZyBydWxlIChyZWdleCkgc2hvdWxkIGJlIHRlc3RlZCBpbnN0ZWFkLlxuICAgICAgcmVqZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5iYWNrdHJhY2tfbGV4ZXIpIHtcbiAgICAgICAgICB0aGlzLl9iYWNrdHJhY2sgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlRXJyb3IoXCJMZXhpY2FsIGVycm9yIG9uIGxpbmUgXCIgKyAodGhpcy55eWxpbmVubyArIDEpICsgXCIuIFlvdSBjYW4gb25seSBpbnZva2UgcmVqZWN0KCkgaW4gdGhlIGxleGVyIHdoZW4gdGhlIGxleGVyIGlzIG9mIHRoZSBiYWNrdHJhY2tpbmcgcGVyc3Vhc2lvbiAob3B0aW9ucy5iYWNrdHJhY2tfbGV4ZXIgPSB0cnVlKS5cXG5cIiArIHRoaXMuc2hvd1Bvc2l0aW9uKCksIHtcbiAgICAgICAgICAgIHRleHQ6IFwiXCIsXG4gICAgICAgICAgICB0b2tlbjogbnVsbCxcbiAgICAgICAgICAgIGxpbmU6IHRoaXMueXlsaW5lbm9cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICAvLyByZXRhaW4gZmlyc3QgbiBjaGFyYWN0ZXJzIG9mIHRoZSBtYXRjaFxuICAgICAgbGVzczogZnVuY3Rpb24obikge1xuICAgICAgICB0aGlzLnVucHV0KHRoaXMubWF0Y2guc2xpY2UobikpO1xuICAgICAgfSxcbiAgICAgIC8vIGRpc3BsYXlzIGFscmVhZHkgbWF0Y2hlZCBpbnB1dCwgaS5lLiBmb3IgZXJyb3IgbWVzc2FnZXNcbiAgICAgIHBhc3RJbnB1dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBwYXN0ID0gdGhpcy5tYXRjaGVkLnN1YnN0cigwLCB0aGlzLm1hdGNoZWQubGVuZ3RoIC0gdGhpcy5tYXRjaC5sZW5ndGgpO1xuICAgICAgICByZXR1cm4gKHBhc3QubGVuZ3RoID4gMjAgPyBcIi4uLlwiIDogXCJcIikgKyBwYXN0LnN1YnN0cigtMjApLnJlcGxhY2UoL1xcbi9nLCBcIlwiKTtcbiAgICAgIH0sXG4gICAgICAvLyBkaXNwbGF5cyB1cGNvbWluZyBpbnB1dCwgaS5lLiBmb3IgZXJyb3IgbWVzc2FnZXNcbiAgICAgIHVwY29taW5nSW5wdXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbmV4dCA9IHRoaXMubWF0Y2g7XG4gICAgICAgIGlmIChuZXh0Lmxlbmd0aCA8IDIwKSB7XG4gICAgICAgICAgbmV4dCArPSB0aGlzLl9pbnB1dC5zdWJzdHIoMCwgMjAgLSBuZXh0Lmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChuZXh0LnN1YnN0cigwLCAyMCkgKyAobmV4dC5sZW5ndGggPiAyMCA/IFwiLi4uXCIgOiBcIlwiKSkucmVwbGFjZSgvXFxuL2csIFwiXCIpO1xuICAgICAgfSxcbiAgICAgIC8vIGRpc3BsYXlzIHRoZSBjaGFyYWN0ZXIgcG9zaXRpb24gd2hlcmUgdGhlIGxleGluZyBlcnJvciBvY2N1cnJlZCwgaS5lLiBmb3IgZXJyb3IgbWVzc2FnZXNcbiAgICAgIHNob3dQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBwcmUgPSB0aGlzLnBhc3RJbnB1dCgpO1xuICAgICAgICB2YXIgYyA9IG5ldyBBcnJheShwcmUubGVuZ3RoICsgMSkuam9pbihcIi1cIik7XG4gICAgICAgIHJldHVybiBwcmUgKyB0aGlzLnVwY29taW5nSW5wdXQoKSArIFwiXFxuXCIgKyBjICsgXCJeXCI7XG4gICAgICB9LFxuICAgICAgLy8gdGVzdCB0aGUgbGV4ZWQgdG9rZW46IHJldHVybiBGQUxTRSB3aGVuIG5vdCBhIG1hdGNoLCBvdGhlcndpc2UgcmV0dXJuIHRva2VuXG4gICAgICB0ZXN0X21hdGNoOiBmdW5jdGlvbihtYXRjaCwgaW5kZXhlZF9ydWxlKSB7XG4gICAgICAgIHZhciB0b2tlbiwgbGluZXMsIGJhY2t1cDtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5iYWNrdHJhY2tfbGV4ZXIpIHtcbiAgICAgICAgICBiYWNrdXAgPSB7XG4gICAgICAgICAgICB5eWxpbmVubzogdGhpcy55eWxpbmVubyxcbiAgICAgICAgICAgIHl5bGxvYzoge1xuICAgICAgICAgICAgICBmaXJzdF9saW5lOiB0aGlzLnl5bGxvYy5maXJzdF9saW5lLFxuICAgICAgICAgICAgICBsYXN0X2xpbmU6IHRoaXMubGFzdF9saW5lLFxuICAgICAgICAgICAgICBmaXJzdF9jb2x1bW46IHRoaXMueXlsbG9jLmZpcnN0X2NvbHVtbixcbiAgICAgICAgICAgICAgbGFzdF9jb2x1bW46IHRoaXMueXlsbG9jLmxhc3RfY29sdW1uXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeXl0ZXh0OiB0aGlzLnl5dGV4dCxcbiAgICAgICAgICAgIG1hdGNoOiB0aGlzLm1hdGNoLFxuICAgICAgICAgICAgbWF0Y2hlczogdGhpcy5tYXRjaGVzLFxuICAgICAgICAgICAgbWF0Y2hlZDogdGhpcy5tYXRjaGVkLFxuICAgICAgICAgICAgeXlsZW5nOiB0aGlzLnl5bGVuZyxcbiAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICBfbW9yZTogdGhpcy5fbW9yZSxcbiAgICAgICAgICAgIF9pbnB1dDogdGhpcy5faW5wdXQsXG4gICAgICAgICAgICB5eTogdGhpcy55eSxcbiAgICAgICAgICAgIGNvbmRpdGlvblN0YWNrOiB0aGlzLmNvbmRpdGlvblN0YWNrLnNsaWNlKDApLFxuICAgICAgICAgICAgZG9uZTogdGhpcy5kb25lXG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykge1xuICAgICAgICAgICAgYmFja3VwLnl5bGxvYy5yYW5nZSA9IHRoaXMueXlsbG9jLnJhbmdlLnNsaWNlKDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsaW5lcyA9IG1hdGNoWzBdLm1hdGNoKC8oPzpcXHJcXG4/fFxcbikuKi9nKTtcbiAgICAgICAgaWYgKGxpbmVzKSB7XG4gICAgICAgICAgdGhpcy55eWxpbmVubyArPSBsaW5lcy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy55eWxsb2MgPSB7XG4gICAgICAgICAgZmlyc3RfbGluZTogdGhpcy55eWxsb2MubGFzdF9saW5lLFxuICAgICAgICAgIGxhc3RfbGluZTogdGhpcy55eWxpbmVubyArIDEsXG4gICAgICAgICAgZmlyc3RfY29sdW1uOiB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbixcbiAgICAgICAgICBsYXN0X2NvbHVtbjogbGluZXMgPyBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXS5sZW5ndGggLSBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXS5tYXRjaCgvXFxyP1xcbj8vKVswXS5sZW5ndGggOiB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbiArIG1hdGNoWzBdLmxlbmd0aFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnl5dGV4dCArPSBtYXRjaFswXTtcbiAgICAgICAgdGhpcy5tYXRjaCArPSBtYXRjaFswXTtcbiAgICAgICAgdGhpcy5tYXRjaGVzID0gbWF0Y2g7XG4gICAgICAgIHRoaXMueXlsZW5nID0gdGhpcy55eXRleHQubGVuZ3RoO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJhbmdlcykge1xuICAgICAgICAgIHRoaXMueXlsbG9jLnJhbmdlID0gW3RoaXMub2Zmc2V0LCB0aGlzLm9mZnNldCArPSB0aGlzLnl5bGVuZ107XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbW9yZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9iYWNrdHJhY2sgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faW5wdXQgPSB0aGlzLl9pbnB1dC5zbGljZShtYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICB0aGlzLm1hdGNoZWQgKz0gbWF0Y2hbMF07XG4gICAgICAgIHRva2VuID0gdGhpcy5wZXJmb3JtQWN0aW9uLmNhbGwodGhpcywgdGhpcy55eSwgdGhpcywgaW5kZXhlZF9ydWxlLCB0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoIC0gMV0pO1xuICAgICAgICBpZiAodGhpcy5kb25lICYmIHRoaXMuX2lucHV0KSB7XG4gICAgICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JhY2t0cmFjaykge1xuICAgICAgICAgIGZvciAodmFyIGsgaW4gYmFja3VwKSB7XG4gICAgICAgICAgICB0aGlzW2tdID0gYmFja3VwW2tdO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSxcbiAgICAgIC8vIHJldHVybiBuZXh0IG1hdGNoIGluIGlucHV0XG4gICAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLkVPRjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2lucHV0KSB7XG4gICAgICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdG9rZW4sIG1hdGNoLCB0ZW1wTWF0Y2gsIGluZGV4O1xuICAgICAgICBpZiAoIXRoaXMuX21vcmUpIHtcbiAgICAgICAgICB0aGlzLnl5dGV4dCA9IFwiXCI7XG4gICAgICAgICAgdGhpcy5tYXRjaCA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJ1bGVzID0gdGhpcy5fY3VycmVudFJ1bGVzKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB0ZW1wTWF0Y2ggPSB0aGlzLl9pbnB1dC5tYXRjaCh0aGlzLnJ1bGVzW3J1bGVzW2ldXSk7XG4gICAgICAgICAgaWYgKHRlbXBNYXRjaCAmJiAoIW1hdGNoIHx8IHRlbXBNYXRjaFswXS5sZW5ndGggPiBtYXRjaFswXS5sZW5ndGgpKSB7XG4gICAgICAgICAgICBtYXRjaCA9IHRlbXBNYXRjaDtcbiAgICAgICAgICAgIGluZGV4ID0gaTtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYmFja3RyYWNrX2xleGVyKSB7XG4gICAgICAgICAgICAgIHRva2VuID0gdGhpcy50ZXN0X21hdGNoKHRlbXBNYXRjaCwgcnVsZXNbaV0pO1xuICAgICAgICAgICAgICBpZiAodG9rZW4gIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JhY2t0cmFjaykge1xuICAgICAgICAgICAgICAgIG1hdGNoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLm9wdGlvbnMuZmxleCkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgdG9rZW4gPSB0aGlzLnRlc3RfbWF0Y2gobWF0Y2gsIHJ1bGVzW2luZGV4XSk7XG4gICAgICAgICAgaWYgKHRva2VuICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2lucHV0ID09PSBcIlwiKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuRU9GO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlRXJyb3IoXCJMZXhpY2FsIGVycm9yIG9uIGxpbmUgXCIgKyAodGhpcy55eWxpbmVubyArIDEpICsgXCIuIFVucmVjb2duaXplZCB0ZXh0LlxcblwiICsgdGhpcy5zaG93UG9zaXRpb24oKSwge1xuICAgICAgICAgICAgdGV4dDogXCJcIixcbiAgICAgICAgICAgIHRva2VuOiBudWxsLFxuICAgICAgICAgICAgbGluZTogdGhpcy55eWxpbmVub1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gcmV0dXJuIG5leHQgbWF0Y2ggdGhhdCBoYXMgYSB0b2tlblxuICAgICAgbGV4OiBmdW5jdGlvbiBsZXgoKSB7XG4gICAgICAgIHZhciByID0gdGhpcy5uZXh0KCk7XG4gICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMubGV4KCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBhY3RpdmF0ZXMgYSBuZXcgbGV4ZXIgY29uZGl0aW9uIHN0YXRlIChwdXNoZXMgdGhlIG5ldyBsZXhlciBjb25kaXRpb24gc3RhdGUgb250byB0aGUgY29uZGl0aW9uIHN0YWNrKVxuICAgICAgYmVnaW46IGZ1bmN0aW9uIGJlZ2luKGNvbmRpdGlvbikge1xuICAgICAgICB0aGlzLmNvbmRpdGlvblN0YWNrLnB1c2goY29uZGl0aW9uKTtcbiAgICAgIH0sXG4gICAgICAvLyBwb3AgdGhlIHByZXZpb3VzbHkgYWN0aXZlIGxleGVyIGNvbmRpdGlvbiBzdGF0ZSBvZmYgdGhlIGNvbmRpdGlvbiBzdGFja1xuICAgICAgcG9wU3RhdGU6IGZ1bmN0aW9uIHBvcFN0YXRlKCkge1xuICAgICAgICB2YXIgbiA9IHRoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoIC0gMTtcbiAgICAgICAgaWYgKG4gPiAwKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uU3RhY2sucG9wKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uU3RhY2tbMF07XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBwcm9kdWNlIHRoZSBsZXhlciBydWxlIHNldCB3aGljaCBpcyBhY3RpdmUgZm9yIHRoZSBjdXJyZW50bHkgYWN0aXZlIGxleGVyIGNvbmRpdGlvbiBzdGF0ZVxuICAgICAgX2N1cnJlbnRSdWxlczogZnVuY3Rpb24gX2N1cnJlbnRSdWxlcygpIHtcbiAgICAgICAgaWYgKHRoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoICYmIHRoaXMuY29uZGl0aW9uU3RhY2tbdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGggLSAxXSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmNvbmRpdGlvbnNbdGhpcy5jb25kaXRpb25TdGFja1t0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aCAtIDFdXS5ydWxlcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5jb25kaXRpb25zW1wiSU5JVElBTFwiXS5ydWxlcztcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIHJldHVybiB0aGUgY3VycmVudGx5IGFjdGl2ZSBsZXhlciBjb25kaXRpb24gc3RhdGU7IHdoZW4gYW4gaW5kZXggYXJndW1lbnQgaXMgcHJvdmlkZWQgaXQgcHJvZHVjZXMgdGhlIE4tdGggcHJldmlvdXMgY29uZGl0aW9uIHN0YXRlLCBpZiBhdmFpbGFibGVcbiAgICAgIHRvcFN0YXRlOiBmdW5jdGlvbiB0b3BTdGF0ZShuKSB7XG4gICAgICAgIG4gPSB0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aCAtIDEgLSBNYXRoLmFicyhuIHx8IDApO1xuICAgICAgICBpZiAobiA+PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uU3RhY2tbbl07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwiSU5JVElBTFwiO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gYWxpYXMgZm9yIGJlZ2luKGNvbmRpdGlvbilcbiAgICAgIHB1c2hTdGF0ZTogZnVuY3Rpb24gcHVzaFN0YXRlKGNvbmRpdGlvbikge1xuICAgICAgICB0aGlzLmJlZ2luKGNvbmRpdGlvbik7XG4gICAgICB9LFxuICAgICAgLy8gcmV0dXJuIHRoZSBudW1iZXIgb2Ygc3RhdGVzIGN1cnJlbnRseSBvbiB0aGUgc3RhY2tcbiAgICAgIHN0YXRlU3RhY2tTaXplOiBmdW5jdGlvbiBzdGF0ZVN0YWNrU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoO1xuICAgICAgfSxcbiAgICAgIG9wdGlvbnM6IHsgXCJjYXNlLWluc2Vuc2l0aXZlXCI6IHRydWUgfSxcbiAgICAgIHBlcmZvcm1BY3Rpb246IGZ1bmN0aW9uIGFub255bW91cyh5eSwgeXlfLCAkYXZvaWRpbmdfbmFtZV9jb2xsaXNpb25zLCBZWV9TVEFSVCkge1xuICAgICAgICBzd2l0Y2ggKCRhdm9pZGluZ19uYW1lX2NvbGxpc2lvbnMpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICB0aGlzLmJlZ2luKFwiYWNjX3RpdGxlXCIpO1xuICAgICAgICAgICAgcmV0dXJuIDE5O1xuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiBcImFjY190aXRsZV92YWx1ZVwiO1xuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHRoaXMuYmVnaW4oXCJhY2NfZGVzY3JcIik7XG4gICAgICAgICAgICByZXR1cm4gMjE7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgdGhpcy5wb3BTdGF0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIFwiYWNjX2Rlc2NyX3ZhbHVlXCI7XG4gICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgdGhpcy5iZWdpbihcImFjY19kZXNjcl9tdWx0aWxpbmVcIik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICByZXR1cm4gXCJhY2NfZGVzY3JfbXVsdGlsaW5lX3ZhbHVlXCI7XG4gICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgcmV0dXJuIDEzO1xuICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICByZXR1cm4gNTtcbiAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgcmV0dXJuIDQwO1xuICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICByZXR1cm4gMzI7XG4gICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgIHJldHVybiAzODtcbiAgICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgICAgcmV0dXJuIDQyO1xuICAgICAgICAgIGNhc2UgMTU6XG4gICAgICAgICAgICByZXR1cm4gNDM7XG4gICAgICAgICAgY2FzZSAxNjpcbiAgICAgICAgICAgIHJldHVybiA0NDtcbiAgICAgICAgICBjYXNlIDE3OlxuICAgICAgICAgICAgcmV0dXJuIDQ1O1xuICAgICAgICAgIGNhc2UgMTg6XG4gICAgICAgICAgICByZXR1cm4gMzU7XG4gICAgICAgICAgY2FzZSAxOTpcbiAgICAgICAgICAgIHJldHVybiAyODtcbiAgICAgICAgICBjYXNlIDIwOlxuICAgICAgICAgICAgcmV0dXJuIDI5O1xuICAgICAgICAgIGNhc2UgMjE6XG4gICAgICAgICAgICByZXR1cm4gMzc7XG4gICAgICAgICAgY2FzZSAyMjpcbiAgICAgICAgICAgIHJldHVybiAzMTtcbiAgICAgICAgICBjYXNlIDIzOlxuICAgICAgICAgICAgcmV0dXJuIDM0O1xuICAgICAgICAgIGNhc2UgMjQ6XG4gICAgICAgICAgICByZXR1cm4gMjY7XG4gICAgICAgICAgY2FzZSAyNTpcbiAgICAgICAgICAgIHJldHVybiA5O1xuICAgICAgICAgIGNhc2UgMjY6XG4gICAgICAgICAgICByZXR1cm4gOTtcbiAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgICAgcmV0dXJuIDg7XG4gICAgICAgICAgY2FzZSAyODpcbiAgICAgICAgICAgIHJldHVybiBcIkNBUkVUXCI7XG4gICAgICAgICAgY2FzZSAyOTpcbiAgICAgICAgICAgIHRoaXMuYmVnaW4oXCJvcHRpb25zXCIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAzMDpcbiAgICAgICAgICAgIHRoaXMucG9wU3RhdGUoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMzE6XG4gICAgICAgICAgICByZXR1cm4gMTI7XG4gICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgIHJldHVybiAzNjtcbiAgICAgICAgICBjYXNlIDMzOlxuICAgICAgICAgICAgdGhpcy5iZWdpbihcInN0cmluZ1wiKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICB0aGlzLnBvcFN0YXRlKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDM1OlxuICAgICAgICAgICAgcmV0dXJuIDMzO1xuICAgICAgICAgIGNhc2UgMzY6XG4gICAgICAgICAgICByZXR1cm4gMzA7XG4gICAgICAgICAgY2FzZSAzNzpcbiAgICAgICAgICAgIHJldHVybiA0NjtcbiAgICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgcmV0dXJuIDc7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBydWxlczogWy9eKD86YWNjVGl0bGVcXHMqOlxccyopL2ksIC9eKD86KD8hXFxufHwpKlteXFxuXSopL2ksIC9eKD86YWNjRGVzY3JcXHMqOlxccyopL2ksIC9eKD86KD8hXFxufHwpKlteXFxuXSopL2ksIC9eKD86YWNjRGVzY3JcXHMqXFx7XFxzKikvaSwgL14oPzpbXFx9XSkvaSwgL14oPzpbXlxcfV0qKS9pLCAvXig/OihcXHI/XFxuKSspL2ksIC9eKD86I1teXFxuXSopL2ksIC9eKD86JVteXFxuXSopL2ksIC9eKD86Z2l0R3JhcGhcXGIpL2ksIC9eKD86Y29tbWl0KD89XFxzfCQpKS9pLCAvXig/OmlkOikvaSwgL14oPzp0eXBlOikvaSwgL14oPzptc2c6KS9pLCAvXig/Ok5PUk1BTFxcYikvaSwgL14oPzpSRVZFUlNFXFxiKS9pLCAvXig/OkhJR0hMSUdIVFxcYikvaSwgL14oPzp0YWc6KS9pLCAvXig/OmJyYW5jaCg/PVxcc3wkKSkvaSwgL14oPzpvcmRlcjopL2ksIC9eKD86bWVyZ2UoPz1cXHN8JCkpL2ksIC9eKD86Y2hlcnJ5LXBpY2soPz1cXHN8JCkpL2ksIC9eKD86cGFyZW50OikvaSwgL14oPzpjaGVja291dCg/PVxcc3wkKSkvaSwgL14oPzpMUlxcYikvaSwgL14oPzpUQlxcYikvaSwgL14oPzo6KS9pLCAvXig/OlxcXikvaSwgL14oPzpvcHRpb25zXFxyP1xcbikvaSwgL14oPzpbIFxcclxcblxcdF0rZW5kXFxiKS9pLCAvXig/OltcXHNcXFNdKyg/PVsgXFxyXFxuXFx0XStlbmQpKS9pLCAvXig/OltcIl1bXCJdKS9pLCAvXig/OltcIl0pL2ksIC9eKD86W1wiXSkvaSwgL14oPzpbXlwiXSopL2ksIC9eKD86WzAtOV0rKD89XFxzfCQpKS9pLCAvXig/OlxcdyhbLVxcLi9cXHddKlstXFx3XSk/KS9pLCAvXig/OiQpL2ksIC9eKD86XFxzKykvaV0sXG4gICAgICBjb25kaXRpb25zOiB7IFwiYWNjX2Rlc2NyX211bHRpbGluZVwiOiB7IFwicnVsZXNcIjogWzUsIDZdLCBcImluY2x1c2l2ZVwiOiBmYWxzZSB9LCBcImFjY19kZXNjclwiOiB7IFwicnVsZXNcIjogWzNdLCBcImluY2x1c2l2ZVwiOiBmYWxzZSB9LCBcImFjY190aXRsZVwiOiB7IFwicnVsZXNcIjogWzFdLCBcImluY2x1c2l2ZVwiOiBmYWxzZSB9LCBcIm9wdGlvbnNcIjogeyBcInJ1bGVzXCI6IFszMCwgMzFdLCBcImluY2x1c2l2ZVwiOiBmYWxzZSB9LCBcInN0cmluZ1wiOiB7IFwicnVsZXNcIjogWzM0LCAzNV0sIFwiaW5jbHVzaXZlXCI6IGZhbHNlIH0sIFwiSU5JVElBTFwiOiB7IFwicnVsZXNcIjogWzAsIDIsIDQsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsIDE2LCAxNywgMTgsIDE5LCAyMCwgMjEsIDIyLCAyMywgMjQsIDI1LCAyNiwgMjcsIDI4LCAyOSwgMzIsIDMzLCAzNiwgMzcsIDM4LCAzOV0sIFwiaW5jbHVzaXZlXCI6IHRydWUgfSB9XG4gICAgfTtcbiAgICByZXR1cm4gbGV4ZXIyO1xuICB9KCk7XG4gIHBhcnNlcjIubGV4ZXIgPSBsZXhlcjtcbiAgZnVuY3Rpb24gUGFyc2VyKCkge1xuICAgIHRoaXMueXkgPSB7fTtcbiAgfVxuICBQYXJzZXIucHJvdG90eXBlID0gcGFyc2VyMjtcbiAgcGFyc2VyMi5QYXJzZXIgPSBQYXJzZXI7XG4gIHJldHVybiBuZXcgUGFyc2VyKCk7XG59KCk7XG5wYXJzZXIucGFyc2VyID0gcGFyc2VyO1xuY29uc3QgZ2l0R3JhcGhQYXJzZXIgPSBwYXJzZXI7XG5sZXQgbWFpbkJyYW5jaE5hbWUgPSBnZXRDb25maWcoKS5naXRHcmFwaC5tYWluQnJhbmNoTmFtZTtcbmxldCBtYWluQnJhbmNoT3JkZXIgPSBnZXRDb25maWcoKS5naXRHcmFwaC5tYWluQnJhbmNoT3JkZXI7XG5sZXQgY29tbWl0cyA9IHt9O1xubGV0IGhlYWQgPSBudWxsO1xubGV0IGJyYW5jaGVzQ29uZmlnID0ge307XG5icmFuY2hlc0NvbmZpZ1ttYWluQnJhbmNoTmFtZV0gPSB7IG5hbWU6IG1haW5CcmFuY2hOYW1lLCBvcmRlcjogbWFpbkJyYW5jaE9yZGVyIH07XG5sZXQgYnJhbmNoZXMgPSB7fTtcbmJyYW5jaGVzW21haW5CcmFuY2hOYW1lXSA9IGhlYWQ7XG5sZXQgY3VyQnJhbmNoID0gbWFpbkJyYW5jaE5hbWU7XG5sZXQgZGlyZWN0aW9uID0gXCJMUlwiO1xubGV0IHNlcSA9IDA7XG5mdW5jdGlvbiBnZXRJZCgpIHtcbiAgcmV0dXJuIHJhbmRvbSh7IGxlbmd0aDogNyB9KTtcbn1cbmZ1bmN0aW9uIHVuaXFCeShsaXN0LCBmbikge1xuICBjb25zdCByZWNvcmRNYXAgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIGxpc3QucmVkdWNlKChvdXQsIGl0ZW0pID0+IHtcbiAgICBjb25zdCBrZXkgPSBmbihpdGVtKTtcbiAgICBpZiAoIXJlY29yZE1hcFtrZXldKSB7XG4gICAgICByZWNvcmRNYXBba2V5XSA9IHRydWU7XG4gICAgICBvdXQucHVzaChpdGVtKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbiAgfSwgW10pO1xufVxuY29uc3Qgc2V0RGlyZWN0aW9uID0gZnVuY3Rpb24oZGlyMikge1xuICBkaXJlY3Rpb24gPSBkaXIyO1xufTtcbmxldCBvcHRpb25zID0ge307XG5jb25zdCBzZXRPcHRpb25zID0gZnVuY3Rpb24ocmF3T3B0U3RyaW5nKSB7XG4gIGxvZy5kZWJ1ZyhcIm9wdGlvbnMgc3RyXCIsIHJhd09wdFN0cmluZyk7XG4gIHJhd09wdFN0cmluZyA9IHJhd09wdFN0cmluZyAmJiByYXdPcHRTdHJpbmcudHJpbSgpO1xuICByYXdPcHRTdHJpbmcgPSByYXdPcHRTdHJpbmcgfHwgXCJ7fVwiO1xuICB0cnkge1xuICAgIG9wdGlvbnMgPSBKU09OLnBhcnNlKHJhd09wdFN0cmluZyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2cuZXJyb3IoXCJlcnJvciB3aGlsZSBwYXJzaW5nIGdpdEdyYXBoIG9wdGlvbnNcIiwgZS5tZXNzYWdlKTtcbiAgfVxufTtcbmNvbnN0IGdldE9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG9wdGlvbnM7XG59O1xuY29uc3QgY29tbWl0ID0gZnVuY3Rpb24obXNnLCBpZCwgdHlwZSwgdGFnKSB7XG4gIGxvZy5kZWJ1ZyhcIkVudGVyaW5nIGNvbW1pdDpcIiwgbXNnLCBpZCwgdHlwZSwgdGFnKTtcbiAgaWQgPSBjb21tb24uc2FuaXRpemVUZXh0KGlkLCBnZXRDb25maWcoKSk7XG4gIG1zZyA9IGNvbW1vbi5zYW5pdGl6ZVRleHQobXNnLCBnZXRDb25maWcoKSk7XG4gIHRhZyA9IGNvbW1vbi5zYW5pdGl6ZVRleHQodGFnLCBnZXRDb25maWcoKSk7XG4gIGNvbnN0IGNvbW1pdDIgPSB7XG4gICAgaWQ6IGlkID8gaWQgOiBzZXEgKyBcIi1cIiArIGdldElkKCksXG4gICAgbWVzc2FnZTogbXNnLFxuICAgIHNlcTogc2VxKyssXG4gICAgdHlwZTogdHlwZSA/IHR5cGUgOiBjb21taXRUeXBlJDEuTk9STUFMLFxuICAgIHRhZzogdGFnID8gdGFnIDogXCJcIixcbiAgICBwYXJlbnRzOiBoZWFkID09IG51bGwgPyBbXSA6IFtoZWFkLmlkXSxcbiAgICBicmFuY2g6IGN1ckJyYW5jaFxuICB9O1xuICBoZWFkID0gY29tbWl0MjtcbiAgY29tbWl0c1tjb21taXQyLmlkXSA9IGNvbW1pdDI7XG4gIGJyYW5jaGVzW2N1ckJyYW5jaF0gPSBjb21taXQyLmlkO1xuICBsb2cuZGVidWcoXCJpbiBwdXNoQ29tbWl0IFwiICsgY29tbWl0Mi5pZCk7XG59O1xuY29uc3QgYnJhbmNoID0gZnVuY3Rpb24obmFtZSwgb3JkZXIpIHtcbiAgbmFtZSA9IGNvbW1vbi5zYW5pdGl6ZVRleHQobmFtZSwgZ2V0Q29uZmlnKCkpO1xuICBpZiAoYnJhbmNoZXNbbmFtZV0gPT09IHZvaWQgMCkge1xuICAgIGJyYW5jaGVzW25hbWVdID0gaGVhZCAhPSBudWxsID8gaGVhZC5pZCA6IG51bGw7XG4gICAgYnJhbmNoZXNDb25maWdbbmFtZV0gPSB7IG5hbWUsIG9yZGVyOiBvcmRlciA/IHBhcnNlSW50KG9yZGVyLCAxMCkgOiBudWxsIH07XG4gICAgY2hlY2tvdXQobmFtZSk7XG4gICAgbG9nLmRlYnVnKFwiaW4gY3JlYXRlQnJhbmNoXCIpO1xuICB9IGVsc2Uge1xuICAgIGxldCBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICdUcnlpbmcgdG8gY3JlYXRlIGFuIGV4aXN0aW5nIGJyYW5jaC4gKEhlbHA6IEVpdGhlciB1c2UgYSBuZXcgbmFtZSBpZiB5b3Ugd2FudCBjcmVhdGUgYSBuZXcgYnJhbmNoIG9yIHRyeSB1c2luZyBcImNoZWNrb3V0ICcgKyBuYW1lICsgJ1wiKSdcbiAgICApO1xuICAgIGVycm9yLmhhc2ggPSB7XG4gICAgICB0ZXh0OiBcImJyYW5jaCBcIiArIG5hbWUsXG4gICAgICB0b2tlbjogXCJicmFuY2ggXCIgKyBuYW1lLFxuICAgICAgbGluZTogXCIxXCIsXG4gICAgICBsb2M6IHsgZmlyc3RfbGluZTogMSwgbGFzdF9saW5lOiAxLCBmaXJzdF9jb2x1bW46IDEsIGxhc3RfY29sdW1uOiAxIH0sXG4gICAgICBleHBlY3RlZDogWydcImNoZWNrb3V0ICcgKyBuYW1lICsgJ1wiJ11cbiAgICB9O1xuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuY29uc3QgbWVyZ2UgPSBmdW5jdGlvbihvdGhlckJyYW5jaCwgY3VzdG9tX2lkLCBvdmVycmlkZV90eXBlLCBjdXN0b21fdGFnKSB7XG4gIG90aGVyQnJhbmNoID0gY29tbW9uLnNhbml0aXplVGV4dChvdGhlckJyYW5jaCwgZ2V0Q29uZmlnKCkpO1xuICBjdXN0b21faWQgPSBjb21tb24uc2FuaXRpemVUZXh0KGN1c3RvbV9pZCwgZ2V0Q29uZmlnKCkpO1xuICBjb25zdCBjdXJyZW50Q29tbWl0ID0gY29tbWl0c1ticmFuY2hlc1tjdXJCcmFuY2hdXTtcbiAgY29uc3Qgb3RoZXJDb21taXQgPSBjb21taXRzW2JyYW5jaGVzW290aGVyQnJhbmNoXV07XG4gIGlmIChjdXJCcmFuY2ggPT09IG90aGVyQnJhbmNoKSB7XG4gICAgbGV0IGVycm9yID0gbmV3IEVycm9yKCdJbmNvcnJlY3QgdXNhZ2Ugb2YgXCJtZXJnZVwiLiBDYW5ub3QgbWVyZ2UgYSBicmFuY2ggdG8gaXRzZWxmJyk7XG4gICAgZXJyb3IuaGFzaCA9IHtcbiAgICAgIHRleHQ6IFwibWVyZ2UgXCIgKyBvdGhlckJyYW5jaCxcbiAgICAgIHRva2VuOiBcIm1lcmdlIFwiICsgb3RoZXJCcmFuY2gsXG4gICAgICBsaW5lOiBcIjFcIixcbiAgICAgIGxvYzogeyBmaXJzdF9saW5lOiAxLCBsYXN0X2xpbmU6IDEsIGZpcnN0X2NvbHVtbjogMSwgbGFzdF9jb2x1bW46IDEgfSxcbiAgICAgIGV4cGVjdGVkOiBbXCJicmFuY2ggYWJjXCJdXG4gICAgfTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfSBlbHNlIGlmIChjdXJyZW50Q29tbWl0ID09PSB2b2lkIDAgfHwgIWN1cnJlbnRDb21taXQpIHtcbiAgICBsZXQgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAnSW5jb3JyZWN0IHVzYWdlIG9mIFwibWVyZ2VcIi4gQ3VycmVudCBicmFuY2ggKCcgKyBjdXJCcmFuY2ggKyBcIiloYXMgbm8gY29tbWl0c1wiXG4gICAgKTtcbiAgICBlcnJvci5oYXNoID0ge1xuICAgICAgdGV4dDogXCJtZXJnZSBcIiArIG90aGVyQnJhbmNoLFxuICAgICAgdG9rZW46IFwibWVyZ2UgXCIgKyBvdGhlckJyYW5jaCxcbiAgICAgIGxpbmU6IFwiMVwiLFxuICAgICAgbG9jOiB7IGZpcnN0X2xpbmU6IDEsIGxhc3RfbGluZTogMSwgZmlyc3RfY29sdW1uOiAxLCBsYXN0X2NvbHVtbjogMSB9LFxuICAgICAgZXhwZWN0ZWQ6IFtcImNvbW1pdFwiXVxuICAgIH07XG4gICAgdGhyb3cgZXJyb3I7XG4gIH0gZWxzZSBpZiAoYnJhbmNoZXNbb3RoZXJCcmFuY2hdID09PSB2b2lkIDApIHtcbiAgICBsZXQgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAnSW5jb3JyZWN0IHVzYWdlIG9mIFwibWVyZ2VcIi4gQnJhbmNoIHRvIGJlIG1lcmdlZCAoJyArIG90aGVyQnJhbmNoICsgXCIpIGRvZXMgbm90IGV4aXN0XCJcbiAgICApO1xuICAgIGVycm9yLmhhc2ggPSB7XG4gICAgICB0ZXh0OiBcIm1lcmdlIFwiICsgb3RoZXJCcmFuY2gsXG4gICAgICB0b2tlbjogXCJtZXJnZSBcIiArIG90aGVyQnJhbmNoLFxuICAgICAgbGluZTogXCIxXCIsXG4gICAgICBsb2M6IHsgZmlyc3RfbGluZTogMSwgbGFzdF9saW5lOiAxLCBmaXJzdF9jb2x1bW46IDEsIGxhc3RfY29sdW1uOiAxIH0sXG4gICAgICBleHBlY3RlZDogW1wiYnJhbmNoIFwiICsgb3RoZXJCcmFuY2hdXG4gICAgfTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfSBlbHNlIGlmIChvdGhlckNvbW1pdCA9PT0gdm9pZCAwIHx8ICFvdGhlckNvbW1pdCkge1xuICAgIGxldCBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICdJbmNvcnJlY3QgdXNhZ2Ugb2YgXCJtZXJnZVwiLiBCcmFuY2ggdG8gYmUgbWVyZ2VkICgnICsgb3RoZXJCcmFuY2ggKyBcIikgaGFzIG5vIGNvbW1pdHNcIlxuICAgICk7XG4gICAgZXJyb3IuaGFzaCA9IHtcbiAgICAgIHRleHQ6IFwibWVyZ2UgXCIgKyBvdGhlckJyYW5jaCxcbiAgICAgIHRva2VuOiBcIm1lcmdlIFwiICsgb3RoZXJCcmFuY2gsXG4gICAgICBsaW5lOiBcIjFcIixcbiAgICAgIGxvYzogeyBmaXJzdF9saW5lOiAxLCBsYXN0X2xpbmU6IDEsIGZpcnN0X2NvbHVtbjogMSwgbGFzdF9jb2x1bW46IDEgfSxcbiAgICAgIGV4cGVjdGVkOiBbJ1wiY29tbWl0XCInXVxuICAgIH07XG4gICAgdGhyb3cgZXJyb3I7XG4gIH0gZWxzZSBpZiAoY3VycmVudENvbW1pdCA9PT0gb3RoZXJDb21taXQpIHtcbiAgICBsZXQgZXJyb3IgPSBuZXcgRXJyb3IoJ0luY29ycmVjdCB1c2FnZSBvZiBcIm1lcmdlXCIuIEJvdGggYnJhbmNoZXMgaGF2ZSBzYW1lIGhlYWQnKTtcbiAgICBlcnJvci5oYXNoID0ge1xuICAgICAgdGV4dDogXCJtZXJnZSBcIiArIG90aGVyQnJhbmNoLFxuICAgICAgdG9rZW46IFwibWVyZ2UgXCIgKyBvdGhlckJyYW5jaCxcbiAgICAgIGxpbmU6IFwiMVwiLFxuICAgICAgbG9jOiB7IGZpcnN0X2xpbmU6IDEsIGxhc3RfbGluZTogMSwgZmlyc3RfY29sdW1uOiAxLCBsYXN0X2NvbHVtbjogMSB9LFxuICAgICAgZXhwZWN0ZWQ6IFtcImJyYW5jaCBhYmNcIl1cbiAgICB9O1xuICAgIHRocm93IGVycm9yO1xuICB9IGVsc2UgaWYgKGN1c3RvbV9pZCAmJiBjb21taXRzW2N1c3RvbV9pZF0gIT09IHZvaWQgMCkge1xuICAgIGxldCBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICdJbmNvcnJlY3QgdXNhZ2Ugb2YgXCJtZXJnZVwiLiBDb21taXQgd2l0aCBpZDonICsgY3VzdG9tX2lkICsgXCIgYWxyZWFkeSBleGlzdHMsIHVzZSBkaWZmZXJlbnQgY3VzdG9tIElkXCJcbiAgICApO1xuICAgIGVycm9yLmhhc2ggPSB7XG4gICAgICB0ZXh0OiBcIm1lcmdlIFwiICsgb3RoZXJCcmFuY2ggKyBjdXN0b21faWQgKyBvdmVycmlkZV90eXBlICsgY3VzdG9tX3RhZyxcbiAgICAgIHRva2VuOiBcIm1lcmdlIFwiICsgb3RoZXJCcmFuY2ggKyBjdXN0b21faWQgKyBvdmVycmlkZV90eXBlICsgY3VzdG9tX3RhZyxcbiAgICAgIGxpbmU6IFwiMVwiLFxuICAgICAgbG9jOiB7IGZpcnN0X2xpbmU6IDEsIGxhc3RfbGluZTogMSwgZmlyc3RfY29sdW1uOiAxLCBsYXN0X2NvbHVtbjogMSB9LFxuICAgICAgZXhwZWN0ZWQ6IFtcbiAgICAgICAgXCJtZXJnZSBcIiArIG90aGVyQnJhbmNoICsgXCIgXCIgKyBjdXN0b21faWQgKyBcIl9VTklRVUUgXCIgKyBvdmVycmlkZV90eXBlICsgXCIgXCIgKyBjdXN0b21fdGFnXG4gICAgICBdXG4gICAgfTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxuICBjb25zdCBjb21taXQyID0ge1xuICAgIGlkOiBjdXN0b21faWQgPyBjdXN0b21faWQgOiBzZXEgKyBcIi1cIiArIGdldElkKCksXG4gICAgbWVzc2FnZTogXCJtZXJnZWQgYnJhbmNoIFwiICsgb3RoZXJCcmFuY2ggKyBcIiBpbnRvIFwiICsgY3VyQnJhbmNoLFxuICAgIHNlcTogc2VxKyssXG4gICAgcGFyZW50czogW2hlYWQgPT0gbnVsbCA/IG51bGwgOiBoZWFkLmlkLCBicmFuY2hlc1tvdGhlckJyYW5jaF1dLFxuICAgIGJyYW5jaDogY3VyQnJhbmNoLFxuICAgIHR5cGU6IGNvbW1pdFR5cGUkMS5NRVJHRSxcbiAgICBjdXN0b21UeXBlOiBvdmVycmlkZV90eXBlLFxuICAgIGN1c3RvbUlkOiBjdXN0b21faWQgPyB0cnVlIDogZmFsc2UsXG4gICAgdGFnOiBjdXN0b21fdGFnID8gY3VzdG9tX3RhZyA6IFwiXCJcbiAgfTtcbiAgaGVhZCA9IGNvbW1pdDI7XG4gIGNvbW1pdHNbY29tbWl0Mi5pZF0gPSBjb21taXQyO1xuICBicmFuY2hlc1tjdXJCcmFuY2hdID0gY29tbWl0Mi5pZDtcbiAgbG9nLmRlYnVnKGJyYW5jaGVzKTtcbiAgbG9nLmRlYnVnKFwiaW4gbWVyZ2VCcmFuY2hcIik7XG59O1xuY29uc3QgY2hlcnJ5UGljayA9IGZ1bmN0aW9uKHNvdXJjZUlkLCB0YXJnZXRJZCwgdGFnLCBwYXJlbnRDb21taXRJZCkge1xuICBsb2cuZGVidWcoXCJFbnRlcmluZyBjaGVycnlQaWNrOlwiLCBzb3VyY2VJZCwgdGFyZ2V0SWQsIHRhZyk7XG4gIHNvdXJjZUlkID0gY29tbW9uLnNhbml0aXplVGV4dChzb3VyY2VJZCwgZ2V0Q29uZmlnKCkpO1xuICB0YXJnZXRJZCA9IGNvbW1vbi5zYW5pdGl6ZVRleHQodGFyZ2V0SWQsIGdldENvbmZpZygpKTtcbiAgdGFnID0gY29tbW9uLnNhbml0aXplVGV4dCh0YWcsIGdldENvbmZpZygpKTtcbiAgcGFyZW50Q29tbWl0SWQgPSBjb21tb24uc2FuaXRpemVUZXh0KHBhcmVudENvbW1pdElkLCBnZXRDb25maWcoKSk7XG4gIGlmICghc291cmNlSWQgfHwgY29tbWl0c1tzb3VyY2VJZF0gPT09IHZvaWQgMCkge1xuICAgIGxldCBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICdJbmNvcnJlY3QgdXNhZ2Ugb2YgXCJjaGVycnlQaWNrXCIuIFNvdXJjZSBjb21taXQgaWQgc2hvdWxkIGV4aXN0IGFuZCBwcm92aWRlZCdcbiAgICApO1xuICAgIGVycm9yLmhhc2ggPSB7XG4gICAgICB0ZXh0OiBcImNoZXJyeVBpY2sgXCIgKyBzb3VyY2VJZCArIFwiIFwiICsgdGFyZ2V0SWQsXG4gICAgICB0b2tlbjogXCJjaGVycnlQaWNrIFwiICsgc291cmNlSWQgKyBcIiBcIiArIHRhcmdldElkLFxuICAgICAgbGluZTogXCIxXCIsXG4gICAgICBsb2M6IHsgZmlyc3RfbGluZTogMSwgbGFzdF9saW5lOiAxLCBmaXJzdF9jb2x1bW46IDEsIGxhc3RfY29sdW1uOiAxIH0sXG4gICAgICBleHBlY3RlZDogW1wiY2hlcnJ5LXBpY2sgYWJjXCJdXG4gICAgfTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxuICBsZXQgc291cmNlQ29tbWl0ID0gY29tbWl0c1tzb3VyY2VJZF07XG4gIGxldCBzb3VyY2VDb21taXRCcmFuY2ggPSBzb3VyY2VDb21taXQuYnJhbmNoO1xuICBpZiAocGFyZW50Q29tbWl0SWQgJiYgIShBcnJheS5pc0FycmF5KHNvdXJjZUNvbW1pdC5wYXJlbnRzKSAmJiBzb3VyY2VDb21taXQucGFyZW50cy5pbmNsdWRlcyhwYXJlbnRDb21taXRJZCkpKSB7XG4gICAgbGV0IGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgXCJJbnZhbGlkIG9wZXJhdGlvbjogVGhlIHNwZWNpZmllZCBwYXJlbnQgY29tbWl0IGlzIG5vdCBhbiBpbW1lZGlhdGUgcGFyZW50IG9mIHRoZSBjaGVycnktcGlja2VkIGNvbW1pdC5cIlxuICAgICk7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbiAgaWYgKHNvdXJjZUNvbW1pdC50eXBlID09PSBjb21taXRUeXBlJDEuTUVSR0UgJiYgIXBhcmVudENvbW1pdElkKSB7XG4gICAgbGV0IGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgXCJJbmNvcnJlY3QgdXNhZ2Ugb2YgY2hlcnJ5LXBpY2s6IElmIHRoZSBzb3VyY2UgY29tbWl0IGlzIGEgbWVyZ2UgY29tbWl0LCBhbiBpbW1lZGlhdGUgcGFyZW50IGNvbW1pdCBtdXN0IGJlIHNwZWNpZmllZC5cIlxuICAgICk7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbiAgaWYgKCF0YXJnZXRJZCB8fCBjb21taXRzW3RhcmdldElkXSA9PT0gdm9pZCAwKSB7XG4gICAgaWYgKHNvdXJjZUNvbW1pdEJyYW5jaCA9PT0gY3VyQnJhbmNoKSB7XG4gICAgICBsZXQgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdJbmNvcnJlY3QgdXNhZ2Ugb2YgXCJjaGVycnlQaWNrXCIuIFNvdXJjZSBjb21taXQgaXMgYWxyZWFkeSBvbiBjdXJyZW50IGJyYW5jaCdcbiAgICAgICk7XG4gICAgICBlcnJvci5oYXNoID0ge1xuICAgICAgICB0ZXh0OiBcImNoZXJyeVBpY2sgXCIgKyBzb3VyY2VJZCArIFwiIFwiICsgdGFyZ2V0SWQsXG4gICAgICAgIHRva2VuOiBcImNoZXJyeVBpY2sgXCIgKyBzb3VyY2VJZCArIFwiIFwiICsgdGFyZ2V0SWQsXG4gICAgICAgIGxpbmU6IFwiMVwiLFxuICAgICAgICBsb2M6IHsgZmlyc3RfbGluZTogMSwgbGFzdF9saW5lOiAxLCBmaXJzdF9jb2x1bW46IDEsIGxhc3RfY29sdW1uOiAxIH0sXG4gICAgICAgIGV4cGVjdGVkOiBbXCJjaGVycnktcGljayBhYmNcIl1cbiAgICAgIH07XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gICAgY29uc3QgY3VycmVudENvbW1pdCA9IGNvbW1pdHNbYnJhbmNoZXNbY3VyQnJhbmNoXV07XG4gICAgaWYgKGN1cnJlbnRDb21taXQgPT09IHZvaWQgMCB8fCAhY3VycmVudENvbW1pdCkge1xuICAgICAgbGV0IGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnSW5jb3JyZWN0IHVzYWdlIG9mIFwiY2hlcnJ5LXBpY2tcIi4gQ3VycmVudCBicmFuY2ggKCcgKyBjdXJCcmFuY2ggKyBcIiloYXMgbm8gY29tbWl0c1wiXG4gICAgICApO1xuICAgICAgZXJyb3IuaGFzaCA9IHtcbiAgICAgICAgdGV4dDogXCJjaGVycnlQaWNrIFwiICsgc291cmNlSWQgKyBcIiBcIiArIHRhcmdldElkLFxuICAgICAgICB0b2tlbjogXCJjaGVycnlQaWNrIFwiICsgc291cmNlSWQgKyBcIiBcIiArIHRhcmdldElkLFxuICAgICAgICBsaW5lOiBcIjFcIixcbiAgICAgICAgbG9jOiB7IGZpcnN0X2xpbmU6IDEsIGxhc3RfbGluZTogMSwgZmlyc3RfY29sdW1uOiAxLCBsYXN0X2NvbHVtbjogMSB9LFxuICAgICAgICBleHBlY3RlZDogW1wiY2hlcnJ5LXBpY2sgYWJjXCJdXG4gICAgICB9O1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIGNvbnN0IGNvbW1pdDIgPSB7XG4gICAgICBpZDogc2VxICsgXCItXCIgKyBnZXRJZCgpLFxuICAgICAgbWVzc2FnZTogXCJjaGVycnktcGlja2VkIFwiICsgc291cmNlQ29tbWl0ICsgXCIgaW50byBcIiArIGN1ckJyYW5jaCxcbiAgICAgIHNlcTogc2VxKyssXG4gICAgICBwYXJlbnRzOiBbaGVhZCA9PSBudWxsID8gbnVsbCA6IGhlYWQuaWQsIHNvdXJjZUNvbW1pdC5pZF0sXG4gICAgICBicmFuY2g6IGN1ckJyYW5jaCxcbiAgICAgIHR5cGU6IGNvbW1pdFR5cGUkMS5DSEVSUllfUElDSyxcbiAgICAgIHRhZzogdGFnID8/IGBjaGVycnktcGljazoke3NvdXJjZUNvbW1pdC5pZH0ke3NvdXJjZUNvbW1pdC50eXBlID09PSBjb21taXRUeXBlJDEuTUVSR0UgPyBgfHBhcmVudDoke3BhcmVudENvbW1pdElkfWAgOiBcIlwifWBcbiAgICB9O1xuICAgIGhlYWQgPSBjb21taXQyO1xuICAgIGNvbW1pdHNbY29tbWl0Mi5pZF0gPSBjb21taXQyO1xuICAgIGJyYW5jaGVzW2N1ckJyYW5jaF0gPSBjb21taXQyLmlkO1xuICAgIGxvZy5kZWJ1ZyhicmFuY2hlcyk7XG4gICAgbG9nLmRlYnVnKFwiaW4gY2hlcnJ5UGlja1wiKTtcbiAgfVxufTtcbmNvbnN0IGNoZWNrb3V0ID0gZnVuY3Rpb24oYnJhbmNoMikge1xuICBicmFuY2gyID0gY29tbW9uLnNhbml0aXplVGV4dChicmFuY2gyLCBnZXRDb25maWcoKSk7XG4gIGlmIChicmFuY2hlc1ticmFuY2gyXSA9PT0gdm9pZCAwKSB7XG4gICAgbGV0IGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgJ1RyeWluZyB0byBjaGVja291dCBicmFuY2ggd2hpY2ggaXMgbm90IHlldCBjcmVhdGVkLiAoSGVscCB0cnkgdXNpbmcgXCJicmFuY2ggJyArIGJyYW5jaDIgKyAnXCIpJ1xuICAgICk7XG4gICAgZXJyb3IuaGFzaCA9IHtcbiAgICAgIHRleHQ6IFwiY2hlY2tvdXQgXCIgKyBicmFuY2gyLFxuICAgICAgdG9rZW46IFwiY2hlY2tvdXQgXCIgKyBicmFuY2gyLFxuICAgICAgbGluZTogXCIxXCIsXG4gICAgICBsb2M6IHsgZmlyc3RfbGluZTogMSwgbGFzdF9saW5lOiAxLCBmaXJzdF9jb2x1bW46IDEsIGxhc3RfY29sdW1uOiAxIH0sXG4gICAgICBleHBlY3RlZDogWydcImJyYW5jaCAnICsgYnJhbmNoMiArICdcIiddXG4gICAgfTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfSBlbHNlIHtcbiAgICBjdXJCcmFuY2ggPSBicmFuY2gyO1xuICAgIGNvbnN0IGlkID0gYnJhbmNoZXNbY3VyQnJhbmNoXTtcbiAgICBoZWFkID0gY29tbWl0c1tpZF07XG4gIH1cbn07XG5mdW5jdGlvbiB1cHNlcnQoYXJyLCBrZXksIG5ld1ZhbCkge1xuICBjb25zdCBpbmRleCA9IGFyci5pbmRleE9mKGtleSk7XG4gIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICBhcnIucHVzaChuZXdWYWwpO1xuICB9IGVsc2Uge1xuICAgIGFyci5zcGxpY2UoaW5kZXgsIDEsIG5ld1ZhbCk7XG4gIH1cbn1cbmZ1bmN0aW9uIHByZXR0eVByaW50Q29tbWl0SGlzdG9yeShjb21taXRBcnIpIHtcbiAgY29uc3QgY29tbWl0MiA9IGNvbW1pdEFyci5yZWR1Y2UoKG91dCwgY29tbWl0MykgPT4ge1xuICAgIGlmIChvdXQuc2VxID4gY29tbWl0My5zZXEpIHtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIHJldHVybiBjb21taXQzO1xuICB9LCBjb21taXRBcnJbMF0pO1xuICBsZXQgbGluZSA9IFwiXCI7XG4gIGNvbW1pdEFyci5mb3JFYWNoKGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gY29tbWl0Mikge1xuICAgICAgbGluZSArPSBcIlx0KlwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaW5lICs9IFwiXHR8XCI7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgbGFiZWwgPSBbbGluZSwgY29tbWl0Mi5pZCwgY29tbWl0Mi5zZXFdO1xuICBmb3IgKGxldCBicmFuY2gyIGluIGJyYW5jaGVzKSB7XG4gICAgaWYgKGJyYW5jaGVzW2JyYW5jaDJdID09PSBjb21taXQyLmlkKSB7XG4gICAgICBsYWJlbC5wdXNoKGJyYW5jaDIpO1xuICAgIH1cbiAgfVxuICBsb2cuZGVidWcobGFiZWwuam9pbihcIiBcIikpO1xuICBpZiAoY29tbWl0Mi5wYXJlbnRzICYmIGNvbW1pdDIucGFyZW50cy5sZW5ndGggPT0gMikge1xuICAgIGNvbnN0IG5ld0NvbW1pdCA9IGNvbW1pdHNbY29tbWl0Mi5wYXJlbnRzWzBdXTtcbiAgICB1cHNlcnQoY29tbWl0QXJyLCBjb21taXQyLCBuZXdDb21taXQpO1xuICAgIGNvbW1pdEFyci5wdXNoKGNvbW1pdHNbY29tbWl0Mi5wYXJlbnRzWzFdXSk7XG4gIH0gZWxzZSBpZiAoY29tbWl0Mi5wYXJlbnRzLmxlbmd0aCA9PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IG5leHRDb21taXQgPSBjb21taXRzW2NvbW1pdDIucGFyZW50c107XG4gICAgdXBzZXJ0KGNvbW1pdEFyciwgY29tbWl0MiwgbmV4dENvbW1pdCk7XG4gIH1cbiAgY29tbWl0QXJyID0gdW5pcUJ5KGNvbW1pdEFyciwgKGMpID0+IGMuaWQpO1xuICBwcmV0dHlQcmludENvbW1pdEhpc3RvcnkoY29tbWl0QXJyKTtcbn1cbmNvbnN0IHByZXR0eVByaW50ID0gZnVuY3Rpb24oKSB7XG4gIGxvZy5kZWJ1Zyhjb21taXRzKTtcbiAgY29uc3Qgbm9kZSA9IGdldENvbW1pdHNBcnJheSgpWzBdO1xuICBwcmV0dHlQcmludENvbW1pdEhpc3RvcnkoW25vZGVdKTtcbn07XG5jb25zdCBjbGVhciQxID0gZnVuY3Rpb24oKSB7XG4gIGNvbW1pdHMgPSB7fTtcbiAgaGVhZCA9IG51bGw7XG4gIGxldCBtYWluQnJhbmNoID0gZ2V0Q29uZmlnKCkuZ2l0R3JhcGgubWFpbkJyYW5jaE5hbWU7XG4gIGxldCBtYWluQnJhbmNoT3JkZXIyID0gZ2V0Q29uZmlnKCkuZ2l0R3JhcGgubWFpbkJyYW5jaE9yZGVyO1xuICBicmFuY2hlcyA9IHt9O1xuICBicmFuY2hlc1ttYWluQnJhbmNoXSA9IG51bGw7XG4gIGJyYW5jaGVzQ29uZmlnID0ge307XG4gIGJyYW5jaGVzQ29uZmlnW21haW5CcmFuY2hdID0geyBuYW1lOiBtYWluQnJhbmNoLCBvcmRlcjogbWFpbkJyYW5jaE9yZGVyMiB9O1xuICBjdXJCcmFuY2ggPSBtYWluQnJhbmNoO1xuICBzZXEgPSAwO1xuICBjbGVhciQyKCk7XG59O1xuY29uc3QgZ2V0QnJhbmNoZXNBc09iakFycmF5ID0gZnVuY3Rpb24oKSB7XG4gIGNvbnN0IGJyYW5jaGVzQXJyYXkgPSBPYmplY3QudmFsdWVzKGJyYW5jaGVzQ29uZmlnKS5tYXAoKGJyYW5jaENvbmZpZywgaSkgPT4ge1xuICAgIGlmIChicmFuY2hDb25maWcub3JkZXIgIT09IG51bGwpIHtcbiAgICAgIHJldHVybiBicmFuY2hDb25maWc7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAuLi5icmFuY2hDb25maWcsXG4gICAgICBvcmRlcjogcGFyc2VGbG9hdChgMC4ke2l9YCwgMTApXG4gICAgfTtcbiAgfSkuc29ydCgoYSwgYikgPT4gYS5vcmRlciAtIGIub3JkZXIpLm1hcCgoeyBuYW1lIH0pID0+ICh7IG5hbWUgfSkpO1xuICByZXR1cm4gYnJhbmNoZXNBcnJheTtcbn07XG5jb25zdCBnZXRCcmFuY2hlcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gYnJhbmNoZXM7XG59O1xuY29uc3QgZ2V0Q29tbWl0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gY29tbWl0cztcbn07XG5jb25zdCBnZXRDb21taXRzQXJyYXkgPSBmdW5jdGlvbigpIHtcbiAgY29uc3QgY29tbWl0QXJyID0gT2JqZWN0LmtleXMoY29tbWl0cykubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBjb21taXRzW2tleV07XG4gIH0pO1xuICBjb21taXRBcnIuZm9yRWFjaChmdW5jdGlvbihvKSB7XG4gICAgbG9nLmRlYnVnKG8uaWQpO1xuICB9KTtcbiAgY29tbWl0QXJyLnNvcnQoKGEsIGIpID0+IGEuc2VxIC0gYi5zZXEpO1xuICByZXR1cm4gY29tbWl0QXJyO1xufTtcbmNvbnN0IGdldEN1cnJlbnRCcmFuY2ggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGN1ckJyYW5jaDtcbn07XG5jb25zdCBnZXREaXJlY3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGRpcmVjdGlvbjtcbn07XG5jb25zdCBnZXRIZWFkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBoZWFkO1xufTtcbmNvbnN0IGNvbW1pdFR5cGUkMSA9IHtcbiAgTk9STUFMOiAwLFxuICBSRVZFUlNFOiAxLFxuICBISUdITElHSFQ6IDIsXG4gIE1FUkdFOiAzLFxuICBDSEVSUllfUElDSzogNFxufTtcbmNvbnN0IGdpdEdyYXBoRGIgPSB7XG4gIGdldENvbmZpZzogKCkgPT4gZ2V0Q29uZmlnKCkuZ2l0R3JhcGgsXG4gIHNldERpcmVjdGlvbixcbiAgc2V0T3B0aW9ucyxcbiAgZ2V0T3B0aW9ucyxcbiAgY29tbWl0LFxuICBicmFuY2gsXG4gIG1lcmdlLFxuICBjaGVycnlQaWNrLFxuICBjaGVja291dCxcbiAgLy9yZXNldCxcbiAgcHJldHR5UHJpbnQsXG4gIGNsZWFyOiBjbGVhciQxLFxuICBnZXRCcmFuY2hlc0FzT2JqQXJyYXksXG4gIGdldEJyYW5jaGVzLFxuICBnZXRDb21taXRzLFxuICBnZXRDb21taXRzQXJyYXksXG4gIGdldEN1cnJlbnRCcmFuY2gsXG4gIGdldERpcmVjdGlvbixcbiAgZ2V0SGVhZCxcbiAgc2V0QWNjVGl0bGUsXG4gIGdldEFjY1RpdGxlLFxuICBnZXRBY2NEZXNjcmlwdGlvbixcbiAgc2V0QWNjRGVzY3JpcHRpb24sXG4gIHNldERpYWdyYW1UaXRsZSxcbiAgZ2V0RGlhZ3JhbVRpdGxlLFxuICBjb21taXRUeXBlOiBjb21taXRUeXBlJDFcbn07XG5sZXQgYWxsQ29tbWl0c0RpY3QgPSB7fTtcbmNvbnN0IGNvbW1pdFR5cGUgPSB7XG4gIE5PUk1BTDogMCxcbiAgUkVWRVJTRTogMSxcbiAgSElHSExJR0hUOiAyLFxuICBNRVJHRTogMyxcbiAgQ0hFUlJZX1BJQ0s6IDRcbn07XG5jb25zdCBUSEVNRV9DT0xPUl9MSU1JVCA9IDg7XG5sZXQgYnJhbmNoUG9zID0ge307XG5sZXQgY29tbWl0UG9zID0ge307XG5sZXQgbGFuZXMgPSBbXTtcbmxldCBtYXhQb3MgPSAwO1xubGV0IGRpciA9IFwiTFJcIjtcbmNvbnN0IGNsZWFyID0gKCkgPT4ge1xuICBicmFuY2hQb3MgPSB7fTtcbiAgY29tbWl0UG9zID0ge307XG4gIGFsbENvbW1pdHNEaWN0ID0ge307XG4gIG1heFBvcyA9IDA7XG4gIGxhbmVzID0gW107XG4gIGRpciA9IFwiTFJcIjtcbn07XG5jb25zdCBkcmF3VGV4dCA9ICh0eHQpID0+IHtcbiAgY29uc3Qgc3ZnTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcInRleHRcIik7XG4gIGxldCByb3dzID0gW107XG4gIGlmICh0eXBlb2YgdHh0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgcm93cyA9IHR4dC5zcGxpdCgvXFxcXG58XFxufDxiclxccypcXC8/Pi9naSk7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh0eHQpKSB7XG4gICAgcm93cyA9IHR4dDtcbiAgfSBlbHNlIHtcbiAgICByb3dzID0gW107XG4gIH1cbiAgZm9yIChjb25zdCByb3cgb2Ygcm93cykge1xuICAgIGNvbnN0IHRzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJ0c3BhblwiKTtcbiAgICB0c3Bhbi5zZXRBdHRyaWJ1dGVOUyhcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCBcInhtbDpzcGFjZVwiLCBcInByZXNlcnZlXCIpO1xuICAgIHRzcGFuLnNldEF0dHJpYnV0ZShcImR5XCIsIFwiMWVtXCIpO1xuICAgIHRzcGFuLnNldEF0dHJpYnV0ZShcInhcIiwgXCIwXCIpO1xuICAgIHRzcGFuLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwicm93XCIpO1xuICAgIHRzcGFuLnRleHRDb250ZW50ID0gcm93LnRyaW0oKTtcbiAgICBzdmdMYWJlbC5hcHBlbmRDaGlsZCh0c3Bhbik7XG4gIH1cbiAgcmV0dXJuIHN2Z0xhYmVsO1xufTtcbmNvbnN0IGZpbmRDbG9zZXN0UGFyZW50ID0gKHBhcmVudHMpID0+IHtcbiAgbGV0IGNsb3Nlc3RQYXJlbnQgPSBcIlwiO1xuICBsZXQgbWF4UG9zaXRpb24gPSAwO1xuICBwYXJlbnRzLmZvckVhY2goKHBhcmVudCkgPT4ge1xuICAgIGNvbnN0IHBhcmVudFBvc2l0aW9uID0gZGlyID09PSBcIlRCXCIgPyBjb21taXRQb3NbcGFyZW50XS55IDogY29tbWl0UG9zW3BhcmVudF0ueDtcbiAgICBpZiAocGFyZW50UG9zaXRpb24gPj0gbWF4UG9zaXRpb24pIHtcbiAgICAgIGNsb3Nlc3RQYXJlbnQgPSBwYXJlbnQ7XG4gICAgICBtYXhQb3NpdGlvbiA9IHBhcmVudFBvc2l0aW9uO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjbG9zZXN0UGFyZW50IHx8IHZvaWQgMDtcbn07XG5jb25zdCBkcmF3Q29tbWl0cyA9IChzdmcsIGNvbW1pdHMyLCBtb2RpZnlHcmFwaCkgPT4ge1xuICBjb25zdCBnaXRHcmFwaENvbmZpZyA9IGdldENvbmZpZygpLmdpdEdyYXBoO1xuICBjb25zdCBnQnVsbGV0cyA9IHN2Zy5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcImNvbW1pdC1idWxsZXRzXCIpO1xuICBjb25zdCBnTGFiZWxzID0gc3ZnLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsIFwiY29tbWl0LWxhYmVsc1wiKTtcbiAgbGV0IHBvcyA9IDA7XG4gIGlmIChkaXIgPT09IFwiVEJcIikge1xuICAgIHBvcyA9IDMwO1xuICB9XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhjb21taXRzMik7XG4gIGNvbnN0IHNvcnRlZEtleXMgPSBrZXlzLnNvcnQoKGEsIGIpID0+IHtcbiAgICByZXR1cm4gY29tbWl0czJbYV0uc2VxIC0gY29tbWl0czJbYl0uc2VxO1xuICB9KTtcbiAgY29uc3QgaXNQYXJhbGxlbENvbW1pdHMgPSBnaXRHcmFwaENvbmZpZy5wYXJhbGxlbENvbW1pdHM7XG4gIGNvbnN0IGxheW91dE9mZnNldCA9IDEwO1xuICBjb25zdCBjb21taXRTdGVwID0gNDA7XG4gIHNvcnRlZEtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgY29uc3QgY29tbWl0MiA9IGNvbW1pdHMyW2tleV07XG4gICAgaWYgKGlzUGFyYWxsZWxDb21taXRzKSB7XG4gICAgICBpZiAoY29tbWl0Mi5wYXJlbnRzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBjbG9zZXN0UGFyZW50ID0gZmluZENsb3Nlc3RQYXJlbnQoY29tbWl0Mi5wYXJlbnRzKTtcbiAgICAgICAgcG9zID0gZGlyID09PSBcIlRCXCIgPyBjb21taXRQb3NbY2xvc2VzdFBhcmVudF0ueSArIGNvbW1pdFN0ZXAgOiBjb21taXRQb3NbY2xvc2VzdFBhcmVudF0ueCArIGNvbW1pdFN0ZXA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwb3MgPSAwO1xuICAgICAgICBpZiAoZGlyID09PSBcIlRCXCIpIHtcbiAgICAgICAgICBwb3MgPSAzMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBwb3NXaXRoT2Zmc2V0ID0gcG9zICsgbGF5b3V0T2Zmc2V0O1xuICAgIGNvbnN0IHkgPSBkaXIgPT09IFwiVEJcIiA/IHBvc1dpdGhPZmZzZXQgOiBicmFuY2hQb3NbY29tbWl0Mi5icmFuY2hdLnBvcztcbiAgICBjb25zdCB4ID0gZGlyID09PSBcIlRCXCIgPyBicmFuY2hQb3NbY29tbWl0Mi5icmFuY2hdLnBvcyA6IHBvc1dpdGhPZmZzZXQ7XG4gICAgaWYgKG1vZGlmeUdyYXBoKSB7XG4gICAgICBsZXQgdHlwZUNsYXNzO1xuICAgICAgbGV0IGNvbW1pdFN5bWJvbFR5cGUgPSBjb21taXQyLmN1c3RvbVR5cGUgIT09IHZvaWQgMCAmJiBjb21taXQyLmN1c3RvbVR5cGUgIT09IFwiXCIgPyBjb21taXQyLmN1c3RvbVR5cGUgOiBjb21taXQyLnR5cGU7XG4gICAgICBzd2l0Y2ggKGNvbW1pdFN5bWJvbFR5cGUpIHtcbiAgICAgICAgY2FzZSBjb21taXRUeXBlLk5PUk1BTDpcbiAgICAgICAgICB0eXBlQ2xhc3MgPSBcImNvbW1pdC1ub3JtYWxcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBjb21taXRUeXBlLlJFVkVSU0U6XG4gICAgICAgICAgdHlwZUNsYXNzID0gXCJjb21taXQtcmV2ZXJzZVwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGNvbW1pdFR5cGUuSElHSExJR0hUOlxuICAgICAgICAgIHR5cGVDbGFzcyA9IFwiY29tbWl0LWhpZ2hsaWdodFwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGNvbW1pdFR5cGUuTUVSR0U6XG4gICAgICAgICAgdHlwZUNsYXNzID0gXCJjb21taXQtbWVyZ2VcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBjb21taXRUeXBlLkNIRVJSWV9QSUNLOlxuICAgICAgICAgIHR5cGVDbGFzcyA9IFwiY29tbWl0LWNoZXJyeS1waWNrXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdHlwZUNsYXNzID0gXCJjb21taXQtbm9ybWFsXCI7XG4gICAgICB9XG4gICAgICBpZiAoY29tbWl0U3ltYm9sVHlwZSA9PT0gY29tbWl0VHlwZS5ISUdITElHSFQpIHtcbiAgICAgICAgY29uc3QgY2lyY2xlID0gZ0J1bGxldHMuYXBwZW5kKFwicmVjdFwiKTtcbiAgICAgICAgY2lyY2xlLmF0dHIoXCJ4XCIsIHggLSAxMCk7XG4gICAgICAgIGNpcmNsZS5hdHRyKFwieVwiLCB5IC0gMTApO1xuICAgICAgICBjaXJjbGUuYXR0cihcImhlaWdodFwiLCAyMCk7XG4gICAgICAgIGNpcmNsZS5hdHRyKFwid2lkdGhcIiwgMjApO1xuICAgICAgICBjaXJjbGUuYXR0cihcbiAgICAgICAgICBcImNsYXNzXCIsXG4gICAgICAgICAgYGNvbW1pdCAke2NvbW1pdDIuaWR9IGNvbW1pdC1oaWdobGlnaHQke2JyYW5jaFBvc1tjb21taXQyLmJyYW5jaF0uaW5kZXggJSBUSEVNRV9DT0xPUl9MSU1JVH0gJHt0eXBlQ2xhc3N9LW91dGVyYFxuICAgICAgICApO1xuICAgICAgICBnQnVsbGV0cy5hcHBlbmQoXCJyZWN0XCIpLmF0dHIoXCJ4XCIsIHggLSA2KS5hdHRyKFwieVwiLCB5IC0gNikuYXR0cihcImhlaWdodFwiLCAxMikuYXR0cihcIndpZHRoXCIsIDEyKS5hdHRyKFxuICAgICAgICAgIFwiY2xhc3NcIixcbiAgICAgICAgICBgY29tbWl0ICR7Y29tbWl0Mi5pZH0gY29tbWl0JHticmFuY2hQb3NbY29tbWl0Mi5icmFuY2hdLmluZGV4ICUgVEhFTUVfQ09MT1JfTElNSVR9ICR7dHlwZUNsYXNzfS1pbm5lcmBcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoY29tbWl0U3ltYm9sVHlwZSA9PT0gY29tbWl0VHlwZS5DSEVSUllfUElDSykge1xuICAgICAgICBnQnVsbGV0cy5hcHBlbmQoXCJjaXJjbGVcIikuYXR0cihcImN4XCIsIHgpLmF0dHIoXCJjeVwiLCB5KS5hdHRyKFwiclwiLCAxMCkuYXR0cihcImNsYXNzXCIsIGBjb21taXQgJHtjb21taXQyLmlkfSAke3R5cGVDbGFzc31gKTtcbiAgICAgICAgZ0J1bGxldHMuYXBwZW5kKFwiY2lyY2xlXCIpLmF0dHIoXCJjeFwiLCB4IC0gMykuYXR0cihcImN5XCIsIHkgKyAyKS5hdHRyKFwiclwiLCAyLjc1KS5hdHRyKFwiZmlsbFwiLCBcIiNmZmZcIikuYXR0cihcImNsYXNzXCIsIGBjb21taXQgJHtjb21taXQyLmlkfSAke3R5cGVDbGFzc31gKTtcbiAgICAgICAgZ0J1bGxldHMuYXBwZW5kKFwiY2lyY2xlXCIpLmF0dHIoXCJjeFwiLCB4ICsgMykuYXR0cihcImN5XCIsIHkgKyAyKS5hdHRyKFwiclwiLCAyLjc1KS5hdHRyKFwiZmlsbFwiLCBcIiNmZmZcIikuYXR0cihcImNsYXNzXCIsIGBjb21taXQgJHtjb21taXQyLmlkfSAke3R5cGVDbGFzc31gKTtcbiAgICAgICAgZ0J1bGxldHMuYXBwZW5kKFwibGluZVwiKS5hdHRyKFwieDFcIiwgeCArIDMpLmF0dHIoXCJ5MVwiLCB5ICsgMSkuYXR0cihcIngyXCIsIHgpLmF0dHIoXCJ5MlwiLCB5IC0gNSkuYXR0cihcInN0cm9rZVwiLCBcIiNmZmZcIikuYXR0cihcImNsYXNzXCIsIGBjb21taXQgJHtjb21taXQyLmlkfSAke3R5cGVDbGFzc31gKTtcbiAgICAgICAgZ0J1bGxldHMuYXBwZW5kKFwibGluZVwiKS5hdHRyKFwieDFcIiwgeCAtIDMpLmF0dHIoXCJ5MVwiLCB5ICsgMSkuYXR0cihcIngyXCIsIHgpLmF0dHIoXCJ5MlwiLCB5IC0gNSkuYXR0cihcInN0cm9rZVwiLCBcIiNmZmZcIikuYXR0cihcImNsYXNzXCIsIGBjb21taXQgJHtjb21taXQyLmlkfSAke3R5cGVDbGFzc31gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGNpcmNsZSA9IGdCdWxsZXRzLmFwcGVuZChcImNpcmNsZVwiKTtcbiAgICAgICAgY2lyY2xlLmF0dHIoXCJjeFwiLCB4KTtcbiAgICAgICAgY2lyY2xlLmF0dHIoXCJjeVwiLCB5KTtcbiAgICAgICAgY2lyY2xlLmF0dHIoXCJyXCIsIGNvbW1pdDIudHlwZSA9PT0gY29tbWl0VHlwZS5NRVJHRSA/IDkgOiAxMCk7XG4gICAgICAgIGNpcmNsZS5hdHRyKFxuICAgICAgICAgIFwiY2xhc3NcIixcbiAgICAgICAgICBgY29tbWl0ICR7Y29tbWl0Mi5pZH0gY29tbWl0JHticmFuY2hQb3NbY29tbWl0Mi5icmFuY2hdLmluZGV4ICUgVEhFTUVfQ09MT1JfTElNSVR9YFxuICAgICAgICApO1xuICAgICAgICBpZiAoY29tbWl0U3ltYm9sVHlwZSA9PT0gY29tbWl0VHlwZS5NRVJHRSkge1xuICAgICAgICAgIGNvbnN0IGNpcmNsZTIgPSBnQnVsbGV0cy5hcHBlbmQoXCJjaXJjbGVcIik7XG4gICAgICAgICAgY2lyY2xlMi5hdHRyKFwiY3hcIiwgeCk7XG4gICAgICAgICAgY2lyY2xlMi5hdHRyKFwiY3lcIiwgeSk7XG4gICAgICAgICAgY2lyY2xlMi5hdHRyKFwiclwiLCA2KTtcbiAgICAgICAgICBjaXJjbGUyLmF0dHIoXG4gICAgICAgICAgICBcImNsYXNzXCIsXG4gICAgICAgICAgICBgY29tbWl0ICR7dHlwZUNsYXNzfSAke2NvbW1pdDIuaWR9IGNvbW1pdCR7YnJhbmNoUG9zW2NvbW1pdDIuYnJhbmNoXS5pbmRleCAlIFRIRU1FX0NPTE9SX0xJTUlUfWBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb21taXRTeW1ib2xUeXBlID09PSBjb21taXRUeXBlLlJFVkVSU0UpIHtcbiAgICAgICAgICBjb25zdCBjcm9zcyA9IGdCdWxsZXRzLmFwcGVuZChcInBhdGhcIik7XG4gICAgICAgICAgY3Jvc3MuYXR0cihcImRcIiwgYE0gJHt4IC0gNX0sJHt5IC0gNX1MJHt4ICsgNX0sJHt5ICsgNX1NJHt4IC0gNX0sJHt5ICsgNX1MJHt4ICsgNX0sJHt5IC0gNX1gKS5hdHRyKFxuICAgICAgICAgICAgXCJjbGFzc1wiLFxuICAgICAgICAgICAgYGNvbW1pdCAke3R5cGVDbGFzc30gJHtjb21taXQyLmlkfSBjb21taXQke2JyYW5jaFBvc1tjb21taXQyLmJyYW5jaF0uaW5kZXggJSBUSEVNRV9DT0xPUl9MSU1JVH1gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGlyID09PSBcIlRCXCIpIHtcbiAgICAgIGNvbW1pdFBvc1tjb21taXQyLmlkXSA9IHsgeCwgeTogcG9zV2l0aE9mZnNldCB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21taXRQb3NbY29tbWl0Mi5pZF0gPSB7IHg6IHBvc1dpdGhPZmZzZXQsIHkgfTtcbiAgICB9XG4gICAgaWYgKG1vZGlmeUdyYXBoKSB7XG4gICAgICBjb25zdCBweCA9IDQ7XG4gICAgICBjb25zdCBweSA9IDI7XG4gICAgICBpZiAoY29tbWl0Mi50eXBlICE9PSBjb21taXRUeXBlLkNIRVJSWV9QSUNLICYmIChjb21taXQyLmN1c3RvbUlkICYmIGNvbW1pdDIudHlwZSA9PT0gY29tbWl0VHlwZS5NRVJHRSB8fCBjb21taXQyLnR5cGUgIT09IGNvbW1pdFR5cGUuTUVSR0UpICYmIGdpdEdyYXBoQ29uZmlnLnNob3dDb21taXRMYWJlbCkge1xuICAgICAgICBjb25zdCB3cmFwcGVyID0gZ0xhYmVscy5hcHBlbmQoXCJnXCIpO1xuICAgICAgICBjb25zdCBsYWJlbEJrZyA9IHdyYXBwZXIuaW5zZXJ0KFwicmVjdFwiKS5hdHRyKFwiY2xhc3NcIiwgXCJjb21taXQtbGFiZWwtYmtnXCIpO1xuICAgICAgICBjb25zdCB0ZXh0ID0gd3JhcHBlci5hcHBlbmQoXCJ0ZXh0XCIpLmF0dHIoXCJ4XCIsIHBvcykuYXR0cihcInlcIiwgeSArIDI1KS5hdHRyKFwiY2xhc3NcIiwgXCJjb21taXQtbGFiZWxcIikudGV4dChjb21taXQyLmlkKTtcbiAgICAgICAgbGV0IGJib3ggPSB0ZXh0Lm5vZGUoKS5nZXRCQm94KCk7XG4gICAgICAgIGxhYmVsQmtnLmF0dHIoXCJ4XCIsIHBvc1dpdGhPZmZzZXQgLSBiYm94LndpZHRoIC8gMiAtIHB5KS5hdHRyKFwieVwiLCB5ICsgMTMuNSkuYXR0cihcIndpZHRoXCIsIGJib3gud2lkdGggKyAyICogcHkpLmF0dHIoXCJoZWlnaHRcIiwgYmJveC5oZWlnaHQgKyAyICogcHkpO1xuICAgICAgICBpZiAoZGlyID09PSBcIlRCXCIpIHtcbiAgICAgICAgICBsYWJlbEJrZy5hdHRyKFwieFwiLCB4IC0gKGJib3gud2lkdGggKyA0ICogcHggKyA1KSkuYXR0cihcInlcIiwgeSAtIDEyKTtcbiAgICAgICAgICB0ZXh0LmF0dHIoXCJ4XCIsIHggLSAoYmJveC53aWR0aCArIDQgKiBweCkpLmF0dHIoXCJ5XCIsIHkgKyBiYm94LmhlaWdodCAtIDEyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlyICE9PSBcIlRCXCIpIHtcbiAgICAgICAgICB0ZXh0LmF0dHIoXCJ4XCIsIHBvc1dpdGhPZmZzZXQgLSBiYm94LndpZHRoIC8gMik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdpdEdyYXBoQ29uZmlnLnJvdGF0ZUNvbW1pdExhYmVsKSB7XG4gICAgICAgICAgaWYgKGRpciA9PT0gXCJUQlwiKSB7XG4gICAgICAgICAgICB0ZXh0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJyb3RhdGUoLTQ1LCBcIiArIHggKyBcIiwgXCIgKyB5ICsgXCIpXCIpO1xuICAgICAgICAgICAgbGFiZWxCa2cuYXR0cihcInRyYW5zZm9ybVwiLCBcInJvdGF0ZSgtNDUsIFwiICsgeCArIFwiLCBcIiArIHkgKyBcIilcIik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCByX3ggPSAtNy41IC0gKGJib3gud2lkdGggKyAxMCkgLyAyNSAqIDkuNTtcbiAgICAgICAgICAgIGxldCByX3kgPSAxMCArIGJib3gud2lkdGggLyAyNSAqIDguNTtcbiAgICAgICAgICAgIHdyYXBwZXIuYXR0cihcbiAgICAgICAgICAgICAgXCJ0cmFuc2Zvcm1cIixcbiAgICAgICAgICAgICAgXCJ0cmFuc2xhdGUoXCIgKyByX3ggKyBcIiwgXCIgKyByX3kgKyBcIikgcm90YXRlKC00NSwgXCIgKyBwb3MgKyBcIiwgXCIgKyB5ICsgXCIpXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY29tbWl0Mi50YWcpIHtcbiAgICAgICAgY29uc3QgcmVjdCA9IGdMYWJlbHMuaW5zZXJ0KFwicG9seWdvblwiKTtcbiAgICAgICAgY29uc3QgaG9sZSA9IGdMYWJlbHMuYXBwZW5kKFwiY2lyY2xlXCIpO1xuICAgICAgICBjb25zdCB0YWcgPSBnTGFiZWxzLmFwcGVuZChcInRleHRcIikuYXR0cihcInlcIiwgeSAtIDE2KS5hdHRyKFwiY2xhc3NcIiwgXCJ0YWctbGFiZWxcIikudGV4dChjb21taXQyLnRhZyk7XG4gICAgICAgIGxldCB0YWdCYm94ID0gdGFnLm5vZGUoKS5nZXRCQm94KCk7XG4gICAgICAgIHRhZy5hdHRyKFwieFwiLCBwb3NXaXRoT2Zmc2V0IC0gdGFnQmJveC53aWR0aCAvIDIpO1xuICAgICAgICBjb25zdCBoMiA9IHRhZ0Jib3guaGVpZ2h0IC8gMjtcbiAgICAgICAgY29uc3QgbHkgPSB5IC0gMTkuMjtcbiAgICAgICAgcmVjdC5hdHRyKFwiY2xhc3NcIiwgXCJ0YWctbGFiZWwtYmtnXCIpLmF0dHIoXG4gICAgICAgICAgXCJwb2ludHNcIixcbiAgICAgICAgICBgXG4gICAgICAgICAgJHtwb3MgLSB0YWdCYm94LndpZHRoIC8gMiAtIHB4IC8gMn0sJHtseSArIHB5fVxuICAgICAgICAgICR7cG9zIC0gdGFnQmJveC53aWR0aCAvIDIgLSBweCAvIDJ9LCR7bHkgLSBweX1cbiAgICAgICAgICAke3Bvc1dpdGhPZmZzZXQgLSB0YWdCYm94LndpZHRoIC8gMiAtIHB4fSwke2x5IC0gaDIgLSBweX1cbiAgICAgICAgICAke3Bvc1dpdGhPZmZzZXQgKyB0YWdCYm94LndpZHRoIC8gMiArIHB4fSwke2x5IC0gaDIgLSBweX1cbiAgICAgICAgICAke3Bvc1dpdGhPZmZzZXQgKyB0YWdCYm94LndpZHRoIC8gMiArIHB4fSwke2x5ICsgaDIgKyBweX1cbiAgICAgICAgICAke3Bvc1dpdGhPZmZzZXQgLSB0YWdCYm94LndpZHRoIC8gMiAtIHB4fSwke2x5ICsgaDIgKyBweX1gXG4gICAgICAgICk7XG4gICAgICAgIGhvbGUuYXR0cihcImN4XCIsIHBvcyAtIHRhZ0Jib3gud2lkdGggLyAyICsgcHggLyAyKS5hdHRyKFwiY3lcIiwgbHkpLmF0dHIoXCJyXCIsIDEuNSkuYXR0cihcImNsYXNzXCIsIFwidGFnLWhvbGVcIik7XG4gICAgICAgIGlmIChkaXIgPT09IFwiVEJcIikge1xuICAgICAgICAgIHJlY3QuYXR0cihcImNsYXNzXCIsIFwidGFnLWxhYmVsLWJrZ1wiKS5hdHRyKFxuICAgICAgICAgICAgXCJwb2ludHNcIixcbiAgICAgICAgICAgIGBcbiAgICAgICAgICAgICR7eH0sJHtwb3MgKyBweX1cbiAgICAgICAgICAgICR7eH0sJHtwb3MgLSBweX1cbiAgICAgICAgICAgICR7eCArIGxheW91dE9mZnNldH0sJHtwb3MgLSBoMiAtIHB5fVxuICAgICAgICAgICAgJHt4ICsgbGF5b3V0T2Zmc2V0ICsgdGFnQmJveC53aWR0aCArIHB4fSwke3BvcyAtIGgyIC0gcHl9XG4gICAgICAgICAgICAke3ggKyBsYXlvdXRPZmZzZXQgKyB0YWdCYm94LndpZHRoICsgcHh9LCR7cG9zICsgaDIgKyBweX1cbiAgICAgICAgICAgICR7eCArIGxheW91dE9mZnNldH0sJHtwb3MgKyBoMiArIHB5fWBcbiAgICAgICAgICApLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMTIsMTIpIHJvdGF0ZSg0NSwgXCIgKyB4ICsgXCIsXCIgKyBwb3MgKyBcIilcIik7XG4gICAgICAgICAgaG9sZS5hdHRyKFwiY3hcIiwgeCArIHB4IC8gMikuYXR0cihcImN5XCIsIHBvcykuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgxMiwxMikgcm90YXRlKDQ1LCBcIiArIHggKyBcIixcIiArIHBvcyArIFwiKVwiKTtcbiAgICAgICAgICB0YWcuYXR0cihcInhcIiwgeCArIDUpLmF0dHIoXCJ5XCIsIHBvcyArIDMpLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMTQsMTQpIHJvdGF0ZSg0NSwgXCIgKyB4ICsgXCIsXCIgKyBwb3MgKyBcIilcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcG9zICs9IGNvbW1pdFN0ZXAgKyBsYXlvdXRPZmZzZXQ7XG4gICAgaWYgKHBvcyA+IG1heFBvcykge1xuICAgICAgbWF4UG9zID0gcG9zO1xuICAgIH1cbiAgfSk7XG59O1xuY29uc3Qgc2hvdWxkUmVyb3V0ZUFycm93ID0gKGNvbW1pdEEsIGNvbW1pdEIsIHAxLCBwMiwgYWxsQ29tbWl0cykgPT4ge1xuICBjb25zdCBjb21taXRCSXNGdXJ0aGVzdCA9IGRpciA9PT0gXCJUQlwiID8gcDEueCA8IHAyLnggOiBwMS55IDwgcDIueTtcbiAgY29uc3QgYnJhbmNoVG9HZXRDdXJ2ZSA9IGNvbW1pdEJJc0Z1cnRoZXN0ID8gY29tbWl0Qi5icmFuY2ggOiBjb21taXRBLmJyYW5jaDtcbiAgY29uc3QgaXNPbkJyYW5jaFRvR2V0Q3VydmUgPSAoeCkgPT4geC5icmFuY2ggPT09IGJyYW5jaFRvR2V0Q3VydmU7XG4gIGNvbnN0IGlzQmV0d2VlbkNvbW1pdHMgPSAoeCkgPT4geC5zZXEgPiBjb21taXRBLnNlcSAmJiB4LnNlcSA8IGNvbW1pdEIuc2VxO1xuICByZXR1cm4gT2JqZWN0LnZhbHVlcyhhbGxDb21taXRzKS5zb21lKChjb21taXRYKSA9PiB7XG4gICAgcmV0dXJuIGlzQmV0d2VlbkNvbW1pdHMoY29tbWl0WCkgJiYgaXNPbkJyYW5jaFRvR2V0Q3VydmUoY29tbWl0WCk7XG4gIH0pO1xufTtcbmNvbnN0IGZpbmRMYW5lID0gKHkxLCB5MiwgZGVwdGggPSAwKSA9PiB7XG4gIGNvbnN0IGNhbmRpZGF0ZSA9IHkxICsgTWF0aC5hYnMoeTEgLSB5MikgLyAyO1xuICBpZiAoZGVwdGggPiA1KSB7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZTtcbiAgfVxuICBsZXQgb2sgPSBsYW5lcy5ldmVyeSgobGFuZSkgPT4gTWF0aC5hYnMobGFuZSAtIGNhbmRpZGF0ZSkgPj0gMTApO1xuICBpZiAob2spIHtcbiAgICBsYW5lcy5wdXNoKGNhbmRpZGF0ZSk7XG4gICAgcmV0dXJuIGNhbmRpZGF0ZTtcbiAgfVxuICBjb25zdCBkaWZmID0gTWF0aC5hYnMoeTEgLSB5Mik7XG4gIHJldHVybiBmaW5kTGFuZSh5MSwgeTIgLSBkaWZmIC8gNSwgZGVwdGggKyAxKTtcbn07XG5jb25zdCBkcmF3QXJyb3cgPSAoc3ZnLCBjb21taXRBLCBjb21taXRCLCBhbGxDb21taXRzKSA9PiB7XG4gIGNvbnN0IHAxID0gY29tbWl0UG9zW2NvbW1pdEEuaWRdO1xuICBjb25zdCBwMiA9IGNvbW1pdFBvc1tjb21taXRCLmlkXTtcbiAgY29uc3QgYXJyb3dOZWVkc1Jlcm91dGluZyA9IHNob3VsZFJlcm91dGVBcnJvdyhjb21taXRBLCBjb21taXRCLCBwMSwgcDIsIGFsbENvbW1pdHMpO1xuICBsZXQgYXJjID0gXCJcIjtcbiAgbGV0IGFyYzIgPSBcIlwiO1xuICBsZXQgcmFkaXVzID0gMDtcbiAgbGV0IG9mZnNldCA9IDA7XG4gIGxldCBjb2xvckNsYXNzTnVtID0gYnJhbmNoUG9zW2NvbW1pdEIuYnJhbmNoXS5pbmRleDtcbiAgaWYgKGNvbW1pdEIudHlwZSA9PT0gY29tbWl0VHlwZS5NRVJHRSAmJiBjb21taXRBLmlkICE9PSBjb21taXRCLnBhcmVudHNbMF0pIHtcbiAgICBjb2xvckNsYXNzTnVtID0gYnJhbmNoUG9zW2NvbW1pdEEuYnJhbmNoXS5pbmRleDtcbiAgfVxuICBsZXQgbGluZURlZjtcbiAgaWYgKGFycm93TmVlZHNSZXJvdXRpbmcpIHtcbiAgICBhcmMgPSBcIkEgMTAgMTAsIDAsIDAsIDAsXCI7XG4gICAgYXJjMiA9IFwiQSAxMCAxMCwgMCwgMCwgMSxcIjtcbiAgICByYWRpdXMgPSAxMDtcbiAgICBvZmZzZXQgPSAxMDtcbiAgICBjb25zdCBsaW5lWSA9IHAxLnkgPCBwMi55ID8gZmluZExhbmUocDEueSwgcDIueSkgOiBmaW5kTGFuZShwMi55LCBwMS55KTtcbiAgICBjb25zdCBsaW5lWCA9IHAxLnggPCBwMi54ID8gZmluZExhbmUocDEueCwgcDIueCkgOiBmaW5kTGFuZShwMi54LCBwMS54KTtcbiAgICBpZiAoZGlyID09PSBcIlRCXCIpIHtcbiAgICAgIGlmIChwMS54IDwgcDIueCkge1xuICAgICAgICBsaW5lRGVmID0gYE0gJHtwMS54fSAke3AxLnl9IEwgJHtsaW5lWCAtIHJhZGl1c30gJHtwMS55fSAke2FyYzJ9ICR7bGluZVh9ICR7cDEueSArIG9mZnNldH0gTCAke2xpbmVYfSAke3AyLnkgLSByYWRpdXN9ICR7YXJjfSAke2xpbmVYICsgb2Zmc2V0fSAke3AyLnl9IEwgJHtwMi54fSAke3AyLnl9YDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbG9yQ2xhc3NOdW0gPSBicmFuY2hQb3NbY29tbWl0QS5icmFuY2hdLmluZGV4O1xuICAgICAgICBsaW5lRGVmID0gYE0gJHtwMS54fSAke3AxLnl9IEwgJHtsaW5lWCArIHJhZGl1c30gJHtwMS55fSAke2FyY30gJHtsaW5lWH0gJHtwMS55ICsgb2Zmc2V0fSBMICR7bGluZVh9ICR7cDIueSAtIHJhZGl1c30gJHthcmMyfSAke2xpbmVYIC0gb2Zmc2V0fSAke3AyLnl9IEwgJHtwMi54fSAke3AyLnl9YDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHAxLnkgPCBwMi55KSB7XG4gICAgICAgIGxpbmVEZWYgPSBgTSAke3AxLnh9ICR7cDEueX0gTCAke3AxLnh9ICR7bGluZVkgLSByYWRpdXN9ICR7YXJjfSAke3AxLnggKyBvZmZzZXR9ICR7bGluZVl9IEwgJHtwMi54IC0gcmFkaXVzfSAke2xpbmVZfSAke2FyYzJ9ICR7cDIueH0gJHtsaW5lWSArIG9mZnNldH0gTCAke3AyLnh9ICR7cDIueX1gO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29sb3JDbGFzc051bSA9IGJyYW5jaFBvc1tjb21taXRBLmJyYW5jaF0uaW5kZXg7XG4gICAgICAgIGxpbmVEZWYgPSBgTSAke3AxLnh9ICR7cDEueX0gTCAke3AxLnh9ICR7bGluZVkgKyByYWRpdXN9ICR7YXJjMn0gJHtwMS54ICsgb2Zmc2V0fSAke2xpbmVZfSBMICR7cDIueCAtIHJhZGl1c30gJHtsaW5lWX0gJHthcmN9ICR7cDIueH0gJHtsaW5lWSAtIG9mZnNldH0gTCAke3AyLnh9ICR7cDIueX1gO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBhcmMgPSBcIkEgMjAgMjAsIDAsIDAsIDAsXCI7XG4gICAgYXJjMiA9IFwiQSAyMCAyMCwgMCwgMCwgMSxcIjtcbiAgICByYWRpdXMgPSAyMDtcbiAgICBvZmZzZXQgPSAyMDtcbiAgICBpZiAoZGlyID09PSBcIlRCXCIpIHtcbiAgICAgIGlmIChwMS54IDwgcDIueCkge1xuICAgICAgICBpZiAoY29tbWl0Qi50eXBlID09PSBjb21taXRUeXBlLk1FUkdFICYmIGNvbW1pdEEuaWQgIT09IGNvbW1pdEIucGFyZW50c1swXSkge1xuICAgICAgICAgIGxpbmVEZWYgPSBgTSAke3AxLnh9ICR7cDEueX0gTCAke3AxLnh9ICR7cDIueSAtIHJhZGl1c30gJHthcmN9ICR7cDEueCArIG9mZnNldH0gJHtwMi55fSBMICR7cDIueH0gJHtwMi55fWA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGluZURlZiA9IGBNICR7cDEueH0gJHtwMS55fSBMICR7cDIueCAtIHJhZGl1c30gJHtwMS55fSAke2FyYzJ9ICR7cDIueH0gJHtwMS55ICsgb2Zmc2V0fSBMICR7cDIueH0gJHtwMi55fWA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwMS54ID4gcDIueCkge1xuICAgICAgICBhcmMgPSBcIkEgMjAgMjAsIDAsIDAsIDAsXCI7XG4gICAgICAgIGFyYzIgPSBcIkEgMjAgMjAsIDAsIDAsIDEsXCI7XG4gICAgICAgIHJhZGl1cyA9IDIwO1xuICAgICAgICBvZmZzZXQgPSAyMDtcbiAgICAgICAgaWYgKGNvbW1pdEIudHlwZSA9PT0gY29tbWl0VHlwZS5NRVJHRSAmJiBjb21taXRBLmlkICE9PSBjb21taXRCLnBhcmVudHNbMF0pIHtcbiAgICAgICAgICBsaW5lRGVmID0gYE0gJHtwMS54fSAke3AxLnl9IEwgJHtwMS54fSAke3AyLnkgLSByYWRpdXN9ICR7YXJjMn0gJHtwMS54IC0gb2Zmc2V0fSAke3AyLnl9IEwgJHtwMi54fSAke3AyLnl9YDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsaW5lRGVmID0gYE0gJHtwMS54fSAke3AxLnl9IEwgJHtwMi54ICsgcmFkaXVzfSAke3AxLnl9ICR7YXJjfSAke3AyLnh9ICR7cDEueSArIG9mZnNldH0gTCAke3AyLnh9ICR7cDIueX1gO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocDEueCA9PT0gcDIueCkge1xuICAgICAgICBsaW5lRGVmID0gYE0gJHtwMS54fSAke3AxLnl9IEwgJHtwMi54fSAke3AyLnl9YDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHAxLnkgPCBwMi55KSB7XG4gICAgICAgIGlmIChjb21taXRCLnR5cGUgPT09IGNvbW1pdFR5cGUuTUVSR0UgJiYgY29tbWl0QS5pZCAhPT0gY29tbWl0Qi5wYXJlbnRzWzBdKSB7XG4gICAgICAgICAgbGluZURlZiA9IGBNICR7cDEueH0gJHtwMS55fSBMICR7cDIueCAtIHJhZGl1c30gJHtwMS55fSAke2FyYzJ9ICR7cDIueH0gJHtwMS55ICsgb2Zmc2V0fSBMICR7cDIueH0gJHtwMi55fWA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGluZURlZiA9IGBNICR7cDEueH0gJHtwMS55fSBMICR7cDEueH0gJHtwMi55IC0gcmFkaXVzfSAke2FyY30gJHtwMS54ICsgb2Zmc2V0fSAke3AyLnl9IEwgJHtwMi54fSAke3AyLnl9YDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHAxLnkgPiBwMi55KSB7XG4gICAgICAgIGlmIChjb21taXRCLnR5cGUgPT09IGNvbW1pdFR5cGUuTUVSR0UgJiYgY29tbWl0QS5pZCAhPT0gY29tbWl0Qi5wYXJlbnRzWzBdKSB7XG4gICAgICAgICAgbGluZURlZiA9IGBNICR7cDEueH0gJHtwMS55fSBMICR7cDIueCAtIHJhZGl1c30gJHtwMS55fSAke2FyY30gJHtwMi54fSAke3AxLnkgLSBvZmZzZXR9IEwgJHtwMi54fSAke3AyLnl9YDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsaW5lRGVmID0gYE0gJHtwMS54fSAke3AxLnl9IEwgJHtwMS54fSAke3AyLnkgKyByYWRpdXN9ICR7YXJjMn0gJHtwMS54ICsgb2Zmc2V0fSAke3AyLnl9IEwgJHtwMi54fSAke3AyLnl9YDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHAxLnkgPT09IHAyLnkpIHtcbiAgICAgICAgbGluZURlZiA9IGBNICR7cDEueH0gJHtwMS55fSBMICR7cDIueH0gJHtwMi55fWA7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHN2Zy5hcHBlbmQoXCJwYXRoXCIpLmF0dHIoXCJkXCIsIGxpbmVEZWYpLmF0dHIoXCJjbGFzc1wiLCBcImFycm93IGFycm93XCIgKyBjb2xvckNsYXNzTnVtICUgVEhFTUVfQ09MT1JfTElNSVQpO1xufTtcbmNvbnN0IGRyYXdBcnJvd3MgPSAoc3ZnLCBjb21taXRzMikgPT4ge1xuICBjb25zdCBnQXJyb3dzID0gc3ZnLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsIFwiY29tbWl0LWFycm93c1wiKTtcbiAgT2JqZWN0LmtleXMoY29tbWl0czIpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGNvbnN0IGNvbW1pdDIgPSBjb21taXRzMltrZXldO1xuICAgIGlmIChjb21taXQyLnBhcmVudHMgJiYgY29tbWl0Mi5wYXJlbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbW1pdDIucGFyZW50cy5mb3JFYWNoKChwYXJlbnQpID0+IHtcbiAgICAgICAgZHJhd0Fycm93KGdBcnJvd3MsIGNvbW1pdHMyW3BhcmVudF0sIGNvbW1pdDIsIGNvbW1pdHMyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59O1xuY29uc3QgZHJhd0JyYW5jaGVzID0gKHN2ZywgYnJhbmNoZXMyKSA9PiB7XG4gIGNvbnN0IGdpdEdyYXBoQ29uZmlnID0gZ2V0Q29uZmlnKCkuZ2l0R3JhcGg7XG4gIGNvbnN0IGcgPSBzdmcuYXBwZW5kKFwiZ1wiKTtcbiAgYnJhbmNoZXMyLmZvckVhY2goKGJyYW5jaDIsIGluZGV4KSA9PiB7XG4gICAgY29uc3QgYWRqdXN0SW5kZXhGb3JUaGVtZSA9IGluZGV4ICUgVEhFTUVfQ09MT1JfTElNSVQ7XG4gICAgY29uc3QgcG9zID0gYnJhbmNoUG9zW2JyYW5jaDIubmFtZV0ucG9zO1xuICAgIGNvbnN0IGxpbmUgPSBnLmFwcGVuZChcImxpbmVcIik7XG4gICAgbGluZS5hdHRyKFwieDFcIiwgMCk7XG4gICAgbGluZS5hdHRyKFwieTFcIiwgcG9zKTtcbiAgICBsaW5lLmF0dHIoXCJ4MlwiLCBtYXhQb3MpO1xuICAgIGxpbmUuYXR0cihcInkyXCIsIHBvcyk7XG4gICAgbGluZS5hdHRyKFwiY2xhc3NcIiwgXCJicmFuY2ggYnJhbmNoXCIgKyBhZGp1c3RJbmRleEZvclRoZW1lKTtcbiAgICBpZiAoZGlyID09PSBcIlRCXCIpIHtcbiAgICAgIGxpbmUuYXR0cihcInkxXCIsIDMwKTtcbiAgICAgIGxpbmUuYXR0cihcIngxXCIsIHBvcyk7XG4gICAgICBsaW5lLmF0dHIoXCJ5MlwiLCBtYXhQb3MpO1xuICAgICAgbGluZS5hdHRyKFwieDJcIiwgcG9zKTtcbiAgICB9XG4gICAgbGFuZXMucHVzaChwb3MpO1xuICAgIGxldCBuYW1lID0gYnJhbmNoMi5uYW1lO1xuICAgIGNvbnN0IGxhYmVsRWxlbWVudCA9IGRyYXdUZXh0KG5hbWUpO1xuICAgIGNvbnN0IGJrZyA9IGcuaW5zZXJ0KFwicmVjdFwiKTtcbiAgICBjb25zdCBicmFuY2hMYWJlbCA9IGcuaW5zZXJ0KFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgXCJicmFuY2hMYWJlbFwiKTtcbiAgICBjb25zdCBsYWJlbCA9IGJyYW5jaExhYmVsLmluc2VydChcImdcIikuYXR0cihcImNsYXNzXCIsIFwibGFiZWwgYnJhbmNoLWxhYmVsXCIgKyBhZGp1c3RJbmRleEZvclRoZW1lKTtcbiAgICBsYWJlbC5ub2RlKCkuYXBwZW5kQ2hpbGQobGFiZWxFbGVtZW50KTtcbiAgICBsZXQgYmJveCA9IGxhYmVsRWxlbWVudC5nZXRCQm94KCk7XG4gICAgYmtnLmF0dHIoXCJjbGFzc1wiLCBcImJyYW5jaExhYmVsQmtnIGxhYmVsXCIgKyBhZGp1c3RJbmRleEZvclRoZW1lKS5hdHRyKFwicnhcIiwgNCkuYXR0cihcInJ5XCIsIDQpLmF0dHIoXCJ4XCIsIC1iYm94LndpZHRoIC0gNCAtIChnaXRHcmFwaENvbmZpZy5yb3RhdGVDb21taXRMYWJlbCA9PT0gdHJ1ZSA/IDMwIDogMCkpLmF0dHIoXCJ5XCIsIC1iYm94LmhlaWdodCAvIDIgKyA4KS5hdHRyKFwid2lkdGhcIiwgYmJveC53aWR0aCArIDE4KS5hdHRyKFwiaGVpZ2h0XCIsIGJib3guaGVpZ2h0ICsgNCk7XG4gICAgbGFiZWwuYXR0cihcbiAgICAgIFwidHJhbnNmb3JtXCIsXG4gICAgICBcInRyYW5zbGF0ZShcIiArICgtYmJveC53aWR0aCAtIDE0IC0gKGdpdEdyYXBoQ29uZmlnLnJvdGF0ZUNvbW1pdExhYmVsID09PSB0cnVlID8gMzAgOiAwKSkgKyBcIiwgXCIgKyAocG9zIC0gYmJveC5oZWlnaHQgLyAyIC0gMSkgKyBcIilcIlxuICAgICk7XG4gICAgaWYgKGRpciA9PT0gXCJUQlwiKSB7XG4gICAgICBia2cuYXR0cihcInhcIiwgcG9zIC0gYmJveC53aWR0aCAvIDIgLSAxMCkuYXR0cihcInlcIiwgMCk7XG4gICAgICBsYWJlbC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgKHBvcyAtIGJib3gud2lkdGggLyAyIC0gNSkgKyBcIiwgMClcIik7XG4gICAgfVxuICAgIGlmIChkaXIgIT09IFwiVEJcIikge1xuICAgICAgYmtnLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoLTE5LCBcIiArIChwb3MgLSBiYm94LmhlaWdodCAvIDIpICsgXCIpXCIpO1xuICAgIH1cbiAgfSk7XG59O1xuY29uc3QgZHJhdyA9IGZ1bmN0aW9uKHR4dCwgaWQsIHZlciwgZGlhZ09iaikge1xuICBjbGVhcigpO1xuICBjb25zdCBjb25mID0gZ2V0Q29uZmlnKCk7XG4gIGNvbnN0IGdpdEdyYXBoQ29uZmlnID0gY29uZi5naXRHcmFwaDtcbiAgbG9nLmRlYnVnKFwiaW4gZ2l0Z3JhcGggcmVuZGVyZXJcIiwgdHh0ICsgXCJcXG5cIiwgXCJpZDpcIiwgaWQsIHZlcik7XG4gIGFsbENvbW1pdHNEaWN0ID0gZGlhZ09iai5kYi5nZXRDb21taXRzKCk7XG4gIGNvbnN0IGJyYW5jaGVzMiA9IGRpYWdPYmouZGIuZ2V0QnJhbmNoZXNBc09iakFycmF5KCk7XG4gIGRpciA9IGRpYWdPYmouZGIuZ2V0RGlyZWN0aW9uKCk7XG4gIGNvbnN0IGRpYWdyYW0yID0gc2VsZWN0KGBbaWQ9XCIke2lkfVwiXWApO1xuICBsZXQgcG9zID0gMDtcbiAgYnJhbmNoZXMyLmZvckVhY2goKGJyYW5jaDIsIGluZGV4KSA9PiB7XG4gICAgY29uc3QgbGFiZWxFbGVtZW50ID0gZHJhd1RleHQoYnJhbmNoMi5uYW1lKTtcbiAgICBjb25zdCBnID0gZGlhZ3JhbTIuYXBwZW5kKFwiZ1wiKTtcbiAgICBjb25zdCBicmFuY2hMYWJlbCA9IGcuaW5zZXJ0KFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgXCJicmFuY2hMYWJlbFwiKTtcbiAgICBjb25zdCBsYWJlbCA9IGJyYW5jaExhYmVsLmluc2VydChcImdcIikuYXR0cihcImNsYXNzXCIsIFwibGFiZWwgYnJhbmNoLWxhYmVsXCIpO1xuICAgIGxhYmVsLm5vZGUoKS5hcHBlbmRDaGlsZChsYWJlbEVsZW1lbnQpO1xuICAgIGxldCBiYm94ID0gbGFiZWxFbGVtZW50LmdldEJCb3goKTtcbiAgICBicmFuY2hQb3NbYnJhbmNoMi5uYW1lXSA9IHsgcG9zLCBpbmRleCB9O1xuICAgIHBvcyArPSA1MCArIChnaXRHcmFwaENvbmZpZy5yb3RhdGVDb21taXRMYWJlbCA/IDQwIDogMCkgKyAoZGlyID09PSBcIlRCXCIgPyBiYm94LndpZHRoIC8gMiA6IDApO1xuICAgIGxhYmVsLnJlbW92ZSgpO1xuICAgIGJyYW5jaExhYmVsLnJlbW92ZSgpO1xuICAgIGcucmVtb3ZlKCk7XG4gIH0pO1xuICBkcmF3Q29tbWl0cyhkaWFncmFtMiwgYWxsQ29tbWl0c0RpY3QsIGZhbHNlKTtcbiAgaWYgKGdpdEdyYXBoQ29uZmlnLnNob3dCcmFuY2hlcykge1xuICAgIGRyYXdCcmFuY2hlcyhkaWFncmFtMiwgYnJhbmNoZXMyKTtcbiAgfVxuICBkcmF3QXJyb3dzKGRpYWdyYW0yLCBhbGxDb21taXRzRGljdCk7XG4gIGRyYXdDb21taXRzKGRpYWdyYW0yLCBhbGxDb21taXRzRGljdCwgdHJ1ZSk7XG4gIHV0aWxzLmluc2VydFRpdGxlKFxuICAgIGRpYWdyYW0yLFxuICAgIFwiZ2l0VGl0bGVUZXh0XCIsXG4gICAgZ2l0R3JhcGhDb25maWcudGl0bGVUb3BNYXJnaW4sXG4gICAgZGlhZ09iai5kYi5nZXREaWFncmFtVGl0bGUoKVxuICApO1xuICBzZXR1cEdyYXBoVmlld2JveChcbiAgICB2b2lkIDAsXG4gICAgZGlhZ3JhbTIsXG4gICAgZ2l0R3JhcGhDb25maWcuZGlhZ3JhbVBhZGRpbmcsXG4gICAgZ2l0R3JhcGhDb25maWcudXNlTWF4V2lkdGggPz8gY29uZi51c2VNYXhXaWR0aFxuICApO1xufTtcbmNvbnN0IGdpdEdyYXBoUmVuZGVyZXIgPSB7XG4gIGRyYXdcbn07XG5jb25zdCBnZXRTdHlsZXMgPSAob3B0aW9uczIpID0+IGBcbiAgLmNvbW1pdC1pZCxcbiAgLmNvbW1pdC1tc2csXG4gIC5icmFuY2gtbGFiZWwge1xuICAgIGZpbGw6IGxpZ2h0Z3JleTtcbiAgICBjb2xvcjogbGlnaHRncmV5O1xuICAgIGZvbnQtZmFtaWx5OiAndHJlYnVjaGV0IG1zJywgdmVyZGFuYSwgYXJpYWwsIHNhbnMtc2VyaWY7XG4gICAgZm9udC1mYW1pbHk6IHZhcigtLW1lcm1haWQtZm9udC1mYW1pbHkpO1xuICB9XG4gICR7WzAsIDEsIDIsIDMsIDQsIDUsIDYsIDddLm1hcChcbiAgKGkpID0+IGBcbiAgICAgICAgLmJyYW5jaC1sYWJlbCR7aX0geyBmaWxsOiAke29wdGlvbnMyW1wiZ2l0QnJhbmNoTGFiZWxcIiArIGldfTsgfVxuICAgICAgICAuY29tbWl0JHtpfSB7IHN0cm9rZTogJHtvcHRpb25zMltcImdpdFwiICsgaV19OyBmaWxsOiAke29wdGlvbnMyW1wiZ2l0XCIgKyBpXX07IH1cbiAgICAgICAgLmNvbW1pdC1oaWdobGlnaHQke2l9IHsgc3Ryb2tlOiAke29wdGlvbnMyW1wiZ2l0SW52XCIgKyBpXX07IGZpbGw6ICR7b3B0aW9uczJbXCJnaXRJbnZcIiArIGldfTsgfVxuICAgICAgICAubGFiZWwke2l9ICB7IGZpbGw6ICR7b3B0aW9uczJbXCJnaXRcIiArIGldfTsgfVxuICAgICAgICAuYXJyb3cke2l9IHsgc3Ryb2tlOiAke29wdGlvbnMyW1wiZ2l0XCIgKyBpXX07IH1cbiAgICAgICAgYFxuKS5qb2luKFwiXFxuXCIpfVxuXG4gIC5icmFuY2gge1xuICAgIHN0cm9rZS13aWR0aDogMTtcbiAgICBzdHJva2U6ICR7b3B0aW9uczIubGluZUNvbG9yfTtcbiAgICBzdHJva2UtZGFzaGFycmF5OiAyO1xuICB9XG4gIC5jb21taXQtbGFiZWwgeyBmb250LXNpemU6ICR7b3B0aW9uczIuY29tbWl0TGFiZWxGb250U2l6ZX07IGZpbGw6ICR7b3B0aW9uczIuY29tbWl0TGFiZWxDb2xvcn07fVxuICAuY29tbWl0LWxhYmVsLWJrZyB7IGZvbnQtc2l6ZTogJHtvcHRpb25zMi5jb21taXRMYWJlbEZvbnRTaXplfTsgZmlsbDogJHtvcHRpb25zMi5jb21taXRMYWJlbEJhY2tncm91bmR9OyBvcGFjaXR5OiAwLjU7IH1cbiAgLnRhZy1sYWJlbCB7IGZvbnQtc2l6ZTogJHtvcHRpb25zMi50YWdMYWJlbEZvbnRTaXplfTsgZmlsbDogJHtvcHRpb25zMi50YWdMYWJlbENvbG9yfTt9XG4gIC50YWctbGFiZWwtYmtnIHsgZmlsbDogJHtvcHRpb25zMi50YWdMYWJlbEJhY2tncm91bmR9OyBzdHJva2U6ICR7b3B0aW9uczIudGFnTGFiZWxCb3JkZXJ9OyB9XG4gIC50YWctaG9sZSB7IGZpbGw6ICR7b3B0aW9uczIudGV4dENvbG9yfTsgfVxuXG4gIC5jb21taXQtbWVyZ2Uge1xuICAgIHN0cm9rZTogJHtvcHRpb25zMi5wcmltYXJ5Q29sb3J9O1xuICAgIGZpbGw6ICR7b3B0aW9uczIucHJpbWFyeUNvbG9yfTtcbiAgfVxuICAuY29tbWl0LXJldmVyc2Uge1xuICAgIHN0cm9rZTogJHtvcHRpb25zMi5wcmltYXJ5Q29sb3J9O1xuICAgIGZpbGw6ICR7b3B0aW9uczIucHJpbWFyeUNvbG9yfTtcbiAgICBzdHJva2Utd2lkdGg6IDM7XG4gIH1cbiAgLmNvbW1pdC1oaWdobGlnaHQtb3V0ZXIge1xuICB9XG4gIC5jb21taXQtaGlnaGxpZ2h0LWlubmVyIHtcbiAgICBzdHJva2U6ICR7b3B0aW9uczIucHJpbWFyeUNvbG9yfTtcbiAgICBmaWxsOiAke29wdGlvbnMyLnByaW1hcnlDb2xvcn07XG4gIH1cblxuICAuYXJyb3cgeyBzdHJva2Utd2lkdGg6IDg7IHN0cm9rZS1saW5lY2FwOiByb3VuZDsgZmlsbDogbm9uZX1cbiAgLmdpdFRpdGxlVGV4dCB7XG4gICAgdGV4dC1hbmNob3I6IG1pZGRsZTtcbiAgICBmb250LXNpemU6IDE4cHg7XG4gICAgZmlsbDogJHtvcHRpb25zMi50ZXh0Q29sb3J9O1xuICB9XG5gO1xuY29uc3QgZ2l0R3JhcGhTdHlsZXMgPSBnZXRTdHlsZXM7XG5jb25zdCBkaWFncmFtID0ge1xuICBwYXJzZXI6IGdpdEdyYXBoUGFyc2VyLFxuICBkYjogZ2l0R3JhcGhEYixcbiAgcmVuZGVyZXI6IGdpdEdyYXBoUmVuZGVyZXIsXG4gIHN0eWxlczogZ2l0R3JhcGhTdHlsZXNcbn07XG5leHBvcnQge1xuICBkaWFncmFtXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/mermaid/dist/gitGraphDiagram-942e62fe.js\n"));

/***/ })

}]);